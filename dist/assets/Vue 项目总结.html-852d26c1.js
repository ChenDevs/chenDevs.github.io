const e=JSON.parse(`{"key":"v-14634a24","path":"/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/Vue/Vue%20%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93.html","title":"Vue 项目总结","lang":"zh-CN","frontmatter":{"title":"Vue 项目总结","tag":["项目总结","Vue"],"date":"2021-10-16T00:00:00.000Z","category":["开发日志"],"description":"1.搜索历史纪录 使用 localStorage 解决 vuex 在页面刷新后数据被清除的问题 使用逻辑 1.在 vuex 获取到用户信息时（例：state.user_id =user_info.user_id），同时把这个信息存入 localStorage 2.定义一个 mutation 方法，再次把数据从 localStorage 传给 state； 3.我们的问题发生在页面刷新时，可能很多同学就会去想在监听页面刷新事件时触发上面第 2 步的那个方法。其实不用这么麻烦，在 computed 属性时，只要我们判断一下用户信息是否为空，为空时调用第 2 步的那个方法就好了，然后我们把这个 state return 给那个响应属性就好了； 4.至于为什么这么麻烦在 state 和 localStorage 中传来传去，是因为 state 的值刷新后会没了，而 localStorage 的值不能响应式地变化（Vue 仅可以对其管理的数据做响应式处理，可以理解为 data 中的数据，localStorage 并不在 Vue 的管理下，自然不会有响应特性）；","head":[["meta",{"property":"og:url","content":"http://magicbegin.gitee.io/vuepress-blog/vuepress-blog/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/Vue/Vue%20%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"Vue 项目总结"}],["meta",{"property":"og:description","content":"1.搜索历史纪录 使用 localStorage 解决 vuex 在页面刷新后数据被清除的问题 使用逻辑 1.在 vuex 获取到用户信息时（例：state.user_id =user_info.user_id），同时把这个信息存入 localStorage 2.定义一个 mutation 方法，再次把数据从 localStorage 传给 state； 3.我们的问题发生在页面刷新时，可能很多同学就会去想在监听页面刷新事件时触发上面第 2 步的那个方法。其实不用这么麻烦，在 computed 属性时，只要我们判断一下用户信息是否为空，为空时调用第 2 步的那个方法就好了，然后我们把这个 state return 给那个响应属性就好了； 4.至于为什么这么麻烦在 state 和 localStorage 中传来传去，是因为 state 的值刷新后会没了，而 localStorage 的值不能响应式地变化（Vue 仅可以对其管理的数据做响应式处理，可以理解为 data 中的数据，localStorage 并不在 Vue 的管理下，自然不会有响应特性）；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T11:35:00.000Z"}],["meta",{"property":"article:author","content":"Mr Chen"}],["meta",{"property":"article:tag","content":"项目总结"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2021-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-27T11:35:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue 项目总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-27T11:35:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr Chen\\",\\"url\\":\\"https://gitee.com/magicBegin/vuepress-blog\\",\\"email\\":\\"599422271@qq.com\\"}]}"]]},"headers":[{"level":3,"title":"1.搜索历史纪录","slug":"_1-搜索历史纪录","link":"#_1-搜索历史纪录","children":[]},{"level":3,"title":"2.v-model 指令的三个参数","slug":"_2-v-model-指令的三个参数","link":"#_2-v-model-指令的三个参数","children":[]},{"level":3,"title":"3.vee-validate 表单验证","slug":"_3-vee-validate-表单验证","link":"#_3-vee-validate-表单验证","children":[]},{"level":3,"title":"4.vue-amap","slug":"_4-vue-amap","link":"#_4-vue-amap","children":[]},{"level":3,"title":"5.骨架屏","slug":"_5-骨架屏","link":"#_5-骨架屏","children":[]},{"level":3,"title":"6.为什么要有 vue，从历史角度谈谈","slug":"_6-为什么要有-vue-从历史角度谈谈","link":"#_6-为什么要有-vue-从历史角度谈谈","children":[]},{"level":3,"title":"7.vue 的核心内容:数据双向绑定 MVVM 思想 组件化开发 虚拟 DOM 树 自定义指令 生命周期","slug":"_7-vue-的核心内容-数据双向绑定-mvvm-思想-组件化开发-虚拟-dom-树-自定义指令-生命周期","link":"#_7-vue-的核心内容-数据双向绑定-mvvm-思想-组件化开发-虚拟-dom-树-自定义指令-生命周期","children":[]},{"level":3,"title":"8.vue 的基本用法","slug":"_8-vue-的基本用法","link":"#_8-vue-的基本用法","children":[]},{"level":3,"title":"9. vuex 里面有一个仓库是 state(数据仓库)改变数据仓库数据的一些方法 motation.异步的","slug":"_9-vuex-里面有一个仓库是-state-数据仓库-改变数据仓库数据的一些方法-motation-异步的","link":"#_9-vuex-里面有一个仓库是-state-数据仓库-改变数据仓库数据的一些方法-motation-异步的","children":[]},{"level":3,"title":"10.工作中遇到的 bug?","slug":"_10-工作中遇到的-bug","link":"#_10-工作中遇到的-bug","children":[]},{"level":3,"title":"11.模块化与组件化","slug":"_11-模块化与组件化","link":"#_11-模块化与组件化","children":[]},{"level":3,"title":"12.axio 跨域问题怎么解决？","slug":"_12-axio-跨域问题怎么解决","link":"#_12-axio-跨域问题怎么解决","children":[]},{"level":3,"title":"13.协作测试 api 接口 ip 统一设置","slug":"_13-协作测试-api-接口-ip-统一设置","link":"#_13-协作测试-api-接口-ip-统一设置","children":[]},{"level":3,"title":"14.多行溢出样式打包问题","slug":"_14-多行溢出样式打包问题","link":"#_14-多行溢出样式打包问题","children":[]},{"level":3,"title":"15.生命周期的具体使用","slug":"_15-生命周期的具体使用","link":"#_15-生命周期的具体使用","children":[]},{"level":3,"title":"16.页面刷新 vuex 数据丢失","slug":"_16-页面刷新-vuex-数据丢失","link":"#_16-页面刷新-vuex-数据丢失","children":[]}],"git":{"createdTime":1698406500000,"updatedTime":1698406500000,"contributors":[{"name":"chenzhen","email":"599422271@qq.com","commits":1}]},"readingTime":{"minutes":14.7,"words":4411},"filePathRelative":"开发日志/Vue/Vue 项目总结.md","localizedDate":"2021年10月16日","excerpt":"<h3> 1.搜索历史纪录</h3>\\n<ul>\\n<li><strong>使用 localStorage 解决 vuex 在页面刷新后数据被清除的问题</strong></li>\\n</ul>\\n<h4> 使用逻辑</h4>\\n<ul>\\n<li>1.在 vuex 获取到用户信息时（例：state.user_id =user_info.user_id），同时把这个信息存入 localStorage</li>\\n<li>2.定义一个 mutation 方法，再次把数据从 localStorage 传给 state；</li>\\n<li>3.我们的问题发生在页面刷新时，可能很多同学就会去想在监听页面刷新事件时触发上面第 2 步的那个方法。其实不用这么麻烦，在 computed 属性时，只要我们判断一下用户信息是否为空，为空时调用第 2 步的那个方法就好了，然后我们把这个 state return 给那个响应属性就好了；</li>\\n<li>4.至于为什么这么麻烦在 state 和 localStorage 中传来传去，是因为 state 的值刷新后会没了，而 localStorage 的值不能响应式地变化（Vue 仅可以对其管理的数据做响应式处理，可以理解为 data 中的数据，localStorage 并不在 Vue 的管理下，自然不会有响应特性）；</li>\\n</ul>","autoDesc":true}`);export{e as data};
