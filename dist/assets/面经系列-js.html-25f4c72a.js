const l=JSON.parse(`{"key":"v-2632ab89","path":"/%E9%9D%A2%E7%BB%8F%E6%8C%87%E5%8D%97/%E9%9D%A2%E7%BB%8F%E7%B3%BB%E5%88%97-js.html","title":"面经系列-js","lang":"zh-CN","frontmatter":{"title":"面经系列-js","date":"2021-01-08T00:00:00.000Z","category":"面经指南","description":"1\\\\. 介绍一下 js 的数据类型有哪些,值是如何存储的 JavaScript 一共有 8 种数据类型，其中有 7 种基本数据类型：Undefined、Null、Boolean、Number、String、Symbol（es6 新增，表示独一无二的值）和 BigInt（es10 新增）； 1 种引用数据类型——Object（Object 本质上是由一组...","head":[["meta",{"property":"og:url","content":"https://zfhblog.top/%E9%9D%A2%E7%BB%8F%E6%8C%87%E5%8D%97/%E9%9D%A2%E7%BB%8F%E7%B3%BB%E5%88%97-js.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"面经系列-js"}],["meta",{"property":"og:description","content":"1\\\\. 介绍一下 js 的数据类型有哪些,值是如何存储的 JavaScript 一共有 8 种数据类型，其中有 7 种基本数据类型：Undefined、Null、Boolean、Number、String、Symbol（es6 新增，表示独一无二的值）和 BigInt（es10 新增）； 1 种引用数据类型——Object（Object 本质上是由一组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T16:25:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Chen"}],["meta",{"property":"article:published_time","content":"2021-01-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T16:25:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面经系列-js\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T16:25:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Chen\\",\\"url\\":\\"/logo.png\\"}]}"]]},"headers":[{"level":3,"title":"1. 介绍一下 js 的数据类型有哪些,值是如何存储的","slug":"_1-介绍一下-js-的数据类型有哪些-值是如何存储的","link":"#_1-介绍一下-js-的数据类型有哪些-值是如何存储的","children":[]},{"level":3,"title":"2. && 、 ||和!! 运算符分别能做什么","slug":"_2-、-和-运算符分别能做什么","link":"#_2-、-和-运算符分别能做什么","children":[]},{"level":3,"title":"3. js 的数据类型的转换","slug":"_3-js-的数据类型的转换","link":"#_3-js-的数据类型的转换","children":[]},{"level":3,"title":"4. JS 中数据类型的判断（ typeof，instanceof，constructor，Object.prototype.toString.call()","slug":"_4-js-中数据类型的判断-typeof-instanceof-constructor-object-prototype-tostring-call","link":"#_4-js-中数据类型的判断-typeof-instanceof-constructor-object-prototype-tostring-call","children":[]},{"level":3,"title":"5. 介绍 js 有哪些内置对象？","slug":"_5-介绍-js-有哪些内置对象","link":"#_5-介绍-js-有哪些内置对象","children":[]},{"level":3,"title":"6. undefined 与 undeclared 的区别？","slug":"_6-undefined-与-undeclared-的区别","link":"#_6-undefined-与-undeclared-的区别","children":[]},{"level":3,"title":"7. null 和 undefined 的区别？","slug":"_7-null-和-undefined-的区别","link":"#_7-null-和-undefined-的区别","children":[]},{"level":3,"title":"8. {} 和 [] 的 valueOf 和 toString 的结果是什么？","slug":"_8-和-的-valueof-和-tostring-的结果是什么","link":"#_8-和-的-valueof-和-tostring-的结果是什么","children":[]},{"level":3,"title":"9. Javascript 的作用域和作用域链","slug":"_9-javascript-的作用域和作用域链","link":"#_9-javascript-的作用域和作用域链","children":[]},{"level":3,"title":"10. javascript 创建对象的几种方式？","slug":"_10-javascript-创建对象的几种方式","link":"#_10-javascript-创建对象的几种方式","children":[]},{"level":3,"title":"11. JavaScript 继承的几种实现方式？","slug":"_11-javascript-继承的几种实现方式","link":"#_11-javascript-继承的几种实现方式","children":[]},{"level":3,"title":"12. 寄生式组合继承的实现？","slug":"_12-寄生式组合继承的实现","link":"#_12-寄生式组合继承的实现","children":[]},{"level":3,"title":"13. 谈谈你对 this、call、apply 和 bind 的理解","slug":"_13-谈谈你对-this、call、apply-和-bind-的理解","link":"#_13-谈谈你对-this、call、apply-和-bind-的理解","children":[]},{"level":3,"title":"14. JavaScript 原型，原型链？ 有什么特点？","slug":"_14-javascript-原型-原型链-有什么特点","link":"#_14-javascript-原型-原型链-有什么特点","children":[]},{"level":3,"title":"15. js 获取原型的方法？","slug":"_15-js-获取原型的方法","link":"#_15-js-获取原型的方法","children":[]},{"level":3,"title":"16. 什么是闭包，为什么要用它？","slug":"_16-什么是闭包-为什么要用它","link":"#_16-什么是闭包-为什么要用它","children":[]},{"level":3,"title":"17. 什么是 DOM 和 BOM？","slug":"_17-什么是-dom-和-bom","link":"#_17-什么是-dom-和-bom","children":[]},{"level":3,"title":"18. 三种事件模型是什么？","slug":"_18-三种事件模型是什么","link":"#_18-三种事件模型是什么","children":[]},{"level":3,"title":"19. 事件委托是什么？","slug":"_19-事件委托是什么","link":"#_19-事件委托是什么","children":[]},{"level":3,"title":"20. 什么是事件传播?","slug":"_20-什么是事件传播","link":"#_20-什么是事件传播","children":[]},{"level":3,"title":"21. 什么是事件捕获？","slug":"_21-什么是事件捕获","link":"#_21-什么是事件捕获","children":[]},{"level":3,"title":"22. 什么是事件冒泡？","slug":"_22-什么是事件冒泡","link":"#_22-什么是事件冒泡","children":[]},{"level":3,"title":"23. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？","slug":"_23-dom-操作——怎样添加、移除、移动、复制、创建和查找节点","link":"#_23-dom-操作——怎样添加、移除、移动、复制、创建和查找节点","children":[]},{"level":3,"title":"24. js 数组和对象有哪些原生方法,列举一下","slug":"_24-js-数组和对象有哪些原生方法-列举一下","link":"#_24-js-数组和对象有哪些原生方法-列举一下","children":[]},{"level":3,"title":"25. 常用的正则表达式（仅做收集，涉及不深）","slug":"_25-常用的正则表达式-仅做收集-涉及不深","link":"#_25-常用的正则表达式-仅做收集-涉及不深","children":[]},{"level":3,"title":"26. Ajax 是什么? 如何创建一个 Ajax？","slug":"_26-ajax-是什么-如何创建一个-ajax","link":"#_26-ajax-是什么-如何创建一个-ajax","children":[]},{"level":3,"title":"27. js 延迟加载的方式有哪些？","slug":"_27-js-延迟加载的方式有哪些","link":"#_27-js-延迟加载的方式有哪些","children":[]},{"level":3,"title":"28. 谈谈你对模块化开发的理解？","slug":"_28-谈谈你对模块化开发的理解","link":"#_28-谈谈你对模块化开发的理解","children":[]},{"level":3,"title":"29. js 的几种模块规范？","slug":"_29-js-的几种模块规范","link":"#_29-js-的几种模块规范","children":[]},{"level":3,"title":"30. AMD 和 CMD 规范的区别？","slug":"_30-amd-和-cmd-规范的区别","link":"#_30-amd-和-cmd-规范的区别","children":[]},{"level":3,"title":"31. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。","slug":"_31-es6-模块与-commonjs-模块、amd、cmd-的差异。","link":"#_31-es6-模块与-commonjs-模块、amd、cmd-的差异。","children":[]},{"level":3,"title":"32. requireJS 的核心原理是什么？","slug":"_32-requirejs-的核心原理是什么","link":"#_32-requirejs-的核心原理是什么","children":[]},{"level":3,"title":"33. 谈谈 JS 的运行机制","slug":"_33-谈谈-js-的运行机制","link":"#_33-谈谈-js-的运行机制","children":[]},{"level":3,"title":"34. arguments 的对象是什么？","slug":"_34-arguments-的对象是什么","link":"#_34-arguments-的对象是什么","children":[]},{"level":3,"title":"35. 为什么在调用这个函数时，代码中的b会变成一个全局变量?","slug":"_35-为什么在调用这个函数时-代码中的b会变成一个全局变量","link":"#_35-为什么在调用这个函数时-代码中的b会变成一个全局变量","children":[]},{"level":3,"title":"36. 简单介绍一下 V8 引擎的垃圾回收机制","slug":"_36-简单介绍一下-v8-引擎的垃圾回收机制","link":"#_36-简单介绍一下-v8-引擎的垃圾回收机制","children":[]},{"level":3,"title":"37. 哪些操作会造成内存泄漏？","slug":"_37-哪些操作会造成内存泄漏","link":"#_37-哪些操作会造成内存泄漏","children":[]},{"level":3,"title":"38. ECMAScript 是什么？","slug":"_38-ecmascript-是什么","link":"#_38-ecmascript-是什么","children":[]},{"level":3,"title":"39. ECMAScript 2015（ES6）有哪些新特性？","slug":"_39-ecmascript-2015-es6-有哪些新特性","link":"#_39-ecmascript-2015-es6-有哪些新特性","children":[]},{"level":3,"title":"40. var,let和const的区别是什么？","slug":"_40-var-let和const的区别是什么","link":"#_40-var-let和const的区别是什么","children":[]},{"level":3,"title":"41. 什么是箭头函数？","slug":"_41-什么是箭头函数","link":"#_41-什么是箭头函数","children":[]},{"level":3,"title":"42. 什么是类？","slug":"_42-什么是类","link":"#_42-什么是类","children":[]},{"level":3,"title":"43. 什么是模板字符串？","slug":"_43-什么是模板字符串","link":"#_43-什么是模板字符串","children":[]},{"level":3,"title":"44. 什么是对象解构？","slug":"_44-什么是对象解构","link":"#_44-什么是对象解构","children":[]},{"level":3,"title":"45. 什么是Set对象，它是如何工作的？","slug":"_45-什么是set对象-它是如何工作的","link":"#_45-什么是set对象-它是如何工作的","children":[]},{"level":3,"title":"46. 什么是 Proxy？","slug":"_46-什么是-proxy","link":"#_46-什么是-proxy","children":[]},{"level":3,"title":"47. 写一个通用的事件侦听器函数","slug":"_47-写一个通用的事件侦听器函数","link":"#_47-写一个通用的事件侦听器函数","children":[]},{"level":3,"title":"48. 什么是函数式编程? JavaScript 的哪些特性使其成为函数式语言的候选语言？","slug":"_48-什么是函数式编程-javascript-的哪些特性使其成为函数式语言的候选语言","link":"#_48-什么是函数式编程-javascript-的哪些特性使其成为函数式语言的候选语言","children":[]},{"level":3,"title":"49. 什么是高阶函数？","slug":"_49-什么是高阶函数","link":"#_49-什么是高阶函数","children":[]},{"level":3,"title":"50. 为什么函数被称为一等公民？","slug":"_50-为什么函数被称为一等公民","link":"#_50-为什么函数被称为一等公民","children":[]},{"level":3,"title":"51. 手动实现 Array.prototype.map 方法","slug":"_51-手动实现-array-prototype-map-方法","link":"#_51-手动实现-array-prototype-map-方法","children":[]},{"level":3,"title":"52. 手动实现Array.prototype.filter方法","slug":"_52-手动实现array-prototype-filter方法","link":"#_52-手动实现array-prototype-filter方法","children":[]},{"level":3,"title":"53. 手动实现Array.prototype.reduce方法","slug":"_53-手动实现array-prototype-reduce方法","link":"#_53-手动实现array-prototype-reduce方法","children":[]},{"level":3,"title":"54. js 的深浅拷贝","slug":"_54-js-的深浅拷贝","link":"#_54-js-的深浅拷贝","children":[]},{"level":3,"title":"55. 手写 call、apply 及 bind 函数","slug":"_55-手写-call、apply-及-bind-函数","link":"#_55-手写-call、apply-及-bind-函数","children":[]},{"level":3,"title":"56. 函数柯里化的实现","slug":"_56-函数柯里化的实现","link":"#_56-函数柯里化的实现","children":[]},{"level":3,"title":"57. js 模拟 new 操作符的实现","slug":"_57-js-模拟-new-操作符的实现","link":"#_57-js-模拟-new-操作符的实现","children":[]},{"level":3,"title":"58. 什么是回调函数？回调函数有什么缺点","slug":"_58-什么是回调函数-回调函数有什么缺点","link":"#_58-什么是回调函数-回调函数有什么缺点","children":[]},{"level":3,"title":"59. Promise 是什么，可以手写实现一下吗？","slug":"_59-promise-是什么-可以手写实现一下吗","link":"#_59-promise-是什么-可以手写实现一下吗","children":[]},{"level":3,"title":"60. Iterator是什么，有什么作用？","slug":"_60-iterator是什么-有什么作用","link":"#_60-iterator是什么-有什么作用","children":[]},{"level":3,"title":"61. Generator函数是什么，有什么作用？","slug":"_61-generator函数是什么-有什么作用","link":"#_61-generator函数是什么-有什么作用","children":[]},{"level":3,"title":"62. 什么是 async/await 及其如何工作,有什么优缺点？","slug":"_62-什么是-async-await-及其如何工作-有什么优缺点","link":"#_62-什么是-async-await-及其如何工作-有什么优缺点","children":[]},{"level":3,"title":"63. instanceof 的原理是什么，如何实现","slug":"_63-instanceof-的原理是什么-如何实现","link":"#_63-instanceof-的原理是什么-如何实现","children":[]},{"level":3,"title":"64. js 的节流与防抖","slug":"_64-js-的节流与防抖","link":"#_64-js-的节流与防抖","children":[]},{"level":3,"title":"65. 什么是设计模式？","slug":"_65-什么是设计模式","link":"#_65-什么是设计模式","children":[]},{"level":3,"title":"66. 9 种前端常见的设计模式","slug":"_66-9-种前端常见的设计模式","link":"#_66-9-种前端常见的设计模式","children":[]}],"git":{"createdTime":1697989125000,"updatedTime":1698078312000,"contributors":[{"name":"chenzhen","email":"32085549+frontchen@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":110.34,"words":33101},"filePathRelative":"面经指南/面经系列-js.md","localizedDate":"2021年1月8日","autoDesc":true}`);export{l as data};
