import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as i,c as o,a as e,b as r,d as t,e as n}from"./app-2f8c304a.js";const h={},l=e("h3",{id:"_1-安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-安装","aria-hidden":"true"},"#"),r(" 1.安装")],-1),p=e("p",null,"Windows 下",-1),c=e("p",null,[r("npm install spy-debugger -g"),e("br"),r(" Mac 下")],-1),_=e("p",null,"sudo npm install spy-debugger -g",-1),u=e("h3",{id:"_2-使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-使用","aria-hidden":"true"},"#"),r(" 2.使用")],-1),E=e("li",null,"第一步：手机和 PC 保持在同一网络下（比如同时连到一个 Wi-Fi 下）",-1),g=e("li",null,"第二步：命令行输入 spy-debugger，按命令行提示用浏览器打开相应地址。",-1),b=e("li",null,"第三步：设置手机的 HTTP 代理，代理 IP 地址设置为 PC 的 IP 地址，端口为 spy-debugger 的启动端口(默认端口：9888)。",-1),A={href:"http://spydebugger.com/cert%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%EF%BC%88%E6%89%8B%E6%9C%BA%E9%A6%96%E6%AC%A1%E8%B0%83%E8%AF%95%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%EF%BC%8C%E5%B7%B2%E5%AE%89%E8%A3%85%E4%BA%86%E8%AF%81%E4%B9%A6%E7%9A%84%E6%89%8B%E6%9C%BA%E6%97%A0%E9%9C%80%E9%87%8D%E5%A4%8D%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,"第五步：用手机浏览器访问你要调试的页面即可",-1),y=n('<h3 id="_3-自定义项" tabindex="-1"><a class="header-anchor" href="#_3-自定义项" aria-hidden="true">#</a> 3.自定义项</h3><h4 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h4><p>(默认端口：9888)</p><p>spy-debugger -p 8888</p><h4 id="设置外部代理-默认使用-anyproxy" tabindex="-1"><a class="header-anchor" href="#设置外部代理-默认使用-anyproxy" aria-hidden="true">#</a> 设置外部代理（默认使用 AnyProxy）</h4>',5),x={href:"http://127.0.0.1:8888",target:"_blank",rel:"noopener noreferrer"},m=e("br",null,null,-1),B=n('<h4 id="是否让-weinre-监控-iframe-加载的页面" tabindex="-1"><a class="header-anchor" href="#是否让-weinre-监控-iframe-加载的页面" aria-hidden="true">#</a> 是否让 weinre 监控 iframe 加载的页面</h4><p>(默认： false)</p><p>spy-debugger -i true</p><h4 id="是否只拦截浏览器发起的-https-请求" tabindex="-1"><a class="header-anchor" href="#是否只拦截浏览器发起的-https-请求" aria-hidden="true">#</a> 是否只拦截浏览器发起的 https 请求</h4><p>(默认： true)</p><p>spy-debugger -b false<br> 有些浏览器发出的 connect 请求没有正确的携带 userAgent，这个判断有时候会出错，如 UC 浏览器。这个时候需要设置为 false。大多数情况建议启用默认配置：true，由于目前大量 App 应用自身（非 WebView）发出的请求会使用到 SSL pinning 技术，自定义的证书将不能通过 app 的证书校验。</p><h4 id="是否允许-http-缓存" tabindex="-1"><a class="header-anchor" href="#是否允许-http-缓存" aria-hidden="true">#</a> 是否允许 HTTP 缓存</h4><p>(默认： false)</p><p>spy-debugger -c true</p>',9);function C(F,P){const a=d("ExternalLinkIcon");return i(),o("div",null,[l,p,c,_,u,e("ul",null,[E,g,b,e("li",null,[r("第四步：安装证书。注：手机必须先设置完代理后再通过(非微信)手机浏览器访问"),e("a",A,[r("http://spydebugger.com/cert安装证书（手机首次调试需要安装证书，已安装了证书的手机无需重复安装"),t(a)]),r(")。")]),f]),y,e("p",null,[r("spy-debugger -e "),e("a",x,[r("http://127.0.0.1:8888"),t(a)]),m,r(" spy-debugger 内置 AnyProxy 提供抓包功能，但是也可通过设置外部代理和其它抓包代理工具一起使用，如：Charles、Fiddler。")]),B])}const T=s(h,[["render",C],["__file","移动端真机调试spy-debugger.html.vue"]]);export{T as default};
