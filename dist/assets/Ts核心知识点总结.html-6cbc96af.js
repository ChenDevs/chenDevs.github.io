const n=JSON.parse(`{"key":"v-a0f6ed6e","path":"/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%9F%B3/JS%E5%9F%BA%E7%A1%80/Ts%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.html","title":"Ts核心知识点总结","lang":"zh-CN","frontmatter":{"title":"Ts核心知识点总结","tag":"JS基础","date":"2020-12-21T00:00:00.000Z","category":["前端基石"],"description":"核心知识点 1. 基础类型 TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。接下来我们简单介绍一下这几种类型的用法. // 布尔类型 let isCookie: boolean = true // 数值类型 let myMoney: number = 12 // 字符串类型 let name: string = '徐小夕' // 数组类型, 有两种表示方式,第一种可以在元素类型后面接上[]，表示由此类型元素组成的一个数组 let arr: number[] = [1, 2, 2] // 数组类型, 使用数组泛型 let arr: Array&lt;number&gt; = [1, 2, 2] // 元组类型, 允许表示一个已知元素数量和类型的数组，各元素的类型不必相同 let xi: [string, number] // 初始化xi xi = ['xu', 10] // 正确 xi = [11, 'xu'] // 错误 // 枚举类型, 可以为一组数值赋予友好的名字 enum ActionType { doing, done, fail } let action: ActionType = ActionType.done // 1 // any, 表示任意类型, 可以绕过类型检查器对这些值进行检查 let color: any = 1 color = 'red' // void类型, 当一个函数没有返回值时，通常会设置其返回值类型是 void function getName(): void { console.log('This is my name') } // object类型, 表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型 let a: object a = { props: 1 }","head":[["meta",{"property":"og:url","content":"http://magicbegin.gitee.io/vuepress-blog/vuepress-blog/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%9F%B3/JS%E5%9F%BA%E7%A1%80/Ts%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"Ts核心知识点总结"}],["meta",{"property":"og:description","content":"核心知识点 1. 基础类型 TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。接下来我们简单介绍一下这几种类型的用法. // 布尔类型 let isCookie: boolean = true // 数值类型 let myMoney: number = 12 // 字符串类型 let name: string = '徐小夕' // 数组类型, 有两种表示方式,第一种可以在元素类型后面接上[]，表示由此类型元素组成的一个数组 let arr: number[] = [1, 2, 2] // 数组类型, 使用数组泛型 let arr: Array&lt;number&gt; = [1, 2, 2] // 元组类型, 允许表示一个已知元素数量和类型的数组，各元素的类型不必相同 let xi: [string, number] // 初始化xi xi = ['xu', 10] // 正确 xi = [11, 'xu'] // 错误 // 枚举类型, 可以为一组数值赋予友好的名字 enum ActionType { doing, done, fail } let action: ActionType = ActionType.done // 1 // any, 表示任意类型, 可以绕过类型检查器对这些值进行检查 let color: any = 1 color = 'red' // void类型, 当一个函数没有返回值时，通常会设置其返回值类型是 void function getName(): void { console.log('This is my name') } // object类型, 表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型 let a: object a = { props: 1 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T11:35:00.000Z"}],["meta",{"property":"article:author","content":"Mr Chen"}],["meta",{"property":"article:tag","content":"JS基础"}],["meta",{"property":"article:published_time","content":"2020-12-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-27T11:35:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ts核心知识点总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-27T11:35:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr Chen\\",\\"url\\":\\"https://gitee.com/magicBegin/vuepress-blog\\",\\"email\\":\\"599422271@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"核心知识点","slug":"核心知识点","link":"#核心知识点","children":[{"level":3,"title":"1. 基础类型","slug":"_1-基础类型","link":"#_1-基础类型","children":[]},{"level":3,"title":"2. 接口","slug":"_2-接口","link":"#_2-接口","children":[]},{"level":3,"title":"3. 类","slug":"_3-类","link":"#_3-类","children":[]},{"level":3,"title":"4. 函数","slug":"_4-函数","link":"#_4-函数","children":[]},{"level":3,"title":"5. 泛型","slug":"_5-泛型","link":"#_5-泛型","children":[]},{"level":3,"title":"6. 高级类型","slug":"_6-高级类型","link":"#_6-高级类型","children":[]},{"level":3,"title":"7. 命名空间","slug":"_7-命名空间","link":"#_7-命名空间","children":[]},{"level":3,"title":"8. 使用第三方类库","slug":"_8-使用第三方类库","link":"#_8-使用第三方类库","children":[]},{"level":3,"title":"9. 声明文件","slug":"_9-声明文件","link":"#_9-声明文件","children":[]}]}],"git":{"createdTime":1698406500000,"updatedTime":1698406500000,"contributors":[{"name":"chenzhen","email":"599422271@qq.com","commits":1}]},"readingTime":{"minutes":10.8,"words":3239},"filePathRelative":"前端开发/前端基石/JS基础/Ts核心知识点总结.md","localizedDate":"2020年12月21日","excerpt":"<h2> 核心知识点</h2>\\n<h3> 1. 基础类型</h3>\\n<p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。接下来我们简单介绍一下这几种类型的用法.</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 布尔类型</span>\\n<span class=\\"token keyword\\">let</span> isCookie<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n\\n<span class=\\"token comment\\">// 数值类型</span>\\n<span class=\\"token keyword\\">let</span> myMoney<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">12</span>\\n\\n<span class=\\"token comment\\">// 字符串类型</span>\\n<span class=\\"token keyword\\">let</span> name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'徐小夕'</span>\\n\\n<span class=\\"token comment\\">// 数组类型, 有两种表示方式,第一种可以在元素类型后面接上[]，表示由此类型元素组成的一个数组</span>\\n<span class=\\"token keyword\\">let</span> arr<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span>\\n\\n<span class=\\"token comment\\">// 数组类型, 使用数组泛型</span>\\n<span class=\\"token keyword\\">let</span> arr<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">Array</span><span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">number</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span>\\n\\n<span class=\\"token comment\\">// 元组类型, 允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</span>\\n<span class=\\"token keyword\\">let</span> xi<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token comment\\">// 初始化xi</span>\\nxi <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'xu'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span> <span class=\\"token comment\\">// 正确</span>\\nxi <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'xu'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token comment\\">// 错误</span>\\n\\n<span class=\\"token comment\\">// 枚举类型, 可以为一组数值赋予友好的名字</span>\\n<span class=\\"token keyword\\">enum</span> ActionType <span class=\\"token punctuation\\">{</span>\\n  doing<span class=\\"token punctuation\\">,</span>\\n  done<span class=\\"token punctuation\\">,</span>\\n  fail\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">let</span> action<span class=\\"token operator\\">:</span> ActionType <span class=\\"token operator\\">=</span> ActionType<span class=\\"token punctuation\\">.</span>done <span class=\\"token comment\\">// 1</span>\\n\\n<span class=\\"token comment\\">// any, 表示任意类型, 可以绕过类型检查器对这些值进行检查</span>\\n<span class=\\"token keyword\\">let</span> color<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\ncolor <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'red'</span>\\n\\n<span class=\\"token comment\\">// void类型, 当一个函数没有返回值时，通常会设置其返回值类型是 void</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'This is my name'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// object类型, 表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型</span>\\n<span class=\\"token keyword\\">let</span> a<span class=\\"token operator\\">:</span> object\\na <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> props<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
