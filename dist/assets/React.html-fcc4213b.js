import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,b as n,d as s,a as l,e as a}from"./app-52f3f02e.js";const i={},r=a(`<h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3><h4 id="_1-什么是-react" tabindex="-1"><a class="header-anchor" href="#_1-什么是-react" aria-hidden="true">#</a> 1.什么是 React</h4><ul><li>用来构建 UI 的 JavaScript 库</li><li>React 不是一个 MVC 框架，仅仅是视图（V）层的库 <img src="https://facebook.github.io/react/" alt="React 官网"><img src="https://doc.react-china.org/" alt="React 中文文档"></li></ul><h4 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2.特点</h4><ul><li>1 使用 JSX 语法 创建组件，实现组件化开发，<strong>为函数式的 UI 编程方式打开了大门</strong></li><li>2 性能高的让人称赞：通过 <code>diff算法</code> 和 <code>虚拟DOM</code> 实现视图的高效更新</li><li>3 HTML 仅仅是个开始</li></ul><blockquote><p>JSX --TO--&gt; EveryThing - JSX --&gt; HTML - JSX --&gt; native ios 或 android 中的组件（XML） - JSX --&gt; VR - JSX --&gt; 物联网</p></blockquote><h4 id="_3-为什么要用-react" tabindex="-1"><a class="header-anchor" href="#_3-为什么要用-react" aria-hidden="true">#</a> 3.为什么要用 React</h4><ul><li>1 使用<code>组件化</code>开发方式，符合现代 Web 开发的趋势</li><li>2 技术成熟，社区完善，配件齐全，适用于大型 Web 项目（生态系统健全）</li><li>3 由 Facebook 专门的团队维护，技术支持可靠</li><li>4 ReactNative - Learn once, write anywhere: Build mobile apps with React</li><li>5 使用方式简单，性能非常高，支持服务端渲染</li><li>6 React 非常火，从技术角度，可以满足好奇心，提高技术水平；从职业角度，有利于求职和晋升，有利于参与潜力大的项目</li></ul><h4 id="_4-react-中的核心概念" tabindex="-1"><a class="header-anchor" href="#_4-react-中的核心概念" aria-hidden="true">#</a> 4.React 中的核心概念</h4><ul><li>1 虚拟 DOM（Virtual DOM）</li><li>2 Diff 算法（虚拟 DOM 的加速器，提升 React 性能的法宝）</li></ul><h4 id="_5-虚拟-dom-vitural-dom" tabindex="-1"><a class="header-anchor" href="#_5-虚拟-dom-vitural-dom" aria-hidden="true">#</a> 5.虚拟 DOM（Vitural DOM）</h4><blockquote><p>React 将 DOM 抽象为虚拟 DOM，虚拟 DOM 其实就是用一个对象来描述 DOM，通过对比前后两个对象的差异，最终只把变化的部分重新渲染，提高渲染的效率</p></blockquote><p><img src="https://github.com/livoras/blog/issues/13" alt="如何实现一个 Virtual DOM 算法"><img src="https://www.zhihu.com/question/31809713" alt="理解 Virtual DOM"></p><h5 id="vituraldom-的处理方式" tabindex="-1"><a class="header-anchor" href="#vituraldom-的处理方式" aria-hidden="true">#</a> VituralDOM 的处理方式</h5><ul><li>1 用 JavaScript 对象结构表示 DOM 树的结构，然后用这个树构建一个真正的 DOM 树，插到文档当中</li><li>2 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li><li>3 把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了</li></ul><h5 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> Diff 算法</h5><p><img src="https://facebook.github.io/react/docs/reconciliation.html" alt="Reconciliation diff"><img src="https://doc.react-china.org/docs/reconciliation.html" alt="diff 算法 - 中文文档"><img src="https://zhuanlan.zhihu.com/p/20346379" alt="不可思议的 react diff"><img src="https://github.com/zmmbreeze/blog/issues/9" alt="React diff 算法"></p><blockquote><p>当你使用 React 的时候，在某个时间点 render() 函数创建了一棵 React 元素树， 在下一个 state 或者 props 更新的时候，render() 函数将创建一棵新的 React 元素树， React 将对比这两棵树的不同之处，计算出如何高效的更新 UI（只更新变化的地方）</p></blockquote><p>了解： 有一些解决将一棵树转换为另一棵树的最小操作数算法问题的通用方案。然而，树中元素个数为 n，最先进的算法 的时间复杂度为 O(n3) 。 如果直接使用这个算法，在 React 中展示 1000 个元素则需要进行 10 亿次的比较。这操作太过昂贵，相反，React 基于两点假设，实现了一个 O(n)算法，提升性能：</p><ul><li>React 中有两种假定： <ul><li>1 <strong>两个不同类型的元素会产生不同的树</strong></li><li>2 <strong>开发者可以通过 key 属性指定不同树中没有发生改变的子元素</strong></li></ul></li></ul><h3 id="diff-算法的说明-1" tabindex="-1"><a class="header-anchor" href="#diff-算法的说明-1" aria-hidden="true">#</a> Diff 算法的说明 - 1</h3><ul><li>如果两棵树的根元素类型不同，React 会销毁旧树，创建新树</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//  旧树</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">//  新树</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// 执行过程：destory Counter -&gt; insert Counter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="diff-算法的说明-2" tabindex="-1"><a class="header-anchor" href="#diff-算法的说明-2" aria-hidden="true">#</a> Diff 算法的说明 - 2</h3><ul><li>对于类型相同的 React DOM 元素，React 会对比两者的属性是否相同，只更新不同的属性</li><li>当处理完这个 DOM 节点，React 就会递归处理子节点。</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//  旧</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>before<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuff<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">//  新</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>after<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuff<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">// 只更新：className 属性</span>

<span class="token comment">//  旧</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">&#39;bold&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">//  新</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">&#39;bold&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">// 只更新：color属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="diff-算法的说明-3" tabindex="-1"><a class="header-anchor" href="#diff-算法的说明-3" aria-hidden="true">#</a> Diff 算法的说明 - 3</h3><ul><li>1 当在子节点的后面添加一个节点，这时候两棵树的转化工作执行的很好</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 旧 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>first<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 新 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>first<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>third<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 执行过程：
 React会匹配新旧两个&lt;li&gt;first&lt;/li&gt;，匹配两个&lt;li&gt;second&lt;/li&gt;，然后添加 &lt;li&gt;third&lt;/li&gt; tree --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2 但是如果你在开始位置插入一个元素，那么问题就来了：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--  旧 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Duke<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Villanova<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--  新 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Connecticut<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Duke<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Villanova<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 执行过程：
React将改变每一个子节点，而非保持 &lt;li&gt;Duke&lt;/li&gt; 和 &lt;li&gt;Villanova&lt;/li&gt; 不变 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="key-属性" tabindex="-1"><a class="header-anchor" href="#key-属性" aria-hidden="true">#</a> key 属性</h3><blockquote><p>为了解决以上问题，React 提供了一个 key 属性。当子节点带有 key 属性，React 会通过 key 来匹配原始树和后来的树。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 旧 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2015<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Duke<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2016<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Villanova<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 新 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2014<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Connecticut<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2015<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Duke<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2016<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Villanova<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 执行过程：
现在 React 知道带有key &#39;2014&#39; 的元素是新的，对于 &#39;2015&#39; 和 &#39;2016&#39; 仅仅移动位置即可 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>说明：key 属性在 React 内部使用，但不会传递给你的组件</li><li>推荐：在遍历数据时，推荐在组件中使用 key 属性：<code>&lt;li key={item.id}&gt;{item.name}&lt;/li&gt;</code></li><li>注意：<strong>key 只需要保持与他的兄弟节点唯一即可，不需要全局唯一</strong></li><li>注意：<strong>尽可能的减少数组 index 作为 key，数组中插入元素的等操作时，会使得效率底下</strong></li></ul><h3 id="key-demo" tabindex="-1"><a class="header-anchor" href="#key-demo" aria-hidden="true">#</a> key demo</h3><ul><li><p>执行过程：B != A，则创建并插入 B，删除 A；以此类推，创建并插入 A、D、C，删除 B、C、D</p></li><li><p>执行过程：B、D 不做任何操作，A、C 进行移动操作</p></li></ul><hr><h2 id="react-的基本使用" tabindex="-1"><a class="header-anchor" href="#react-的基本使用" aria-hidden="true">#</a> React 的基本使用</h2><ul><li>安装：<code>npm i -S react react-dom</code></li><li><code>react</code>：react 是 React 库的入口点</li><li><code>react-dom</code>：提供了针对 DOM 的方法，比如：把创建的虚拟 DOM，渲染到页面上</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1. 导入 react</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 创建 虚拟DOM</span>
<span class="token keyword">const</span> divVD <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;hello react&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Hello React！！！&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 渲染</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>divVD<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api-说明" tabindex="-1"><a class="header-anchor" href="#api-说明" aria-hidden="true">#</a> API 说明</h3><ul><li>createElement()：知道即可</li><li>render()</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// https://facebook.github.io/react/docs/react-api.html</span>
<span class="token comment">// 作用：根据指定的参数，创建react对象</span>
<span class="token comment">//</span>
<span class="token comment">// 第一个参数：指定创建虚拟DOM的类型</span>
<span class="token comment">//  类型：string 或者 react组件</span>
<span class="token comment">//  1 任意字符串类型的标签名称，比如：&#39;div&#39; / &#39;span&#39;</span>
<span class="token comment">//  2 react组件类型，比如：&lt;Welcome&gt;&lt;/Welcome&gt;</span>
<span class="token comment">// 第二个参数：指定元素自身的属性</span>
<span class="token comment">//  类型：对象或者null</span>
<span class="token comment">// 第三个参数：当前元素的子元素</span>
<span class="token comment">//  类型：string 或者 createElement() 的返回值</span>
<span class="token comment">// 返回值：react对象</span>
React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// https://facebook.github.io/react/docs/react-dom.html</span>
<span class="token comment">// 作用：渲染react元素</span>
<span class="token comment">// 第一个参数：指定要渲染的react对象</span>
<span class="token comment">// 第二个参数：指定渲染到页面中的容器（DOM对象）</span>
<span class="token comment">// 第三个参数：回调函数</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createelement-的问题" tabindex="-1"><a class="header-anchor" href="#createelement-的问题" aria-hidden="true">#</a> createElement()的问题</h3><ul><li>说明：<code>createElement()</code>方式，代码编写不友好，太复杂</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> dv <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;shopping-list&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Shopping List for &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Instagram&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;WhatsApp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 渲染</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>dv<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsx-的基本使用" tabindex="-1"><a class="header-anchor" href="#jsx-的基本使用" aria-hidden="true">#</a> JSX 的基本使用</h3><ul><li><p>注意：JSX 语法，最终会被编译为 createElement() 方法</p></li><li><p>推荐：<strong>使用 JSX 的方式创建组件</strong></p></li><li><p>JSX - JavaScript XML</p></li><li><p>安装：<code>npm i -D babel-preset-react</code> （依赖与：babel-core/babel-loader）</p><blockquote><p>注意：JSX 的语法需要通过 babel-preset-react 编译后，才能被解析执行</p></blockquote></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 1 在 .babelrc 开启babel对 JSX 的转换 */</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;env&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;react&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 2 webpack.config.js */</span>
<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">]</span>

<span class="token comment">/* 3 在 js 文件中 使用 JSX */</span>
<span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div title<span class="token operator">=</span><span class="token string">&quot;标题&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;cls container&quot;</span><span class="token operator">&gt;</span>Hello <span class="token constant">JSX</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>

<span class="token comment">/* 4 渲染 JSX 到页面中 */</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>dv<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsx-的注意点" tabindex="-1"><a class="header-anchor" href="#jsx-的注意点" aria-hidden="true">#</a> JSX 的注意点</h2><ul><li>注意 1: 如果在 JSX 中给元素添加类, 需要使用 <code>className</code> 代替 class <ul><li>类似：label 的 for 属性，使用<code>htmlFor</code>代替</li></ul></li><li>注意 2：在 JSX 中可以直接使用 JS 代码，直接在 JSX 中通过 {} 中间写 JS 代码即可</li><li>注意 3：在 JSX 中<strong>只能使用表达式</strong>，但是不能出现 语句！！！</li><li>注意 4：在 JSX 中注释语法：<code>{/* 中间是注释的内容 */}</code></li></ul><h2 id="react-组件" tabindex="-1"><a class="header-anchor" href="#react-组件" aria-hidden="true">#</a> React 组件</h2><blockquote><p>React 组件可以让你把 UI 分割为独立、可复用的片段，并将每一片段视为相互独立的部分。</p></blockquote><ul><li>组件是由一个个的 HTML 元素组成的</li><li>概念上来讲, 组件就像 JS 中的函数。它们接受用户输入（<code>props</code>），并且<strong>返回</strong>一个 React 对象，用来描述展示在页面中的内容</li></ul><h3 id="react-创建组件的两种方式" tabindex="-1"><a class="header-anchor" href="#react-创建组件的两种方式" aria-hidden="true">#</a> React 创建组件的两种方式</h3><ul><li>1 通过 JS 函数 创建（无状态组件）</li><li>2 通过 class 创建（有状态组件）</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>函数式组件 和 class 组件的使用场景说明： 1 如果一个组件仅仅是为了展示数据，那么此时就可以使用 函数组件 2
如果一个组件中有一定业务逻辑，需要操作数据，那么就需要使用 class 创建组件，因此，此时需要使用 state
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="javascript-函数创建" tabindex="-1"><a class="header-anchor" href="#javascript-函数创建" aria-hidden="true">#</a> JavaScript 函数创建</h4><ul><li>注意：1 函数名称必须为大写字母开头，React 通过这个特点来判断是不是一个组件</li><li>注意：2 函数必须有返回值，返回值可以是：JSX 对象或<code>null</code></li><li>注意：3 返回的 JSX，必须有<em>一个</em>根元素</li><li>注意：4 组件的返回值使用<code>()</code>包裹，避免换行问题</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;shopping-list&quot;</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token comment">/* 注释的写法 */</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Shopping List <span class="token keyword">for</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Instagram<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>WhatsApp<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">&quot;jack&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="class-创建" tabindex="-1"><a class="header-anchor" href="#class-创建" aria-hidden="true">#</a> class 创建</h4><ul><li>注意：基于 <code>ES6</code> 中的 class，需要配合 <code>babel</code> 将代码转化为浏览器识别的 ES5 语法</li><li>安装：<code>npm i -D babel-preset-env</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ShoppingList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;shopping-list&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Shopping List <span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Instagram<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>WhatsApp<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="给组件传递数据-父子组件传递数据" tabindex="-1"><a class="header-anchor" href="#给组件传递数据-父子组件传递数据" aria-hidden="true">#</a> 给组件传递数据 - 父子组件传递数据</h2><ul><li>组件中有一个 <code>只读的对象</code> 叫做 <code>props</code>，无法给 props 添加属性</li><li>获取方式：函数参数 <code>props</code></li><li>作用：将传递给组件的属性转化为 <code>props</code> 对象中的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// props ---&gt; { username: &#39;zs&#39;, age: 20 }</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Welcome React<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>姓名：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span>年龄是：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 给 Hello组件 传递 props：username 和 age</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">reander</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello username<span class="token operator">=</span><span class="token string">&quot;zs&quot;</span> age<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Hello<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="封装组件到独立的文件中" tabindex="-1"><a class="header-anchor" href="#封装组件到独立的文件中" aria-hidden="true">#</a> 封装组件到独立的文件中</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./components/Hello2.js</span>

<span class="token comment">// 1. 引入React模块</span>
<span class="token comment">// 由于 JSX 编译后会调用 React.createElement 方法，所以在你的 JSX 代码中必须首先声明 React 变量。</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 使用function构造函数创建组件</span>
<span class="token keyword">function</span> <span class="token function">Hello2</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>这是Hello2组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>这是大大的<span class="token constant">H1</span>标签，我大，我骄傲！！！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h6<span class="token operator">&gt;</span>这是小小的h6标签，我小，我傲娇！！！<span class="token operator">&lt;</span><span class="token operator">/</span>h6<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3. 导出组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Hello2<span class="token punctuation">;</span>

<span class="token comment">// app.js</span>
<span class="token comment">// 使用组件：</span>
<span class="token keyword">import</span> Hello2 <span class="token keyword">from</span> <span class="token string">&#39;./components/Hello2&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="props-和-state" tabindex="-1"><a class="header-anchor" href="#props-和-state" aria-hidden="true">#</a> props 和 state</h2><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><ul><li>作用：<strong>给组件传递数据，一般用在父子组件之间</strong></li><li>说明：React 把传递给组件的属性转化为一个对象并交给 <code>props</code></li><li>特点：<code>props</code>是只读的，无法给<code>props</code>添加或修改属性</li><li><code>props.children</code>：获取组件的内容，比如： <ul><li><code>&lt;Hello&gt;组件内容&lt;/Hello&gt;</code> 中的 <code>组件内容</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// props 是一个包含数据的对象参数，不要试图修改 props 参数</span>
<span class="token comment">// 返回值：react元素</span>
<span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回的 react元素中必须只有一个根元素</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> state</h3><ul><li>作用：用来给组件提供<code>组件内部</code>使用的数据</li><li>注意：只有通过<code>class</code>创建的组件才具有状态</li><li>注意：<strong>状态是私有的，完全由组件来控制</strong></li><li>注意：不要在 <code>state</code> 中添加 <code>render()</code> 方法中不需要的数据，会影响渲染性能！ <ul><li>可以将组件内部使用但是不渲染在视图中的内容，直接添加给 this</li></ul></li><li>注意：不要在 <code>render()</code> 方法中调用 setState() 方法来修改<code>state</code>的值 <ul><li>但是可以通过 <code>this.state.name = &#39;rose&#39;</code> 方式设置 state（不推荐!!!!）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>性别：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsx-语法转化过程" tabindex="-1"><a class="header-anchor" href="#jsx-语法转化过程" aria-hidden="true">#</a> JSX 语法转化过程</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSX</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">&quot;greeting&quot;</span><span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// JSX -&gt; createElement</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;greeting&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// React elements: 使用对象的形式描述页面结构</span>
<span class="token comment">// Note: 这是简化后的对象结构</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello, world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="评论列表案例" tabindex="-1"><a class="header-anchor" href="#评论列表案例" aria-hidden="true">#</a> 评论列表案例</h2><ul><li>巩固有状态组件和无状态组件的使用</li><li>两个组件：<code>&lt;CommentList&gt;&lt;/CommentList&gt;</code> 和 <code>&lt;Comment&gt;&lt;/Comment&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;哈哈，沙发&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;张三2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;哈哈，板凳&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;张三3&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;哈哈，凉席&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;张三4&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;哈哈，砖头&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;张三5&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;哈哈，楼下山炮&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">// 属性扩散</span>
<span class="token operator">&lt;</span>Comment <span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Comment<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="style-样式" tabindex="-1"><a class="header-anchor" href="#style-样式" aria-hidden="true">#</a> style 样式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 直接写行内样式：</span>
<span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">border</span><span class="token operator">:</span><span class="token string">&#39;1px solid red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span><span class="token string">&#39;12px&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

<span class="token comment">// 2. 抽离为对象形式</span>
<span class="token keyword">var</span> styleH3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> styleObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">liStyle</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">border</span><span class="token operator">:</span><span class="token string">&#39;1px solid red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span><span class="token string">&#39;12px&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">h3Style</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token punctuation">{</span>styleObj<span class="token punctuation">.</span>liStyle<span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token punctuation">{</span>styleObj<span class="token punctuation">.</span>h3Style<span class="token punctuation">}</span><span class="token operator">&gt;</span>评论内容：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>

<span class="token comment">// 3. 使用样式表定义样式：</span>
<span class="token keyword">import</span> <span class="token string">&#39;../css/comment.css&#39;</span>
<span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;pUser&quot;</span><span class="token operator">&gt;</span>评论人：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a> 相关文章</h2><p><img src="http://www.cnblogs.com/tim100/p/6050514.html" alt="React 数据流和组件间的沟通总结"><img src="https://segmentfault.com/q/1010000005876655/a-1020000005876751" alt="单向数据流和双向绑定各有什么优缺点？"><img src="https://www.zhihu.com/question/29504639?sort=created" alt="怎么更好的理解虚拟 DOM?"><img src="https://discountry.github.io/react/" alt="React 中文文档"><img src="http://blog.csdn.net/yczz/article/details/49886061" alt="React 源码剖析系列 － 不可思议的 react diff"><img src="http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&amp;isappinstalled=0" alt="深入浅出 React（四）：虚拟 DOM Diff 算法解析"></p><h2 id="es6-中-class-关键字的使用" tabindex="-1"><a class="header-anchor" href="#es6-中-class-关键字的使用" aria-hidden="true">#</a> ES6 中 class 关键字的使用</h2><ul><li><strong>ES6 中的所有的代码都是运行在严格模式中的</strong></li><li>1 它是用来定义类的，是 ES6 中实现面向对象编程的新方式</li><li>2 使用<code>static</code>关键字定义静态属性</li><li>3 使用<code>constructor</code>构造函数，创建实例属性 <img src="http://es6.ruanyifeng.com/#docs/class" alt="class 关键字"></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实例属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 静态属性</span>
Person<span class="token punctuation">.</span>staticName <span class="token operator">=</span> <span class="token string">&#39;静态属性&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 class 中定义方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 实例方法</span>
<span class="token function">sayHello</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大家好，我今年&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&#39;了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 静态方法</span>
<span class="token keyword">static</span> <span class="token function">wangwang</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是小明，我新get了一个技能，会暖床&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现继承的方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">American</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 必须调用super(), super表示父类的构造函数</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>skin <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="react-生命周期" tabindex="-1"><a class="header-anchor" href="#react-生命周期" aria-hidden="true">#</a> react 生命周期</h1><h2 id="组件的生命周期" tabindex="-1"><a class="header-anchor" href="#组件的生命周期" aria-hidden="true">#</a> 组件的生命周期</h2><ul><li>简单说：<strong>一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期</strong></li></ul><p>组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数！</p><ul><li>通过这个函数，能够让开发人员的代码，参与到组件的生命周期中。也就是说，通过钩子函数，就可以控制组件的行为</li></ul><p><img src="https://doc.react-china.org/docs/react-component.html" alt="react component"><img src="http://www.race604.com/react-native-component-lifecycle/" alt="React Native 中组件的生命周期"><img src="https://zhuanlan.zhihu.com/p/20312691?refer=purerender" alt="React 生命周期的管理艺术"><img src="http://www.jianshu.com/p/9e427e04135e" alt="智能组件和木偶组件"></p><h3 id="组件生命周期函数总览" tabindex="-1"><a class="header-anchor" href="#组件生命周期函数总览" aria-hidden="true">#</a> 组件生命周期函数总览</h3><ul><li><p>说明：通过 <code>Counter计数器的小案例</code>，理解组件的生命周期函数基本使用</p></li><li><p>组件的生命周期包含三个阶段：创建阶段（Mounting）、运行和交互阶段（Updating）、卸载阶段（Unmounting）</p></li><li><p>Mounting：</p><blockquote><p>constructor()<br> componentWillMount()<br> render()<br> componentDidMount()</p></blockquote></li><li><p>Updating</p><blockquote><p>componentWillReceiveProps()<br> shouldComponentUpdate()<br> componentWillUpdate()<br> render()<br> componentDidUpdate()</p></blockquote></li><li><p>Unmounting</p><blockquote><p>componentWillUnmount()</p></blockquote></li></ul><h3 id="组件生命周期-创建阶段-mounting" tabindex="-1"><a class="header-anchor" href="#组件生命周期-创建阶段-mounting" aria-hidden="true">#</a> 组件生命周期 - 创建阶段(Mounting)</h3><ul><li>特点：该阶段的函数只执行一次</li></ul><h4 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor()</h4><ul><li>作用：1 获取 props 2 初始化 state</li><li>说明：通过 <code>constructor()</code> 的参数<code>props</code>获取 <img src="https://doc.react-china.org/docs/react-without-es6.html" alt="设置 state 和 props"></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取 props</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化 state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> props<span class="token punctuation">.</span>initCount<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化 props</span>
<span class="token comment">// 语法：通过静态属性 defaultProps 来初始化props</span>
Greeting<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">initCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="componentwillmount" tabindex="-1"><a class="header-anchor" href="#componentwillmount" aria-hidden="true">#</a> componentWillMount()</h4><ul><li>说明：组件被挂载到页面之前调用，其在 render()之前被调用，因此在这方法里<code>同步</code>地设置状态将不会触发重渲染</li><li>注意：1 可以调用 <code>setState()</code> 方法来改变状态值</li><li>注意：2 无法获取页面中的 DOM 对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render()</h4><ul><li>作用：渲染组件到页面中，无法获取页面中的 DOM 对象</li><li>注意：<strong>不要在 render 方法中调用 <code>setState()</code> 方法，否则会递归渲染</strong><ul><li>原因说明：状态改变会重新调用<code>render()</code>，<code>render()</code>又重新改变状态</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">}</span><span class="token operator">&gt;</span>打豆豆一次<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">4</span>
    <span class="token operator">?</span> <span class="token keyword">null</span>
    <span class="token operator">:</span> <span class="token operator">&lt;</span>CounterChild initCount<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>CounterChild<span class="token operator">&gt;</span>
      <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="componentdidmount" tabindex="-1"><a class="header-anchor" href="#componentdidmount" aria-hidden="true">#</a> componentDidMount()</h4><ul><li>1 组件已经挂载到页面中</li><li>2 可以进行 DOM 操作，比如：获取到组件内部的 DOM 对象</li><li>3 可以<strong>发送请求</strong>获取数据</li><li>4 可以通过 <code>setState()</code> 修改状态的值</li><li>注意：在该方法里设置状态将会触发重渲</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此时，就可以获取到组件内部的DOM对象</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidMount&#39;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件生命周期-运行阶段-updating" tabindex="-1"><a class="header-anchor" href="#组件生命周期-运行阶段-updating" aria-hidden="true">#</a> 组件生命周期 - 运行阶段（Updating）</h3><ul><li>特点：该阶段的函数执行多次</li><li>说明：每当组件的<code>props</code>或者<code>state</code>改变的时候，都会触发运行阶段的函数</li></ul><h4 id="componentwillreceiveprops" tabindex="-1"><a class="header-anchor" href="#componentwillreceiveprops" aria-hidden="true">#</a> componentWillReceiveProps()</h4><ul><li>说明：组件接受到新的<code>props</code>前触发这个方法</li><li>参数：当前组件<code>props</code>值</li><li>可以通过 <code>this.props</code> 获取到上一次的值</li><li>使用：若你需要响应属性的改变，可以通过对比<code>this.props</code>和<code>nextProps</code>并在该方法中使用<code>this.setState()</code>处理状态改变</li><li>注意：修改<code>state</code>不会触发该方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;componentWillReceiveProps&#39;</span><span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="shouldcomponentupdate" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate" aria-hidden="true">#</a> shouldComponentUpdate()</h4><ul><li>作用：根据这个方法的返回值决定是否重新渲染组件，返回<code>true</code>重新渲染，否则不渲染</li><li>优势：通过某个条件渲染组件，降低组件渲染频率，提升组件性能</li><li>说明：如果返回值为<code>false</code>，那么，后续<code>render()</code>方法不会被调用</li><li>注意：<strong>这个方法必须返回布尔值！！！</strong></li><li>参数： <ul><li>第一个参数：最新属性对象</li><li>第二个参数：最新状态对象</li></ul></li><li>场景：根据随机数决定是否渲染组件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;shouldComponentUpdate&#39;</span><span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>

  <span class="token keyword">return</span> nextState<span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="componentwillupdate" tabindex="-1"><a class="header-anchor" href="#componentwillupdate" aria-hidden="true">#</a> componentWillUpdate()</h4><ul><li>作用：组件将要更新</li><li>参数：最新的属性和状态对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;componentWillUpdate&#39;</span><span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="render-渲染" tabindex="-1"><a class="header-anchor" href="#render-渲染" aria-hidden="true">#</a> render() 渲染</h4><ul><li>作用：重新渲染组件，与<code>Mounting</code>阶段的<code>render</code>是同一个函数</li><li>注意：这个函数能够执行多次，只要组件的属性或状态改变了，这个方法就会重新执行</li></ul><h4 id="componentdidupdate" tabindex="-1"><a class="header-anchor" href="#componentdidupdate" aria-hidden="true">#</a> componentDidUpdate()</h4><ul><li>作用：组件已经被更新</li><li>参数：旧的属性和状态对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidUpdate&#39;</span><span class="token punctuation">,</span> prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件生命周期-卸载阶段-unmounting" tabindex="-1"><a class="header-anchor" href="#组件生命周期-卸载阶段-unmounting" aria-hidden="true">#</a> 组件生命周期 - 卸载阶段（Unmounting）</h3><ul><li>组件销毁阶段：组件卸载期间，函数比较单一，只有一个函数，这个函数也有一个显著的特点：组件一辈子只能执行依次！</li><li>使用说明：只要组件不再被渲染到页面中，那么这个方法就会被调用（ 渲染到页面中 -&gt; 不再渲染到页面中 ）</li></ul><h4 id="componentwillunmount" tabindex="-1"><a class="header-anchor" href="#componentwillunmount" aria-hidden="true">#</a> componentWillUnmount()</h4><ul><li>作用：在卸载组件的时候，执行清理工作，比如 <ul><li>1 清除定时器</li><li>2 清除<code>componentDidMount</code>创建的 DOM 对象</li></ul></li></ul><hr><h2 id="react-createclass-知道" tabindex="-1"><a class="header-anchor" href="#react-createclass-知道" aria-hidden="true">#</a> React - createClass（知道）</h2><ul><li><strong><code>React.createClass({})</code> 方式，创建有状态组件，该方式已经被废弃！！！</strong></li><li>通过导入 <code>require(&#39;create-react-class&#39;)</code>，可以在不适用 ES6 的情况下，创建有状态组件</li><li>getDefaultProps() 和 getInitialState() 方法：是 <code>createReactClass()</code> 方式创建组件中的两个函数 <img src="https://reactjs.org/docs/react-without-es6.html#declaring-default-props" alt="React without ES6"><img src="https://doc.react-china.org/docs/react-without-es6.html" alt="React 不适用 ES6"></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> createReactClass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;create-react-class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Greeting <span class="token operator">=</span> <span class="token function">createReactClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 初始化 props</span>
  <span class="token function-variable function">getDefaultProps</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;getDefaultProps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Basic counter!!!&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 初始化 state</span>
  <span class="token function-variable function">getInitialState</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;getInitialState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;render&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;+&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleIncrement<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">handleIncrement</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> newCount <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">propTypes</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Greeting<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="state-和-setstate" tabindex="-1"><a class="header-anchor" href="#state-和-setstate" aria-hidden="true">#</a> state 和 setState</h2><ul><li>注意：使用 <code>setState()</code> 方法修改状态，状态改变后，React 会重新渲染组件</li><li>注意：不要直接修改 state 属性的值，这样不会重新渲染组件！！！</li><li>使用：1 初始化 state 2 setState 修改 state</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改state（不推荐使用）</span>
<span class="token comment">// https://facebook.github.io/react/docs/state-and-lifecycle.html#do-not-modify-state-directly</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">&#39;这样方式，不会重新渲染组件&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>

  <span class="token comment">// 正确姿势！！！</span>
  <span class="token comment">// -------------- 初始化 state --------------</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> props<span class="token punctuation">.</span>initCount
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// -------------- 修改 state 的值 --------------</span>
  <span class="token comment">// 方式一：</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 由于 setState() 是异步操作，所以，如果想立即获取修改后的state</span>
    <span class="token comment">// 需要在回调函数中获取</span>
    <span class="token comment">// https://doc.react-china.org/docs/react-component.html#setstate</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 方式二：</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prevState<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> prevState<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 或者 - 注意： =&gt; 后面需要带有小括号，因为返回的是一个对象</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevState<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">counter</span><span class="token operator">:</span> prevState<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件绑定事件" tabindex="-1"><a class="header-anchor" href="#组件绑定事件" aria-hidden="true">#</a> 组件绑定事件</h2>`,143),u=n("li",null,[s("1 通过 React 事件机制 "),n("code",null,"onClick"),s(" 绑定")],-1),d=n("code",null,"ref",-1),k=n("li",null,[s("注意："),n("code",null,"ref"),s(" 是 React 提供的一个特殊属性")],-1),v=n("code",null,"ref",-1),m={href:"https://discountry.github.io/react/docs/refs-and-the-dom.html",target:"_blank",rel:"noopener noreferrer"},b=a(`<h3 id="react-中的事件机制-推荐" tabindex="-1"><a class="header-anchor" href="#react-中的事件机制-推荐" aria-hidden="true">#</a> React 中的事件机制 - 推荐</h3><ul><li>注意：事件名称采用驼峰命名法</li><li>例如：<code>onClick</code> 用来绑定单击事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;触发单击事件&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleCountAdd<span class="token punctuation">}</span> onMouseEnter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseEnter<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="js-原生方式-知道即可" tabindex="-1"><a class="header-anchor" href="#js-原生方式-知道即可" aria-hidden="true">#</a> JS 原生方式 - 知道即可</h3><ul><li>说明：给元素添加 <code>ref</code> 属性，然后，获取元素绑定事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSX</span>
<span class="token comment">// 将当前DOM的引用赋值给 this.txtInput 属性</span>
<span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token parameter">input</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtInput <span class="token operator">=</span> input <span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;我是豆豆&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过 this.txtInput 属性获取元素绑定事件</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>txtInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件绑定中的-this" tabindex="-1"><a class="header-anchor" href="#事件绑定中的-this" aria-hidden="true">#</a> 事件绑定中的 this</h2><ul><li>1 通过 <code>bind</code> 绑定</li><li>2 通过 <code>箭头函数</code> 绑定</li></ul><h3 id="通过-bind-绑定" tabindex="-1"><a class="header-anchor" href="#通过-bind-绑定" aria-hidden="true">#</a> 通过 bind 绑定</h3><ul><li>原理：<code>bind</code>能够调用函数，改变函数内部 this 的指向，并返回一个新函数</li><li>说明：<code>bind</code>第一个参数为返回函数中 this 的指向，后面的参数为传给返回函数的参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 自定义方法：</span>
<span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;点击事件修改state的值&#39;</span> <span class="token operator">+</span> arg1 <span class="token operator">+</span> arg2
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token comment">// 无参数</span>
    <span class="token comment">// this.handleBtnClick.bind(this)</span>

    <span class="token comment">// 有参数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleBtnClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token operator">&gt;</span>事件中<span class="token keyword">this</span>的处理<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在构造函数中使用<code>bind</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleBtnClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// render() 方法中：</span>
<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick <span class="token punctuation">}</span><span class="token operator">&gt;</span>事件中<span class="token keyword">this</span>的处理<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过箭头函数绑定" tabindex="-1"><a class="header-anchor" href="#通过箭头函数绑定" aria-hidden="true">#</a> 通过箭头函数绑定</h3><ul><li>原理：<code>箭头函数</code>中的 this 由所处的环境决定，自身不绑定 this</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;在构造函数中绑定this并传参&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token string">&#39;参数1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;参数2&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;在构造函数中绑定this并传参&#39;</span> <span class="token operator">+</span> arg1 <span class="token operator">+</span> arg2
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="受控组件" tabindex="-1"><a class="header-anchor" href="#受控组件" aria-hidden="true">#</a> 受控组件</h2><p><img src="https://doc.react-china.org/docs/forms.html" alt="表单和受控组件"><img src="https://doc.react-china.org/docs/uncontrolled-components.html" alt="非受控组件"></p><blockquote><p>在 HTML 当中，像<code>input</code>,<code>textarea</code>和<code>select</code>这类表单元素会维持自身状态，并根据用户输入进行更新。 在 React 中，可变的状态通常保存在组件的<code>state</code>中，并且只能用 <code>setState()</code> 方法进行更新.<br> React 根据初始状态渲染表单组件，接受用户后续输入，改变表单组件内部的状态。 因此，将那些值由 React 控制的表单元素称为：受控组件。</p></blockquote><ul><li><p>受控组件的特点：</p><ul><li>1 表单元素</li><li>2 由 React 通过 JSX 渲染出来</li><li>3 由 React 控制值的改变，也就是说想要改变元素的值，只能通过 React 提供的方法来修改</li></ul></li><li><p>注意：<strong>只能通过 setState 来设置受控组件的值</strong></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模拟实现文本框数据的双向绑定</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleTextChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 当文本框内容改变的时候，触发这个事件，重新给state赋值</span>
<span class="token function-variable function">handleTextChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="评论列表案例-1" tabindex="-1"><a class="header-anchor" href="#评论列表案例-1" aria-hidden="true">#</a> 评论列表案例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;沙发！！！&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;小明，居然是你&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;小明，放学你别走！！！&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="props-校验" tabindex="-1"><a class="header-anchor" href="#props-校验" aria-hidden="true">#</a> props 校验</h2><ul><li>作用：通过类型检查，提高程序的稳定性</li><li>命令：<code>npm i -S prop-types</code><img src="https://doc.react-china.org/docs/typechecking-with-proptypes.html" alt="类型校验文档"></li><li>使用：给类提供一个静态属性 <code>propTypes</code>（对象），来约束<code>props</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入模块</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span>

<span class="token comment">// ...以下代码是类的静态属性：</span>
<span class="token comment">// propTypes 静态属性的名称是固定的！！！</span>
<span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">initCount</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span> <span class="token comment">// 规定属性的类型</span>
  <span class="token literal-property property">initAge</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired <span class="token comment">// 规定属性的类型，且规定为必传字段</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-单向数据流" tabindex="-1"><a class="header-anchor" href="#react-单向数据流" aria-hidden="true">#</a> React 单向数据流</h2><ul><li><strong>React 中采用单项数据流</strong></li><li>数据流动方向：自上而下，也就是只能由父组件传递到子组件</li><li>数据都是由父组件提供的，子组件想要使用数据，都是从父组件中获取的</li><li>如果多个组件都要使用某个数据，最好将这部分共享的状态提升至他们最近的父组件当中进行管理 <img src="https://discountry.github.io/react/docs/state-and-lifecycle.html" alt="单向数据流"><img src="https://discountry.github.io/react/docs/lifting-state-up.html" alt="状态提升"></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>react中的单向数据流动： 1 数据应该是从上往下流动的，也就是由父组件将数据传递给子组件 2
数据应该是由父组件提供，子组件要使用数据的时候，直接从子组件中获取
在我们的评论列表案例中：数据是由CommentList组件（父组件）提供的 子组件 CommentItem 负责渲染评论列表，数据是由
父组件提供的 子组件 CommentForm
负责获取用户输入的评论内容，最终也是把用户名和评论内容传递给了父组件，由父组件负责处理这些数据（ 把数据交给 CommentItem
由这个组件负责渲染 ）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件通讯" tabindex="-1"><a class="header-anchor" href="#组件通讯" aria-hidden="true">#</a> 组件通讯</h3><ul><li><p>父 -&gt; 子：<code>props</code></p></li><li><p>子 -&gt; 父：父组件通过 props 传递回调函数给子组件，子组件调用函数将数据作为参数传递给父组件</p></li><li><p>兄弟组件：因为 React 是单向数据流，因此需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的 props</p></li><li><p>React 中的状态管理： flux（提出状态管理的思想） -&gt; Redux -&gt; mobx</p></li><li><p>Vue 中的状态管理： Vuex</p></li><li><p>简单来说，就是统一管理了项目中所有的数据，让数据变的可控</p></li></ul><figure><img src="https://segmentfault.com/a/1190000006831820" alt="组件通讯" tabindex="0"><figcaption>组件通讯</figcaption></figure><h3 id="context-特性" tabindex="-1"><a class="header-anchor" href="#context-特性" aria-hidden="true">#</a> Context 特性</h3><ul><li>注意：<strong>如果不熟悉 React 中的数据流，不推荐使用这个属性</strong><ul><li>这是一个实验性的 API，在未来的 React 版本中可能会被更改</li></ul></li><li>作用：跨级传递数据（爷爷给孙子传递数据），避免向下每层手动地传递<code>props</code></li><li>说明：需要配合<code>PropTypes</code>类型限制来使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Grandfather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类型限制（必须），静态属性名称固定</span>
  <span class="token keyword">static</span> childContextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 传递给孙子组件的数据</span>
  <span class="token function">getChildContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Father<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Father<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类型限制，静态属性名字固定</span>
  <span class="token keyword">static</span> contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment">// 从上下文对象中获取爷爷组件传递过来的数据</span>
      <span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>color <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>爷爷告诉文字是红色的<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Child<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="react-豆瓣电影案例" tabindex="-1"><a class="header-anchor" href="#react-豆瓣电影案例" aria-hidden="true">#</a> react - 豆瓣电影案例</h1><h2 id="项目中使用的技术点" tabindex="-1"><a class="header-anchor" href="#项目中使用的技术点" aria-hidden="true">#</a> 项目中使用的技术点</h2><ul><li>1 <code>ant-design</code> 组件库</li><li>2 <code>react-router-dom</code> 路由</li><li>3 <code>fetch</code> API，配合<code>Promise规范</code></li><li>4 跨域获取数据</li></ul><h2 id="ant-design-ui-组件库" tabindex="-1"><a class="header-anchor" href="#ant-design-ui-组件库" aria-hidden="true">#</a> ant-design - UI 组件库</h2><figure><img src="https://ant.design/index-cn" alt="antd" tabindex="0"><figcaption>antd</figcaption></figure><ul><li>说明：借助 Ant Design 组件库快速搭建页面</li><li>安装：<code>npm i -S antd</code></li></ul><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><ul><li>注意：该步骤中只引入了一个组件，但却引入了整个 ant 包和 css 样式</li><li>推荐：按需加载，即用到哪个组件就只把该组件的样式导入</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 基础：导入 react 和 react-dom</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 导入 antd 组件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DatePicker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;antd&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 导入 样式</span>
<span class="token keyword">import</span> <span class="token string">&#39;antd/dist/antd.css&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 使用 日期选择 组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DatePicker <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按需加载-推荐使用方式" tabindex="-1"><a class="header-anchor" href="#按需加载-推荐使用方式" aria-hidden="true">#</a> 按需加载 - 推荐使用方式</h3><ul><li>1 安装：<code>npm i -D babel-plugin-import</code></li><li>2 配置<code>.babelrc</code></li><li>说明：只需要导入我们使用的组件即可，不需要再单独的导入样式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>

<span class="token comment">// 1. 导入 antd 组件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DatePicker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;antd&#39;</span>

<span class="token comment">// 2. 使用 日期选择 组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DatePicker <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// ---</span>

<span class="token comment">// .babelrc 配置如下：</span>
<span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span> <span class="token string">&quot;import&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;libraryName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;css&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-router" tabindex="-1"><a class="header-anchor" href="#react-router" aria-hidden="true">#</a> react-router</h2><p><img src="https://reacttraining.com/react-router/" alt="react router 官网"><img src="https://github.com/ReactTraining/react-router" alt="react router github"></p><ul><li>安装：<code>npm i -S react-router-dom</code></li></ul><h3 id="基本概念说明" tabindex="-1"><a class="header-anchor" href="#基本概念说明" aria-hidden="true">#</a> 基本概念说明</h3><ul><li><code>Router</code>组件本身只是一个容器，真正的路由要通过<code>Route组件</code>定义</li></ul><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><ul><li>1 导入路由组件</li><li>2 使用 <code>&lt;Router&gt;&lt;/Router&gt;</code> 作为根容器，包裹整个应用（JSX） <ul><li>在整个应用程序中，只需要使用一次</li></ul></li><li>3 使用 <code>&lt;Link to=&quot;/movie&quot;&gt;&lt;/Link&gt;</code> 作为链接地址，并指定<code>to</code>属性</li><li>4 使用 <code>&lt;Route path=&quot;/&quot; compoent={Movie}&gt;&lt;/Route&gt;</code> 展示路由内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1 导入组件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 2 使用 &lt;Router&gt;</span>
<span class="token operator">&lt;</span>Router<span class="token operator">&gt;</span>
  <span class="token comment">// 3 设置 Link</span>
  <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token operator">&gt;</span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/movie&quot;</span><span class="token operator">&gt;</span>电影<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token string">&quot;3&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">&gt;</span>
  <span class="token comment">// 4 设置 Route // exact 表示：绝对匹配（完全匹配，只匹配：/）</span>
  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>HomeContainer<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/movie&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>MovieContainer<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AboutContainer<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h3><ul><li><code>&lt;Router&gt;&lt;/Router&gt;</code>：作为整个组件的根元素，是路由容器，只能有一个唯一的子元素</li><li><code>&lt;Link&gt;&lt;/Link&gt;</code>：类似于 vue 中的<code>&lt;router-link&gt;&lt;/router-link&gt;</code>标签，<code>to</code> 属性指定路由地址</li><li><code>&lt;Route&gt;&lt;/Route&gt;</code>：类似于 vue 中的<code>&lt;router-view&gt;&lt;/router-view&gt;</code>，指定路由内容（组件）展示位置</li></ul><h3 id="路由参数" tabindex="-1"><a class="header-anchor" href="#路由参数" aria-hidden="true">#</a> 路由参数</h3><ul><li>配置：通过<code>Route</code>中的 path 属性来配置路由参数</li><li>获取：<code>this.props.match.params</code> 获取</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 配置路由参数</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/movie/:movieType&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 获取路由参数</span>
<span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>movieType<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由跳转" tabindex="-1"><a class="header-anchor" href="#路由跳转" aria-hidden="true">#</a> 路由跳转</h3><figure><img src="https://reacttraining.com/react-router/web/api/history" alt="react router - history" tabindex="0"><figcaption>react router - history</figcaption></figure><ul><li><code>history.push()</code> 方法用于在 JS 中实现页面跳转</li><li><code>history.go(-1)</code> 用来实现页面的前进（1）和后退(-1)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/movie/movieDetail/&#39;</span> <span class="token operator">+</span> movieId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> fetch</h2><ul><li>作用：Fetch 是一个现代的概念, 等同于 XMLHttpRequest。它提供了许多与 XMLHttpRequest 相同的功能，但被设计成更具可扩展性和高效性。</li><li><code>fetch()</code> 方法返回一个<code>Promise</code>对象</li></ul><h3 id="fetch-基本使用" tabindex="-1"><a class="header-anchor" href="#fetch-基本使用" aria-hidden="true">#</a> fetch 基本使用</h3><p><img src="https://developer.mozilla.org/zh-CN/docs/Web/API/Response" alt="fetch Response"><img src="http://www.jianshu.com/p/ccf99a12faf1" alt="fetch 介绍"><img src="http://www.jianshu.com/p/063f7e490e9a" alt="Javascript 中的神器——Promise"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
  通过fetch请求回来的数据，是一个Promise对象.
  调用then()方法，通过参数response，获取到响应对象
  调用 response.json() 方法，解析服务器响应数据
  再次调用then()方法，通过参数data，就获取到数据了
*/</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/movie/&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>movieType<span class="token punctuation">)</span>
  <span class="token comment">// response.json() 读取response对象，并返回一个被解析为JSON格式的promise对象</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 通过 data 获取到数据</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">movieList</span><span class="token operator">:</span> data<span class="token punctuation">.</span>subjects<span class="token punctuation">,</span>
      <span class="token literal-property property">loaing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跨域获取数据的三种常用方式" tabindex="-1"><a class="header-anchor" href="#跨域获取数据的三种常用方式" aria-hidden="true">#</a> 跨域获取数据的三种常用方式</h2><ul><li>1 JSONP</li><li>2 代理</li><li>3 CORS</li></ul><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><ul><li>安装：<code>npm i -S fetch-jsonp</code></li><li>利用<code>JSONP</code>实现跨域获取数据，只能获取 GET 请求</li><li><code>fetch-jsonp</code><img src="https://github.com/camsong/fetch-jsonp" alt="fetch-jsonp"></li><li>限制：1 只能发送 GET 请求 2 需要服务端支持 JSONP 请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* movielist.js */</span>
<span class="token function">fetchJsonp</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.douban.com/v2/movie/in_theaters&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rep</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> rep<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><ul><li><code>webpack-dev-server</code> 代理配置如下：</li><li>问题：webpack-dev-server 是开发期间使用的工具，项目上线了就不再使用 webpack-dev-server</li><li>解决：项目上线后的代码，也是会部署到一个服务器中，这个服务器配置了代理功能即可（要求两个服务器中配置的代理规则相同）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack-dev-server的配置</span>
<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// https://webpack.js.org/configuration/dev-server/#devserver-proxy</span>
  <span class="token comment">// https://github.com/chimurai/http-proxy-middleware#http-proxy-options</span>
  <span class="token comment">// http://www.jianshu.com/p/3bdff821f859</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用：/api/movie/in_theaters</span>
    <span class="token comment">// 访问 ‘/api/movie/in_theaters’ ==&gt; &#39;https://api.douban.com/v2/movie/in_theaters&#39;</span>
    <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 代理的目标服务器地址</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;https://api.douban.com/v2&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// https请求需要该设置</span>
      <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token comment">// 必须设置该项</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// &#39;/api/movie/in_theaters&#39; 路径重写为：&#39;/movie/in_theaters&#39;</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;^/api&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* movielist.js */</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/movie/in_theaters&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将服务器返回的数据转化为 json 格式</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">rep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取上面格式化后的数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cors-服务器端配合" tabindex="-1"><a class="header-anchor" href="#cors-服务器端配合" aria-hidden="true">#</a> CORS - 服务器端配合</h3><ul><li>示例：NodeJS 设置跨域 <img src="http://www.ruanyifeng.com/blog/2016/04/cors.html" alt="跨域资源共享 CORS 详解 - 阮一峰"></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过Express的中间件来处理所有请求</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置请求头为允许跨域</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置服务器支持的所有头信息字段</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Content-Type,Content-Length, Authorization,Accept,X-Requested-With&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置服务器支持的所有跨域请求的方法</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST,GET&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// next()方法表示进入下一个路由</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关文章-1" tabindex="-1"><a class="header-anchor" href="#相关文章-1" aria-hidden="true">#</a> 相关文章</h2><h3 id="api-地址" tabindex="-1"><a class="header-anchor" href="#api-地址" aria-hidden="true">#</a> API 地址</h3><ul><li>豆瓣 API 接口公共前缀：https://api.douban.com/v2/</li><li>/v2/movie/in_theaters</li><li>/v2/movie/coming_soon</li><li>/v2/movie/top250</li><li>思路：通过 props 获取到电影类型（接口），与默认的前缀拼接成完整的 API 接口地址</li></ul><p><img src="https://developers.douban.com/wiki/?title=api_v2" alt="豆瓣电影 API 地址"><img src="https://api.douban.com/v2/movie/in_theaters" alt="正在热映 - in_theaters"><img src="https://api.douban.com/v2/movie/coming_soon" alt="即将上映 - coming_soon"><img src="https://api.douban.com/v2/movie/top250" alt="top250 - top250"><img src="https://api.douban.com/v2/movie/subject/26309788" alt="电影详细信息 - subject"></p><p><img src="https://github.com/request/request" alt="Request - Simplified HTTP client"><img src="http://www.w3school.com.cn/cssref/pr_transform.asp" alt="CSS3 transform 属性"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>分页功能分析： 已知条件：1 每一页有6条数据 2 当前页是第几页 接口分页需要的数据：1 start（起始索引号） 2
count（每页有多少条数据 6） 因此，想要实现分页效果需要根据 每页大小 和 页码，计算出start即可。 第一页：0 1 2 3 4 5
第二页：6 7 8 9 10 11 第三页：12 13 14 15 16 17 start = (page - 1) * count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,86);function g(h,y){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[u,n("li",null,[s("2 JS 原生方式绑定（通过 "),d,s(" 获取元素） "),n("ul",null,[k,n("li",null,[v,s("的使用说明："),n("a",m,[s("react ref"),l(t)])])])])]),b])}const x=e(i,[["render",g],["__file","React.html.vue"]]);export{x as default};
