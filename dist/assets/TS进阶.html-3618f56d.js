const e=JSON.parse(`{"key":"v-2ce8218c","path":"/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/TypeScript/TS%E8%BF%9B%E9%98%B6.html","title":"TS进阶","lang":"zh-CN","frontmatter":{"title":"TS进阶","icon":"typescript","category":"前端开发 - 前端进阶 - TypeScript","order":3,"description":"类型收窄 类型收窄 Generics 泛型 泛型Generics是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 简单的例子 首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值：","head":[["meta",{"property":"og:url","content":"http://magicbegin.gitee.io/vuepress-blog/vuepress-blog/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/TypeScript/TS%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"TS进阶"}],["meta",{"property":"og:description","content":"类型收窄 类型收窄 Generics 泛型 泛型Generics是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 简单的例子 首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T11:35:00.000Z"}],["meta",{"property":"article:author","content":"Mr Chen"}],["meta",{"property":"article:modified_time","content":"2023-10-27T11:35:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TS进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-27T11:35:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr Chen\\",\\"url\\":\\"https://gitee.com/magicBegin/vuepress-blog\\",\\"email\\":\\"599422271@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"类型收窄","slug":"类型收窄","link":"#类型收窄","children":[]},{"level":2,"title":"Generics 泛型","slug":"generics-泛型","link":"#generics-泛型","children":[{"level":3,"title":"简单的例子","slug":"简单的例子","link":"#简单的例子","children":[]},{"level":3,"title":"多个类型参","slug":"多个类型参","link":"#多个类型参","children":[]},{"level":3,"title":"泛型约束","slug":"泛型约束","link":"#泛型约束","children":[]},{"level":3,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":3,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":3,"title":"泛型参数的默认类型","slug":"泛型参数的默认类型","link":"#泛型参数的默认类型","children":[]}]},{"level":2,"title":"类型别名","slug":"类型别名","link":"#类型别名","children":[{"level":3,"title":"类型别名与接口的区别","slug":"类型别名与接口的区别","link":"#类型别名与接口的区别","children":[]}]},{"level":2,"title":"重载","slug":"重载","link":"#重载","children":[{"level":3,"title":"函数重载","slug":"函数重载","link":"#函数重载","children":[]},{"level":3,"title":"方法重载","slug":"方法重载","link":"#方法重载","children":[]},{"level":3,"title":"构造器重载","slug":"构造器重载","link":"#构造器重载","children":[]}]},{"level":2,"title":"构造签名","slug":"构造签名","link":"#构造签名","children":[]},{"level":2,"title":"索引签名","slug":"索引签名","link":"#索引签名","children":[{"level":3,"title":"字符串索引签名:用于约束对象","slug":"字符串索引签名-用于约束对象","link":"#字符串索引签名-用于约束对象","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"常量断言","slug":"常量断言","link":"#常量断言","children":[]},{"level":2,"title":"keyof 操作符","slug":"keyof-操作符","link":"#keyof-操作符","children":[]},{"level":2,"title":"类型映射","slug":"类型映射","link":"#类型映射","children":[]},{"level":2,"title":"映射修饰符","slug":"映射修饰符","link":"#映射修饰符","children":[]},{"level":2,"title":"类","slug":"类","link":"#类","children":[{"level":3,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[]},{"level":3,"title":"Access Modifiers 访问修饰符","slug":"access-modifiers-访问修饰符","link":"#access-modifiers-访问修饰符","children":[]},{"level":3,"title":"readonly","slug":"readonly","link":"#readonly","children":[]},{"level":3,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":3,"title":"类实现接口","slug":"类实现接口","link":"#类实现接口","children":[]}]}],"git":{"createdTime":1698406500000,"updatedTime":1698406500000,"contributors":[{"name":"chenzhen","email":"599422271@qq.com","commits":1}]},"readingTime":{"minutes":15.28,"words":4583},"filePathRelative":"前端开发/前端进阶/TypeScript/TS进阶.md","localizedDate":"2023年10月27日","excerpt":"<h2> 类型收窄</h2>\\n<p><a href=\\"https://yayujs.com/handbook/Narrowing.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">类型收窄</a></p>\\n<h2> Generics 泛型</h2>\\n<p>泛型<code>Generics</code>是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>\\n<h3> 简单的例子</h3>\\n<p>首先，我们来实现一个函数 <code>createArray</code>，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值：</p>","autoDesc":true}`);export{e as data};
