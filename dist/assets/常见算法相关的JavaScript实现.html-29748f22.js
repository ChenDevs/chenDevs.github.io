const e=JSON.parse(`{"key":"v-5e40b5d5","path":"/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3%E7%9A%84JavaScript%E5%AE%9E%E7%8E%B0.html","title":"常见算法相关的JavaScript实现","lang":"zh-CN","frontmatter":{"title":"常见算法相关的JavaScript实现","tag":["算法"],"date":"2022-02-26T00:00:00.000Z","category":["基础知识"],"description":"常见算法相关的 JavaScript 实现 位运算相关 计算汉明重量 function hammingWeight(n) { let num = 0; while (n !== 0) { n &amp;= n - 1; num++; } return num; }","head":[["meta",{"property":"og:url","content":"http://magicbegin.gitee.io/vuepress-blog/vuepress-blog/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3%E7%9A%84JavaScript%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"常见算法相关的JavaScript实现"}],["meta",{"property":"og:description","content":"常见算法相关的 JavaScript 实现 位运算相关 计算汉明重量 function hammingWeight(n) { let num = 0; while (n !== 0) { n &amp;= n - 1; num++; } return num; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-28T03:27:44.000Z"}],["meta",{"property":"article:author","content":"Mr Chen"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2022-02-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-28T03:27:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见算法相关的JavaScript实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-28T03:27:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr Chen\\",\\"url\\":\\"https://gitee.com/magicBegin/vuepress-blog\\",\\"email\\":\\"599422271@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"常见算法相关的 JavaScript 实现","slug":"常见算法相关的-javascript-实现","link":"#常见算法相关的-javascript-实现","children":[]},{"level":2,"title":"位运算相关","slug":"位运算相关","link":"#位运算相关","children":[{"level":3,"title":"计算汉明重量","slug":"计算汉明重量","link":"#计算汉明重量","children":[]},{"level":3,"title":"判断奇偶","slug":"判断奇偶","link":"#判断奇偶","children":[]}]},{"level":2,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[{"level":3,"title":"非递归方法","slug":"非递归方法","link":"#非递归方法","children":[]},{"level":3,"title":"递归方法","slug":"递归方法","link":"#递归方法","children":[]}]},{"level":2,"title":"常见排序","slug":"常见排序","link":"#常见排序","children":[{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]}]},{"level":2,"title":"二叉树遍历相关","slug":"二叉树遍历相关","link":"#二叉树遍历相关","children":[{"level":3,"title":"先序遍历（中->左->右）","slug":"先序遍历-中-左-右","link":"#先序遍历-中-左-右","children":[]},{"level":3,"title":"中序遍历（左->中->右）","slug":"中序遍历-左-中-右","link":"#中序遍历-左-中-右","children":[]},{"level":3,"title":"后序遍历（左->右->中）","slug":"后序遍历-左-右-中","link":"#后序遍历-左-右-中","children":[]},{"level":3,"title":"层次遍历","slug":"层次遍历","link":"#层次遍历","children":[]}]}],"git":{"createdTime":1698406500000,"updatedTime":1698463664000,"contributors":[{"name":"chenzhen","email":"599422271@qq.com","commits":2}]},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"基础知识/算法/常见算法相关的JavaScript实现.md","localizedDate":"2022年2月26日","excerpt":"<h2> 常见算法相关的 JavaScript 实现</h2>\\n<h2> 位运算相关</h2>\\n<h3> 计算汉明重量</h3>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">hammingWeight</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">n</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> num <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">!==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    n <span class=\\"token operator\\">&amp;=</span> n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\n    num<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">return</span> num<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
