import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-98dc3ef1.js";const e={},p=t(`<h4 id="前端五大模块" tabindex="-1"><a class="header-anchor" href="#前端五大模块" aria-hidden="true">#</a> 前端五大模块</h4><ul><li>h5CSS3</li><li>ajax</li><li>原生 js</li><li>流行框架(vue，rect，augular 等)</li><li>git/svn</li></ul><h4 id="_1-字符串拼串的时候记得两边有空格" tabindex="-1"><a class="header-anchor" href="#_1-字符串拼串的时候记得两边有空格" aria-hidden="true">#</a> 1.字符串拼串的时候记得两边有空格</h4><pre><code>uls[i].style.transition=&quot; all 1s &quot;+i*0.1+&quot;s&quot;;
</code></pre><h4 id="_2-decodeuri-对地址栏参数进行解码" tabindex="-1"><a class="header-anchor" href="#_2-decodeuri-对地址栏参数进行解码" aria-hidden="true">#</a> 2.decodeUrI()对地址栏参数进行解码</h4><h4 id="_3-数组的内置方法" tabindex="-1"><a class="header-anchor" href="#_3-数组的内置方法" aria-hidden="true">#</a> 3.数组的内置方法</h4><ul><li>slice（begin，end）从 begin 开始，到 end 结束，不包含 end，截取数组的一部分，放到一个新数组中返回，原数组不变</li><li>splice 最牛逼的方法，拼接 可以在任意位置增加元素或删除元素，获取替换元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">//第一个参数：起始位置</span>
    <span class="token comment">//第二个参数:删除的个数</span>
    <span class="token comment">//第三个参数：替换的元素</span>
    <span class="token keyword">var</span> myFish<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;angle&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;clown&quot;</span>，<span class="token string">&quot;mandarin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;STURGEON&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    myFish<span class="token punctuation">.</span>splice（<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span>）；

    <span class="token comment">//增加元素</span>
    myFish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span>，<span class="token number">0</span>，<span class="token string">&quot;刘备&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-数组-内置方法" tabindex="-1"><a class="header-anchor" href="#_4-数组-内置方法" aria-hidden="true">#</a> 4.数组 内置方法</h4><p>● 数组常用方法</p><ul><li><h5 id="数组转换字符串" tabindex="-1"><a class="header-anchor" href="#数组转换字符串" aria-hidden="true">#</a> 数组转换字符串</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//语法：array.join() //作用：将数组的值拼接成字符串</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//不传参数，默认按【,】进行拼接</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token comment">//参数是字符串类型 按【-】进行拼接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="数组的增删操作" tabindex="-1"><a class="header-anchor" href="#数组的增删操作" aria-hidden="true">#</a> 数组的增删操作</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">[</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将一个或多个元素添加到数组的结尾，并返回新的长度。</span>

      array<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数组中删除最后一个元素，并返回该元素的值,改变了数组的长度</span>

      array<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token punctuation">[</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将一个或多个元素添加到数组的开头，并返回新的长度。</span>

      array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数组中删除第一个元素，并返回该元素的值,改变了数组的长度</span>
      <span class="token comment">//练习1</span>
      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;曹操&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">//添加数据后变成：[&quot;司马懿&quot;,&quot;曹丕&quot;,&quot;杨修&quot;,&quot;曹植&quot;,&quot;曹操&quot;]</span>
      <span class="token comment">//删除数据后变成：[&quot;司马懿&quot;,&quot;曹丕&quot;]</span>
      <span class="token comment">//练习2</span>
      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;司马懿&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;曹丕&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;杨修&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;曹植&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;曹操&quot;</span><span class="token punctuation">]</span>
      <span class="token comment">//把数组的最后一个元素变成数组的第0个元素</span>
      <span class="token comment">//把数组的第0个元素变成数组的最后一个元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="数组的翻转与排序" tabindex="-1"><a class="header-anchor" href="#数组的翻转与排序" aria-hidden="true">#</a> 数组的翻转与排序</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//翻转数组,返回翻转过的数组</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//默认排序顺序是根据字符串Unicode码点。</span>
<span class="token comment">//如果是数字,10 小于 2 ,比较第一位</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//[1, 10, 2, 3, 4, 40, 5]</span>

<span class="token comment">//sort方法可以传递一个函数作为参数，这个参数用来控制数组如何进行排序</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;ba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>
<span class="token comment">//arr = [1,2,10,4,40,5];</span>

arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token comment">//按照正序</span>
  <span class="token comment">//return b-a //按照倒序</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">/*注意:
    如果 compareFunction(a, b) a-b 小于 0 ，那么 a 会被排列到 b 之前；
    如果 compareFunction(a, b) a-b 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且   也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本;
    如果 compareFunction(a, b) a-b 大于 0 ， b 会被排列到 a 之前。
       
    */</span>

<span class="token comment">//练习：</span>
<span class="token comment">//将[3, 6, 1, 5, 10, 2,11]从小到大排列</span>
<span class="token comment">//将字符串数组按照字符长度从小到大排列</span>
<span class="token comment">//将学生数组按照年龄从小到大排列(如何将对象排序)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="数组的拼接与截取" tabindex="-1"><a class="header-anchor" href="#数组的拼接与截取" aria-hidden="true">#</a> 数组的拼接与截取</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token comment">//concat：数组合并，不会影响原来的数组，会返回一个新数组。</span>
      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
      <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>
      <span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];</span>

      <span class="token comment">//slice:复制数组的一部分到一个新数组，并返回这个新数组</span>
      <span class="token comment">//原来的数组不受影响，包含头，不包含尾</span>
      <span class="token keyword">var</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//[1,2,3]</span>
      <span class="token comment">//arr.slice(-3,-1) //[3,4]</span>

      <span class="token comment">//splice: 以新元素来替换旧元素，以此来修改数组的内容，返回被替换的内容,原数组被改变</span>
      <span class="token comment">//start:开始位置  deleteCount:删除的个数  items:替换的内容</span>
      array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> <span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token punctuation">,</span>items<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
      <span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token comment">//[1, 2, 3]</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 4, 5]</span>

   <span class="token comment">//练习：</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//从数组中截取一个新的数组[6,7,8,3],返回新的数组</span>
    <span class="token comment">//删除[6,7,8,3]并替换成[1,1,1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="数组查找元素" tabindex="-1"><a class="header-anchor" href="#数组查找元素" aria-hidden="true">#</a> 数组查找元素</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//indexOf方法用来查找数组中某个元素第一次出现的位置，如果找不到，返回-1</span>
array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>search<span class="token punctuation">,</span> <span class="token punctuation">[</span>fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//lastIndexOf()从后面开始查找数组中元素出现位置,如果找不到，返回-1</span>
array<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>search<span class="token punctuation">,</span> <span class="token punctuation">[</span>fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="操作数组里的元素" tabindex="-1"><a class="header-anchor" href="#操作数组里的元素" aria-hidden="true">#</a> 操作数组里的元素</h5><pre><code>var arr = [12,34,56,89,78,23,45,19];
</code></pre><ul><li><h5 id="_1-filter-方法返回一个由符合函数要求的元素组成的新数组调用数组的-filter-方法-添加过滤方法-符合规则的元素会被存放到新数组里" tabindex="-1"><a class="header-anchor" href="#_1-filter-方法返回一个由符合函数要求的元素组成的新数组调用数组的-filter-方法-添加过滤方法-符合规则的元素会被存放到新数组里" aria-hidden="true">#</a> 1.filter 方法返回一个由符合函数要求的元素组成的新数组调用数组的 filter 方法，添加过滤方法，符合规则的元素会被存放到新数组里</h5><ul><li>element:表示数组里的元素;</li><li>index:表示索引值;</li><li>array:表示传入的数组</li></ul></li></ul><h5 id="filter-方法的数组" tabindex="-1"><a class="header-anchor" href="#filter-方法的数组" aria-hidden="true">#</a> filter 方法的数组:</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> element <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token comment">//返回true表示保留该元素（通过测试），false则不保留。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//filter方法不会改变原数组里的数据[12,34,56,89,78,23,45,19];</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">//新数组里保存符合要求的元素[34, 56, 89, 78, 45]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="_2-map-方法让数组中的每个元素都调用一次提供的函数-将调用的后的结果存放到一个新数组里并返回。" tabindex="-1"><a class="header-anchor" href="#_2-map-方法让数组中的每个元素都调用一次提供的函数-将调用的后的结果存放到一个新数组里并返回。" aria-hidden="true">#</a> 2.map 方法让数组中的每个元素都调用一次提供的函数，将调用的后的结果存放到一个新数组里并返回。</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment">//在数组里的每一个元素的最后面都添加一个字符串&quot;0&quot;</span>
      		<span class="token keyword">return</span> element <span class="token operator">+</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[&quot;120&quot;, &quot;340&quot;, &quot;560&quot;, &quot;890&quot;, &quot;780&quot;, &quot;230&quot;, &quot;450&quot;, &quot;190&quot;]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//map方法不会改变原数组里的数据 [12,34,56,89,78,23,45,19]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="_3-foreach-方法对数组的每个元素执行一次提供的函数-且这个函数没有返回值" tabindex="-1"><a class="header-anchor" href="#_3-foreach-方法对数组的每个元素执行一次提供的函数-且这个函数没有返回值" aria-hidden="true">#</a> 3.forEach() 方法对数组的每个元素执行一次提供的函数,且这个函数没有返回值</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//数组里的每一个元素都会被打印</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&#39;个元素是&#39;</span> <span class="token operator">+</span> element<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//函数没有返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="_4-some-方法测试数组中的某些元素是否通过由提供的函数实现的测试" tabindex="-1"><a class="header-anchor" href="#_4-some-方法测试数组中的某些元素是否通过由提供的函数实现的测试" aria-hidden="true">#</a> 4.some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试.</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//数组里否有一些元素大于50.只要有一个元素大于，就返回true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token comment">//12,34,56</span>
  <span class="token keyword">return</span> element <span class="token operator">&gt;</span> <span class="token number">50</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="_5-every-方法测试数组的所有元素是否都通过了指定函数的测试。" tabindex="-1"><a class="header-anchor" href="#_5-every-方法测试数组的所有元素是否都通过了指定函数的测试。" aria-hidden="true">#</a> 5.every() 方法测试数组的所有元素是否都通过了指定函数的测试。</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//数组里是否每一个元素都大于50.只有在所有的数都大于50时，才返回true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token comment">//12.  第0个数字就已经小于50了，就没有再比较的意义了</span>
  <span class="token keyword">return</span> element <span class="token operator">&gt;</span> <span class="token number">50</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="_6-findindex" tabindex="-1"><a class="header-anchor" href="#_6-findindex" aria-hidden="true">#</a> 6.findIndex()</h5><ul><li><h5 id="findindex-用来查找数组中满足-条件的项的索引号" tabindex="-1"><a class="header-anchor" href="#findindex-用来查找数组中满足-条件的项的索引号" aria-hidden="true">#</a> findIndex 用来查找数组中满足 条件的项的索引号</h5></li><li><h5 id="参数-是一个回调函数-回调函数的参数-item-表示数组中的每一项元素" tabindex="-1"><a class="header-anchor" href="#参数-是一个回调函数-回调函数的参数-item-表示数组中的每一项元素" aria-hidden="true">#</a> 参数：是一个回调函数，回调函数的参数 item 表示数组中的每一项元素</h5></li><li><h5 id="如果-回调函数的返回值为-true-那-么-findindex-就会把当前项的索引号返回-用法与-foreach-类似" tabindex="-1"><a class="header-anchor" href="#如果-回调函数的返回值为-true-那-么-findindex-就会把当前项的索引号返回-用法与-foreach-类似" aria-hidden="true">#</a> 如果 回调函数的返回值为 true，那 么，findIndex() 就会把当前项的索引号返回, 用法与 forEach 类似</h5></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意-findindex-对于空数组-函数是不会执行的。" tabindex="-1"><a class="header-anchor" href="#注意-findindex-对于空数组-函数是不会执行的。" aria-hidden="true">#</a> 注意: findIndex() 对于空数组，函数是不会执行的。</h5><h5 id="注意-findindex-并没有改变数组的原始值。" tabindex="-1"><a class="header-anchor" href="#注意-findindex-并没有改变数组的原始值。" aria-hidden="true">#</a> 注意: findIndex() 并没有改变数组的原始值。</h5><hr><h4 id="_5-history-对象" tabindex="-1"><a class="header-anchor" href="#_5-history-对象" aria-hidden="true">#</a> 5.history 对象</h4><ul><li><h5 id="history-back-后退跟点击浏览器后退按钮一个效果" tabindex="-1"><a class="header-anchor" href="#history-back-后退跟点击浏览器后退按钮一个效果" aria-hidden="true">#</a> history.back ( ) 后退跟点击浏览器后退按钮一个效果</h5></li><li><h5 id="history-forward-前进" tabindex="-1"><a class="header-anchor" href="#history-forward-前进" aria-hidden="true">#</a> history.forward( )前进</h5></li><li><h5 id="history-go-1-前进-history-go-1-后退" tabindex="-1"><a class="header-anchor" href="#history-go-1-前进-history-go-1-后退" aria-hidden="true">#</a> history.go( 1 ) 前进 - ##### history.go(-1)后退</h5></li></ul><p>javscript:伪协议，页面不跳转，可以执行 js 代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    &lt;a href=“JavaScript：history.go(-1);&quot;&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> 页面后退

     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:location.reload();<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon_right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mui-icon mui-icon-reload<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    location.reload()  //页面刷新
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-字符串内置方法" tabindex="-1"><a class="header-anchor" href="#_6-字符串内置方法" aria-hidden="true">#</a> 6.字符串内置方法</h4><h5 id="_1-字符方法" tabindex="-1"><a class="header-anchor" href="#_1-字符方法" aria-hidden="true">#</a> 1 字符方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取指定位置处字符</span>
<span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取指定位置处字符的ASCII码</span>
str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">//HTML5，IE8+支持 和charAt()等效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-字符串操作方法-常用" tabindex="-1"><a class="header-anchor" href="#_2-字符串操作方法-常用" aria-hidden="true">#</a> 2 字符串操作方法 (常用)</h5><ul><li>查找指定字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//indexOf:获取某个字符第一次出现的位置，如果没有，返回-1</span>
<span class="token comment">//lastIndexOf:从后面开始查找第一次出现的位置。如果没有，返回-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>去除空白 trim();//去除字符串两边的空格，内部空格不会去除</li><li>大小写转换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//全部转换成大写字母</span>
<span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//全部转换成小写字母</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>字符串拼接与截取</p><ul><li><p>字符串拼接</p><p>1.可以用 concat，用法与数组一样(返回新的字符串)，但是字符串拼串我们一般都用 + 号</p></li><li><p>字符串截取<br> 字符串截取的方法有很多，记得越多，越混乱，因此就记好用的就行</p></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//slice ：从start开始，end结束，包含头,不包含尾 ,返回一个新的字符串,原字符串不变</span>
<span class="token comment">//substring ：从start开始，end结束，包含头,不包含尾  ,返回一个新的字符串,原字符串不变</span>
<span class="token comment">// substr ： ：从start开始，截取length个字符。(推荐)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串切割</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//split:将字符串分割成数组,原字符串不改变（很常用）</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;张三,李四,王五&#39;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串替换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">replace</span><span class="token punctuation">(</span>searchValue<span class="token punctuation">,</span> replaceValue<span class="token punctuation">)</span> <span class="token comment">//参数：searchValue:需要替换的值    replaceValue:用来替换的值</span>
<span class="token comment">//注意,返回一个新的字符串,原来的字符串没有改变</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aaaa&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">//abcd</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token comment">//abcaaaa</span>

<span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// String.fromCharCode(101, 102, 103);	 //把ASCII码转换成字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、字符串与数组常用方法区别" tabindex="-1"><a class="header-anchor" href="#_7、字符串与数组常用方法区别" aria-hidden="true">#</a> 7、字符串与数组常用方法区别</h4><table><thead><tr><th>方法</th><th>数组</th><th>字符串</th><th>特点</th></tr></thead><tbody><tr><td>拼接</td><td>转字符串 arr.concat()</td><td>string.concat()</td><td>连接两个或更多的数组或字符串，并返回结果。不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</td></tr><tr><td>查找</td><td>row 2 col 2</td><td>indexOf/lastIndexOf</td><td></td></tr></tbody></table><h4 id="_8、tap-事件" tabindex="-1"><a class="header-anchor" href="#_8、tap-事件" aria-hidden="true">#</a> 8、tap 事件</h4><ul><li>tap 事件在用户轻击一个元素时触发。tap 事件类似于 jQuery click() 方法。</li><li>mui 组件下拉刷新阻止了 click 事件，在移动端中可以替代 click 事件，</li><li>e.dataset 原生 js 获取自定义属性 所有 data-开头的属性都会存储到 dataset 中</li></ul><h4 id="_9、js-小数进度丢失" tabindex="-1"><a class="header-anchor" href="#_9、js-小数进度丢失" aria-hidden="true">#</a> 9、js 小数进度丢失</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//四舍五入后保留几位小数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_10、移动端自适应布局-流式布局" tabindex="-1"><a class="header-anchor" href="#_10、移动端自适应布局-流式布局" aria-hidden="true">#</a> 10、移动端自适应布局--流式布局</h4><h4 id="_11、移动端自适应布局-响应式布局" tabindex="-1"><a class="header-anchor" href="#_11、移动端自适应布局-响应式布局" aria-hidden="true">#</a> 11、移动端自适应布局--响应式布局</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1 获取屏幕的宽度</span>
<span class="token comment">// 2 设置设计图的初始大小</span>
<span class="token comment">// 3 设置需要的font-size</span>
<span class="token comment">// 4 获取初始比例(2/3)</span>
<span class="token comment">// 5 根据当前屏幕大小设置对应的fontsize</span>
<span class="token comment">// 6 针对屏幕做出限定, 最小320最大设计图</span>
<span class="token comment">// 7 设置html的字体大小</span>

<span class="token function">rem</span><span class="token punctuation">(</span><span class="token number">750</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">rem</span><span class="token punctuation">(</span><span class="token parameter">uiWidth<span class="token punctuation">,</span> fonts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement
  <span class="token keyword">var</span> screenWidth <span class="token operator">=</span> html<span class="token punctuation">.</span>clientWidth
  <span class="token comment">// var uiWidth = uiWidth</span>
  <span class="token keyword">var</span> fonts <span class="token operator">=</span> fonts
  <span class="token keyword">var</span> proportion <span class="token operator">=</span> uiWidth <span class="token operator">/</span> fonts
  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>

  <span class="token function">getRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> getRem

  <span class="token keyword">function</span> <span class="token function">getRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      screenWidth <span class="token operator">=</span> html<span class="token punctuation">.</span>clientWidth
      <span class="token keyword">if</span> <span class="token punctuation">(</span>screenWidth <span class="token operator">&lt;=</span> <span class="token number">320</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        html<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">320</span> <span class="token operator">/</span> proportion <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>screenWidth <span class="token operator">&gt;=</span> uiWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        html<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> uiWidth <span class="token operator">/</span> proportion <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        html<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> screenWidth <span class="token operator">/</span> proportion <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>fontSize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12、全屏兼容" tabindex="-1"><a class="header-anchor" href="#_12、全屏兼容" aria-hidden="true">#</a> 12、全屏兼容</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 兼容性处理</span>
full<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将来有可能直接有这个方法, 就直接调用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>video<span class="token punctuation">.</span>requestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    video<span class="token punctuation">.</span><span class="token function">requestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 对 chrome 做兼容</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>video<span class="token punctuation">.</span>webkitRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    video<span class="token punctuation">.</span><span class="token function">webkitRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// firefox 兼容</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>video<span class="token punctuation">.</span>mozRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    video<span class="token punctuation">.</span><span class="token function">mozRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13、自定义滚动条" tabindex="-1"><a class="header-anchor" href="#_13、自定义滚动条" aria-hidden="true">#</a> 13、自定义滚动条</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span>

<span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #f5f5f5<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*定义滚动条轨道 内阴影+圆角*/</span>

<span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> inset 0 0 6px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #f5f5f5<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*定义滑块 内阴影+圆角*/</span>

<span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> inset 0 0 6px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14、console-家族" tabindex="-1"><a class="header-anchor" href="#_14、console-家族" aria-hidden="true">#</a> 14、console 家族</h4><h5 id="console-assert-expression-object-object" tabindex="-1"><a class="header-anchor" href="#console-assert-expression-object-object" aria-hidden="true">#</a> console.assert(expression, object[, object...])</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//接收至少两个参数，第一个参数的值或返回值为false的时候，将会在控制台上输出后续参数的值。例如：</span>

console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span> <span class="token comment">// 无输出，返回 undefined</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span> <span class="token comment">// 输出 object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-count" tabindex="-1"><a class="header-anchor" href="#console-count" aria-hidden="true">#</a> console.count()</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// count: 1</span>
<span class="token comment">// count: 2</span>
<span class="token comment">// count: 3</span>
<span class="token comment">// count: 4</span>
<span class="token comment">// count: 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-dir-object" tabindex="-1"><a class="header-anchor" href="#console-dir-object" aria-hidden="true">#</a> console.dir(object)</h5><pre><code>将传入对象的属性，包括子对象的属性以列表形式输出，例
如：
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;classicemi&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">college</span><span class="token operator">:</span> <span class="token string">&#39;HUST&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">major</span><span class="token operator">:</span> <span class="token string">&#39;ei&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    输出：
    Object
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;classicemi&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">college</span><span class="token operator">:</span> <span class="token string">&#39;HUST&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">major</span><span class="token operator">:</span> <span class="token string">&#39;ei&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-error-object-object" tabindex="-1"><a class="header-anchor" href="#console-error-object-object" aria-hidden="true">#</a> console.error(object[, object...])</h5><pre><code>用于输出错误信息，用法和常见的console.log一样，不同点在于输出内容会标记为错误的样式，便于分辨。
</code></pre><h5 id="console-group" tabindex="-1"><a class="header-anchor" href="#console-group" aria-hidden="true">#</a> console.group</h5><pre><code>这是个有趣的方法，它能够让控制台输出的语句产生不同的层级嵌套关系，每一个console.group()会增加一层嵌套，相反要减少一层嵌套可以使用console.groupEnd()方法。语言表述比较无力，看代码：

和console.group()相似的方法是console.groupCollapsed()作用相同，不同点是嵌套的输出内容是折叠状态，在有大段内容输出的时候使用这个方法可以使输出版面不至于太长。。。吧
</code></pre><h5 id="console-info-object-object" tabindex="-1"><a class="header-anchor" href="#console-info-object-object" aria-hidden="true">#</a> console.info(object[, object...])</h5><pre><code>此方法与之前说到的console.error一样，用于输出信息，没有什么特别之处。

console.info(&#39;info&#39;); // 输出 info
</code></pre><h5 id="console-table" tabindex="-1"><a class="header-anchor" href="#console-table" aria-hidden="true">#</a> console.table()</h5><pre><code>可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;33&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;45&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;33&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;45&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-profile-profilelabel" tabindex="-1"><a class="header-anchor" href="#console-profile-profilelabel" aria-hidden="true">#</a> console.profile([profileLabel])</h5><pre><code>  可用于性能分析。在 JS 开发中，我们常常要评估段代码或是某个函数的性能。在函数中手动打印时间固然可以，但显得不够灵活而且有误差。借助控制台以及console.profile()方法我们可以很方便地监控运行性能。
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">childA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">childA</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token string">&#39;性能分析&#39;</span><span class="token punctuation">)</span>
<span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">profileEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-time-name" tabindex="-1"><a class="header-anchor" href="#console-time-name" aria-hidden="true">#</a> console.time(name)</h5><pre><code>计时器，可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上，name参数可作为标签
名。
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;计时器&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;计时器&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-trace" tabindex="-1"><a class="header-anchor" href="#console-trace" aria-hidden="true">#</a> console.trace()</h5><pre><code>console.trace()用来追踪函数的调用过程。在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tracer</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">tracer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;tracer&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="console-warn-object-object" tabindex="-1"><a class="header-anchor" href="#console-warn-object-object" aria-hidden="true">#</a> console.warn(object[, object...])</h5><p>输出参数的内容，作为警告提示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;warn&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出 warn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> 占位符</h5><pre><code>console对象上的五个直接输出方法，console.log(),console.warn(),console.error(),console.exception()(等同于console.error())和console.info()，都可以使用占位符。支持的占位符有四种，分别是字符(%s)、整数(%d 或 %i)、浮点数(%f)和对象(%o)。
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%s是%d年%d月%d日&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;今天&#39;</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆周率是%f&#39;</span><span class="token punctuation">,</span> <span class="token number">3.14159</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;classicemi&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%o&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_15、ascii、unicode-和-utf-8-编码的区别" tabindex="-1"><a class="header-anchor" href="#_15、ascii、unicode-和-utf-8-编码的区别" aria-hidden="true">#</a> 15、ASCII、Unicode 和 UTF-8 编码的区别</h4><table><thead><tr><th>编码</th><th>大小</th><th>支持语言</th></tr></thead><tbody><tr><td>ASCII</td><td>1 个字节</td><td>英文</td></tr><tr><td>Unicode</td><td>2 个字节（生僻字 4 个）</td><td>所有语言</td></tr><tr><td>UTF-8</td><td>1-6 个字节，英文字母 1 个字节，汉字 3 个字节，生僻字 4-6 个字节</td><td>所有语言</td></tr></tbody></table><h4 id="_16、screen-client-page-区别" tabindex="-1"><a class="header-anchor" href="#_16、screen-client-page-区别" aria-hidden="true">#</a> 16、screen client page 区别</h4><h5 id="screenx" tabindex="-1"><a class="header-anchor" href="#screenx" aria-hidden="true">#</a> screenX</h5><p>screen 顾名思义是屏幕，是用来获取鼠标点击位置到屏幕显示器的距离，距离的最大值需根据屏幕分辨率的尺寸来计算。</p><p>兼容性：所有游览器都支持此属性。</p><h5 id="clientx" tabindex="-1"><a class="header-anchor" href="#clientx" aria-hidden="true">#</a> clientX</h5><p>event.clientX、event.clientY 就是用来获取鼠标距游览器显示窗口的长度。</p><p><img src="http://upload-images.jianshu.io/upload_images/1245223-186b20021739e6f6.png" alt="image"> 兼容性：IE 和主流游览器都支持。</p><h5 id="offsetx-offsety" tabindex="-1"><a class="header-anchor" href="#offsetx-offsety" aria-hidden="true">#</a> offsetX offsetY</h5><p>event.offsetX event.offsetY</p><p>offset 意为偏移量，是被点击的元素距左上角为参考原点的长度，而 IE、FF 和 Chrome 的参考点有所差异。</p><p>Chrome 下，offsetX offsetY 是包含边框的，如图所示。 <img src="http://upload-images.jianshu.io/upload_images/1245223-06e00d7afadcb800.png?imageMogr2/auto-orient/strip|imageView2/2/w/626" alt="image"></p><p>而 IE、FF 是不包含边框的，如果鼠标进入到 border 区域，为返回负值，如图所示。 <img src="http://upload-images.jianshu.io/upload_images/1245223-df5b5aa5466c2170.png" alt="image"></p><p>兼容性：IE9+,chrome,FF 都支持此属性。</p><h5 id="pagex" tabindex="-1"><a class="header-anchor" href="#pagex" aria-hidden="true">#</a> pageX</h5><p>就是参照点也是浏览器内容区域的左上角，但它不会随着滚动条而变动</p><p>注意:在 IE 中没有 pageX、pageY 取而代之的是 event.x、evnet.y。x 和 y 在 webkit 内核下也实现了，所以火狐不支持 x，y。</p><p>兼容性：IE 不支持，其他高级游览器支持。 <img src="http://www.2cto.com/uploadfile/Collfiles/20140914/2014091409260873.png" alt="image"></p><h4 id="_17-typeof-和-instranceof-的区别" tabindex="-1"><a class="header-anchor" href="#_17-typeof-和-instranceof-的区别" aria-hidden="true">#</a> 17.typeof 和 instranceof 的区别</h4><ul><li>typeof(基本数据类型) 判断变量数据类型 <ul><li>typeof 基本类型 返回的是字符串</li><li>typeof 对象 返回的是 object</li><li>typeof 数组 返回的是 object</li><li>typeof 函数 返回的是 function</li><li>typeof null 返回的 object</li></ul></li><li>instanceof(复杂数据类型) <ul><li>instanceof 运算符用来判断一个构造函数的 prototype 属性所指向的对象是否存在另外一个要检测对象的原型链上</li><li>语法: obj instanceof Object;//true 实例 obj 在不在 Object 构造函数 中</li></ul></li><li>instanceof  运算符用来测试一个对象在其原型链中是否存在一个构造函数的  prototype  属性。其意思就是判断对象是否是某一数据类型（如 Array）的实例，请重点关注一下是判断一个对象是否是数据类型的实例。在这里字面量值，2， true ，&#39;str&#39;不是实例，所以判断值为 false。</li></ul><h4 id="_18-javascript-异步编程-回调地狱-的一些解决方案" tabindex="-1"><a class="header-anchor" href="#_18-javascript-异步编程-回调地狱-的一些解决方案" aria-hidden="true">#</a> 18.JavaScript 异步编程__“回调地狱”的一些解决方案</h4><ul><li><p>异步编程在 JavaScript 中非常重要。 过多的异步编程也带了回调嵌套的问题，本文会提供一些解决“回调地狱”的方法。</p></li><li><p>不论是浏览器中最为常见的 ajax、事件监听，还是 node 中文件读取、网络编程、数据库等操作，都离不开异步编程。在异步编程中，许多操作都会放在回调函数（callback）中。同步与异步的混杂、过多的回调嵌套都会使得代码变得难以理解与维护，这也是常受人诟病的地方。先看下面这段代码:</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./sample.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> keyword <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
  db<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from sample where kw = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/sampleget?count=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="首先我们读取的一个文件中的关键字-keyword-然后根据该-keyword-进行数据库查询-最后依据查询结果请求数据。" tabindex="-1"><a class="header-anchor" href="#首先我们读取的一个文件中的关键字-keyword-然后根据该-keyword-进行数据库查询-最后依据查询结果请求数据。" aria-hidden="true">#</a> 首先我们读取的一个文件中的关键字 keyword，然后根据该 keyword 进行数据库查询，最后依据查询结果请求数据。</h5><h5 id="其中包含了三个异步操作" tabindex="-1"><a class="header-anchor" href="#其中包含了三个异步操作" aria-hidden="true">#</a> 其中包含了三个异步操作：</h5><ul><li>文件读取：fs.readFile</li><li>数据库查询：db.find</li><li>http 请求：get <strong>可以看到，我们没增加一个异步请求，就会多添加一层回调函数的嵌套，这段代码中三个异步函数的嵌套已经开始使一段本可以语言明确的代码编程不易阅读与维护了。接下来会介绍一些方法来规避回调地狱。</strong></li></ul><hr><h6 id="一、拆解-function" tabindex="-1"><a class="header-anchor" href="#一、拆解-function" aria-hidden="true">#</a> 一、拆解 function</h6><ul><li>回调嵌套所带来的一个重要问题就是代码不易阅读与维护。因为普遍来说，过多的缩进（嵌套）会极大的影响代码的可读性。基于这一点，可以进行一个最简单的优化——将各步拆解为单个的 function</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/sampleget?count=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">queryDB</span><span class="token punctuation">(</span><span class="token parameter">kw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from sample where kw = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>kw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">getData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> keyword <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token function">queryDB</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./sample.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="可以看到-通过上面的改写方式-代码清晰了许多。该方法非常简单-具有一定的效果-但是缺少通用性。" tabindex="-1"><a class="header-anchor" href="#可以看到-通过上面的改写方式-代码清晰了许多。该方法非常简单-具有一定的效果-但是缺少通用性。" aria-hidden="true">#</a> 可以看到，通过上面的改写方式，代码清晰了许多。该方法非常简单，具有一定的效果，但是缺少通用性。</h6><hr><h6 id="二、事件发布-监听模式" tabindex="-1"><a class="header-anchor" href="#二、事件发布-监听模式" aria-hidden="true">#</a> 二、事件发布/监听模式</h6><ul><li><p>如果在浏览器中写过事件监听 addEventListener，那么你对这种事件发布/监听的模式一定不陌生。</p></li><li><p>借鉴这种思想，一方面，我们可以监听某一事件，当事件发生时，进行相应回调操作；另一方面，当某些操作完成后，通过发布事件触发回调。这样就可以将原本捆绑在一起的代码解耦。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;db&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> kw</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  db<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from sample where kw = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>kw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">eventEmitter</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/sampleget?count=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./sample.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> keyword <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
  eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;db&#39;</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="三、promise" tabindex="-1"><a class="header-anchor" href="#三、promise" aria-hidden="true">#</a> 三、Promise</h6><ul><li>Promise 是一种异步解决方案，最早由社区提出并实现，后来写进了 es6 规范。</li><li>目前一些主流的浏览器已经原生实现了 Promise 的 API，可以在 Can I use 里查看浏览器的支持情况。当然，如果想要做浏览器的兼容，可以考虑使用一些 Promise 的实现库，例如 bluebird、 Q 等。下面以 bluebird 为例：</li><li>首先，我们需要将异步方法改写为 Promise，对于符合 node 规范的回调函数（第一个参数必须是 Error），可以使用 bluebird 的 promisify 方法。该方法接收一个标准的异步方法并返回一个 Promise 对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bluebird <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;bluebird&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> readFile <span class="token operator">=</span> bluebird<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，readFile 就变成了一个 Promise 对象。 但是，有的异步方法无法进行转换，或者我们需要使用原生 Promise，这就需要我们手动进行一些改造。下面提供一种改造的方法。 ** 以 fs.readFile 为例，借助原生 Promise 来改造该方法：**</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">readFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> resolve<span class="token punctuation">,</span> reject
  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_resolve<span class="token punctuation">,</span> _reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    resolve <span class="token operator">=</span> _resolve
    reject <span class="token operator">=</span> _reject
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> deferred <span class="token operator">=</span> <span class="token punctuation">{</span>
    resolve<span class="token punctuation">,</span>
    reject<span class="token punctuation">,</span>
    promise
  <span class="token punctuation">}</span>
  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deferred<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      deferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> deferred<span class="token punctuation">.</span>promise
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="我们在方法中创建了一个-promise-对象-并在异步回调中根据不同的情况使用-reject-与-resolve-来改变-promise-对象的状态。该方法返回这个-promise-对象。其他的一些异步方法也可以参照这种方式进行改造。" tabindex="-1"><a class="header-anchor" href="#我们在方法中创建了一个-promise-对象-并在异步回调中根据不同的情况使用-reject-与-resolve-来改变-promise-对象的状态。该方法返回这个-promise-对象。其他的一些异步方法也可以参照这种方式进行改造。" aria-hidden="true">#</a> 我们在方法中创建了一个 Promise 对象，并在异步回调中根据不同的情况使用 reject 与 resolve 来改变 Promise 对象的状态。该方法返回这个 Promise 对象。其他的一些异步方法也可以参照这种方式进行改造。</h5></li><li><h5 id="假设通过改造-readfile、querydb-与-getdata-方法均会返回一个-promise-对象。代码就变为了" tabindex="-1"><a class="header-anchor" href="#假设通过改造-readfile、querydb-与-getdata-方法均会返回一个-promise-对象。代码就变为了" aria-hidden="true">#</a> 假设通过改造，readFile、queryDB 与 getData 方法均会返回一个 Promise 对象。代码就变为了：</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./sample.txt&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">content</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> keyword <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">queryDB</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="可以看到-之前的嵌套操作编程了通过-then-连接的链式操作。代码的整洁度上有了一个较大的提高。" tabindex="-1"><a class="header-anchor" href="#可以看到-之前的嵌套操作编程了通过-then-连接的链式操作。代码的整洁度上有了一个较大的提高。" aria-hidden="true">#</a> 可以看到，之前的嵌套操作编程了通过 then 连接的链式操作。代码的整洁度上有了一个较大的提高。</h5><hr><h4 id="_4-generator" tabindex="-1"><a class="header-anchor" href="#_4-generator" aria-hidden="true">#</a> 4 generator</h4><ul><li><h5 id="generator-是-es6-中的一个新的语法。在-function-关键字后添加-即可将函数变为-generator。" tabindex="-1"><a class="header-anchor" href="#generator-是-es6-中的一个新的语法。在-function-关键字后添加-即可将函数变为-generator。" aria-hidden="true">#</a> generator 是 es6 中的一个新的语法。在 function 关键字后添加*即可将函数变为 generator。</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token number">1</span>
  <span class="token keyword">yield</span> <span class="token number">2</span>
  <span class="token keyword">return</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="执行-generator-将会返回一个遍历器对象-用于遍历-generator-内部的状态。" tabindex="-1"><a class="header-anchor" href="#执行-generator-将会返回一个遍历器对象-用于遍历-generator-内部的状态。" aria-hidden="true">#</a> 执行 generator 将会返回一个遍历器对象，用于遍历 generator 内部的状态。</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: true }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="可以看到-generator-函数有一个最大的特点-可以在内部执行的过程中交出程序的控制权-yield-相当于起到了一个暂停的作用-而当一定情况下-外部又将控制权再移交回来。" tabindex="-1"><a class="header-anchor" href="#可以看到-generator-函数有一个最大的特点-可以在内部执行的过程中交出程序的控制权-yield-相当于起到了一个暂停的作用-而当一定情况下-外部又将控制权再移交回来。" aria-hidden="true">#</a> 可以看到，generator 函数有一个最大的特点，可以在内部执行的过程中交出程序的控制权，yield 相当于起到了一个暂停的作用；而当一定情况下，外部又将控制权再移交回来。</h5></li><li><h5 id="想象一下-我们用-generator-来封装代码-在异步任务处使用-yield-关键词-此时-generator-会将程序执行权交给其他代码-而在异步任务完成后-调用-next-方法来恢复-yield-下方代码的执行。以-readfile-为例-大致流程如下" tabindex="-1"><a class="header-anchor" href="#想象一下-我们用-generator-来封装代码-在异步任务处使用-yield-关键词-此时-generator-会将程序执行权交给其他代码-而在异步任务完成后-调用-next-方法来恢复-yield-下方代码的执行。以-readfile-为例-大致流程如下" aria-hidden="true">#</a> 想象一下，我们用 generator 来封装代码，在异步任务处使用 yield 关键词，此时 generator 会将程序执行权交给其他代码，而在异步任务完成后，调用 next 方法来恢复 yield 下方代码的执行。以 readFile 为例，大致流程如下：</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//我们的主任务——显示关键字</span>
<span class="token comment">//使用yield暂时中断下方代码执行</span>
<span class="token comment">//yield后面为promise对象</span>
<span class="token keyword">const</span> <span class="token function-variable function">showKeyword</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始读取&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> keyword <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">关键字为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filepath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// generator的流程控制</span>
<span class="token keyword">let</span> gen <span class="token operator">=</span> <span class="token function">showKeyword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="在主任务部分-原本-readfile-异步的部分变成了类似同步的写法-代码变得非常清晰。而在下半部分-则是对于什么时候需要移交回控制权给-generator-的流程控制。" tabindex="-1"><a class="header-anchor" href="#在主任务部分-原本-readfile-异步的部分变成了类似同步的写法-代码变得非常清晰。而在下半部分-则是对于什么时候需要移交回控制权给-generator-的流程控制。" aria-hidden="true">#</a> 在主任务部分，原本 readFile 异步的部分变成了类似同步的写法，代码变得非常清晰。而在下半部分，则是对于什么时候需要移交回控制权给 generator 的流程控制。</h5></li><li><h5 id="然而-我们需要手动控制-generator-的流程-如果能够自动执行-generator——在需要的时候自动移交控制权-那么会更加具有实用性。" tabindex="-1"><a class="header-anchor" href="#然而-我们需要手动控制-generator-的流程-如果能够自动执行-generator——在需要的时候自动移交控制权-那么会更加具有实用性。" aria-hidden="true">#</a> 然而，我们需要手动控制 generator 的流程，如果能够自动执行 generator——在需要的时候自动移交控制权，那么会更加具有实用性。</h5></li><li><h5 id="为此-我们可以使用-co-这个库。它可以是省去我们对于-generator-流程控制的代码" tabindex="-1"><a class="header-anchor" href="#为此-我们可以使用-co-这个库。它可以是省去我们对于-generator-流程控制的代码" aria-hidden="true">#</a> 为此，我们可以使用 co 这个库。它可以是省去我们对于 generator 流程控制的代码</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> co <span class="token operator">=</span> <span class="token function">reuqire</span><span class="token punctuation">(</span><span class="token string">&#39;co&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 我们的主任务——显示关键字</span>
    <span class="token comment">// 使用yield暂时中断下方代码执行</span>
    <span class="token comment">// yield后面为promise对象</span>
    <span class="token keyword">const</span> <span class="token function-variable function">showKeyword</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始读取&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> keyword <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">关键字为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filepath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用co</span>
    <span class="token function">co</span><span class="token punctuation">(</span>showKeyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
    其中，yeild关键字后面需要是functio<span class="token punctuation">,</span> promise<span class="token punctuation">,</span> generator<span class="token punctuation">,</span> array或object。可以改写文章一开始的例子：

    <span class="token keyword">const</span> co <span class="token operator">=</span> <span class="token function">reuqire</span><span class="token punctuation">(</span><span class="token string">&#39;co&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> keyword <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">queryDB</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">co</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&#39;./sample.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="五、async-await" tabindex="-1"><a class="header-anchor" href="#五、async-await" aria-hidden="true">#</a> 五、async/await</h5><h5 id="可以看到-上面的方法虽然都在一定程度上解决了异步编程中回调带来的问题。然而" tabindex="-1"><a class="header-anchor" href="#可以看到-上面的方法虽然都在一定程度上解决了异步编程中回调带来的问题。然而" aria-hidden="true">#</a> 可以看到，上面的方法虽然都在一定程度上解决了异步编程中回调带来的问题。然而</h5><ul><li><h5 id="function-拆分的方式其实仅仅只是拆分代码块-时常会不利于后续维护" tabindex="-1"><a class="header-anchor" href="#function-拆分的方式其实仅仅只是拆分代码块-时常会不利于后续维护" aria-hidden="true">#</a> function 拆分的方式其实仅仅只是拆分代码块，时常会不利于后续维护；</h5></li><li><h5 id="事件发布-监听方式模糊了异步方法之间的流程关系" tabindex="-1"><a class="header-anchor" href="#事件发布-监听方式模糊了异步方法之间的流程关系" aria-hidden="true">#</a> 事件发布/监听方式模糊了异步方法之间的流程关系；</h5></li><li><h5 id="promise-虽然使得多个嵌套的异步调用能够通过链式的-api-进行操作-但是过多的-then-也增加了代码的冗余-也对阅读代码中各阶段的异步任务产生了一定干扰" tabindex="-1"><a class="header-anchor" href="#promise-虽然使得多个嵌套的异步调用能够通过链式的-api-进行操作-但是过多的-then-也增加了代码的冗余-也对阅读代码中各阶段的异步任务产生了一定干扰" aria-hidden="true">#</a> Promise 虽然使得多个嵌套的异步调用能够通过链式的 API 进行操作，但是过多的 then 也增加了代码的冗余，也对阅读代码中各阶段的异步任务产生了一定干扰；</h5></li><li><h5 id="通过-generator-虽然能提供较好的语法结构-但是毕竟-generator-与-yield-的语境用在这里多少还有些不太贴切。" tabindex="-1"><a class="header-anchor" href="#通过-generator-虽然能提供较好的语法结构-但是毕竟-generator-与-yield-的语境用在这里多少还有些不太贴切。" aria-hidden="true">#</a> 通过 generator 虽然能提供较好的语法结构，但是毕竟 generator 与 yield 的语境用在这里多少还有些不太贴切。</h5></li></ul><h5 id="因此-这里再介绍一个方法-它就是-es7-中的-async-await。" tabindex="-1"><a class="header-anchor" href="#因此-这里再介绍一个方法-它就是-es7-中的-async-await。" aria-hidden="true">#</a> 因此，这里再介绍一个方法，它就是 es7 中的 async/await。</h5><ul><li><h5 id="简单介绍一下-async-await。基本上-任何一个函数都可以成为-async-函数-以下都是合法的书写形式" tabindex="-1"><a class="header-anchor" href="#简单介绍一下-async-await。基本上-任何一个函数都可以成为-async-函数-以下都是合法的书写形式" aria-hidden="true">#</a> 简单介绍一下 async/await。基本上，任何一个函数都可以成为 async 函数，以下都是合法的书写形式：</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//在async函数中可以使用await语句。await后一般是一个Promise对象。</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">post</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">post已完成，结果为：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="当上面的函数执行到-await-时-可以简单理解为-函数挂起-等待-await-后的-promise-返回-再执行下面的语句。" tabindex="-1"><a class="header-anchor" href="#当上面的函数执行到-await-时-可以简单理解为-函数挂起-等待-await-后的-promise-返回-再执行下面的语句。" aria-hidden="true">#</a> 当上面的函数执行到 await 时，可以简单理解为，函数挂起，等待 await 后的 Promise 返回，再执行下面的语句。</h5></li><li><h5 id="值得注意的是-这段异步操作的代码-看起来就像是-同步操作-。这就大大方便了异步代码的编写与阅读。下面改写我们的例子。" tabindex="-1"><a class="header-anchor" href="#值得注意的是-这段异步操作的代码-看起来就像是-同步操作-。这就大大方便了异步代码的编写与阅读。下面改写我们的例子。" aria-hidden="true">#</a> 值得注意的是，这段异步操作的代码，看起来就像是“同步操作”。这就大大方便了异步代码的编写与阅读。下面改写我们的例子。</h5></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> <span class="token function-variable function">printData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> keyword <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryDB</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printData</span><span class="token punctuation">(</span><span class="token string">&#39;./sample.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h5 id="可以看到-代码简洁清晰-异步代码也具有了-同步-代码的结构。" tabindex="-1"><a class="header-anchor" href="#可以看到-代码简洁清晰-异步代码也具有了-同步-代码的结构。" aria-hidden="true">#</a> 可以看到，代码简洁清晰，异步代码也具有了“同步”代码的结构。</h5></li><li><h5 id="注意-其中-readfile、querydb-与-getdata-方法都需要返回一个-promise-对象。这可以通过在第三部分-promise-里提供的方式进行改写。" tabindex="-1"><a class="header-anchor" href="#注意-其中-readfile、querydb-与-getdata-方法都需要返回一个-promise-对象。这可以通过在第三部分-promise-里提供的方式进行改写。" aria-hidden="true">#</a> 注意，其中 readFile、queryDB 与 getData 方法都需要返回一个 Promise 对象。这可以通过在第三部分 Promise 里提供的方式进行改写。</h5></li></ul><h5 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h5><ul><li><h5 id="异步编程作为-javascript-中的一部分-具有非常重要的位置-它帮助我们避免同步代码带来的线程阻塞的同时-也为编码与阅读带来了一定的困难。过多的回调嵌套很容易会让我们陷入-回调地狱-中-使代码变成一团乱麻。为了解决-回调地狱-我们可以使用文中所述的这五种常用方法" tabindex="-1"><a class="header-anchor" href="#异步编程作为-javascript-中的一部分-具有非常重要的位置-它帮助我们避免同步代码带来的线程阻塞的同时-也为编码与阅读带来了一定的困难。过多的回调嵌套很容易会让我们陷入-回调地狱-中-使代码变成一团乱麻。为了解决-回调地狱-我们可以使用文中所述的这五种常用方法" aria-hidden="true">#</a> 异步编程作为 JavaScript 中的一部分，具有非常重要的位置，它帮助我们避免同步代码带来的线程阻塞的同时，也为编码与阅读带来了一定的困难。过多的回调嵌套很容易会让我们陷入“回调地狱”中，使代码变成一团乱麻。为了解决“回调地狱”，我们可以使用文中所述的这五种常用方法：</h5></li><li><p>function 拆解</p></li><li><p>事件发布/订阅模式</p></li><li><p>Promise</p></li><li><p>Generator</p></li><li><p>async / await 理解各类方法的原理与实现方式，了解其中利弊，可以帮助我们更好得进行异步编程。</p></li></ul><p>autocomplete</p><p>formdata</p><p>多行溢出 两行省略</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="六、window-event-returnvalue-false" tabindex="-1"><a class="header-anchor" href="#六、window-event-returnvalue-false" aria-hidden="true">#</a> 六、window.event.returnValue=false</h5><ul><li>window.event.returnValue=false 放在提交表单中的 onclick 事件中则不会提交表单，如果放到超链接中则不执行超链接，也就是它禁止了或取消了请求，没有任何效果。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">delItem</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> CheckOutTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;确认要删除订单吗&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://cangdu.org:8001/v1/cities&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;guess&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//window.event.returnValue=false放在提交表单中的onclick事件中则不会提交表单，如果放到超链接中则不执行超链接，也就是它禁止了或取消了请求，没有任何效果。</span>
    window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="七、event-cancelbubble-true-取消事件处理" tabindex="-1"><a class="header-anchor" href="#七、event-cancelbubble-true-取消事件处理" aria-hidden="true">#</a> 七、event.cancelBubble=true 取消事件处理</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>

如上结构，单击tr的时候跳转至另一页面

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span>
  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">&quot;</span></span></span>
  <span class="token special-attr"><span class="token attr-name">onmouseover</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">&#39;gainsboro&#39;</span></span><span class="token punctuation">&quot;</span></span></span>
  <span class="token special-attr"><span class="token attr-name">onmouseout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">&#39;&#39;</span></span><span class="token punctuation">&quot;</span></span></span>
  <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span>
<span class="token punctuation">&gt;</span></span>
  function Click() { window.location.href = &quot;xxx&quot;; }

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  可更改为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可以避免单击 a 标签的同时也跳转至另一页面。onclick=&quot;event.cancelBubble=true&quot; 取消事件处理。</p><p>否则单击 a 的同时会跳转另一页面。</p><h6 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析:</h6><p>取消事件冒泡，在 IE 的事件机制中，触发事件会从子元素向父元素逐级上传，就是说，如果子元素触发了单击事件，那么也会触发父元素的单击事件；event.cancelBubble=true;可以停止事件继续上传</p><p>补充一点，Ie 的事件传递是从下到上的：</p><p>事件来源对象-&gt;上级对象-&gt;上上级对象-&gt;.....-&gt;body-&gt;document-&gt;window</p><p>NS 的事件传递是从上到下：</p><ul><li>window-&gt;document-&gt;body-&gt;....-&gt;事件来源对象</li></ul><p>（event.returnValue=false 设置事件的返回值为 false,即取消事件处理）</p>`,181),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","难点总结.html.vue"]]);export{d as default};
