import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-f32a210c.js";const e={},p=t(`<h1 id="python-基础" tabindex="-1"><a class="header-anchor" href="#python-基础" aria-hidden="true">#</a> python 基础</h1><h2 id="_1-认识-python-和基础知识" tabindex="-1"><a class="header-anchor" href="#_1-认识-python-和基础知识" aria-hidden="true">#</a> 1.认识 python 和基础知识</h2><h3 id="_1-1-注释" tabindex="-1"><a class="header-anchor" href="#_1-1-注释" aria-hidden="true">#</a> 1.1 注释</h3><h4 id="_1-单行注释" tabindex="-1"><a class="header-anchor" href="#_1-单行注释" aria-hidden="true">#</a> &lt;1&gt; 单行注释</h4><p>以#开头，#右边的所有东西当做说明，而不是真正要执行的程序，起辅助说明作用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
    <span class="token comment"># 我是注释，可以在里写一些功能说明之类的哦</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-多行注释" tabindex="-1"><a class="header-anchor" href="#_2-多行注释" aria-hidden="true">#</a> &lt;2&gt; 多行注释</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token triple-quoted-string string">&#39;&#39;&#39;我是多行注释，可以写很多很多行的功能说明
    这就是我牛X指出

    哈哈哈。。。
    &#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-python-程序中-中文支持" tabindex="-1"><a class="header-anchor" href="#_3-python-程序中-中文支持" aria-hidden="true">#</a> 3. python 程序中，中文支持</h4><p>如果直接在程序中用到了中文，比如</p><pre><code>print(&#39;你好&#39;)
</code></pre><p>如果直接运行输出，程序会出错：</p><p>中文出错</p><p>解决的办法为：在程序的开头写入如下代码，这就是中文注释</p><pre><code>#coding=utf-8
</code></pre><p>修改之后的程序:</p><pre><code>#coding=utf-8
print(&#39;你好&#39;)
</code></pre><p>运行结果:</p><pre><code>你好
</code></pre><p>注意： 在 python 的语法规范中推荐使用的方式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># -*- coding:utf-8 -*-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-变量及类型" tabindex="-1"><a class="header-anchor" href="#_1-2-变量及类型" aria-hidden="true">#</a> 1.2 变量及类型</h3><ul><li>Number 数字 <ul><li>int 有符号整型</li><li>long 长整形</li><li>float 浮点型</li><li>complex 复数</li></ul></li><li>布尔类型 true false</li><li>String 字符串</li><li>List 列表</li><li>Tuple 元组</li><li>Dictionary 字典</li></ul><h4 id="查看变量的类型" tabindex="-1"><a class="header-anchor" href="#查看变量的类型" aria-hidden="true">#</a> 查看变量的类型</h4><ul><li>type 变量名</li></ul><h3 id="_1-3-标示符和关键字" tabindex="-1"><a class="header-anchor" href="#_1-3-标示符和关键字" aria-hidden="true">#</a> 1.3 标示符和关键字</h3><h4 id="_1-驼峰命名法" tabindex="-1"><a class="header-anchor" href="#_1-驼峰命名法" aria-hidden="true">#</a> &lt;1&gt; 驼峰命名法</h4><h4 id="_2-关键字" tabindex="-1"><a class="header-anchor" href="#_2-关键字" aria-hidden="true">#</a> &lt;2&gt;关键字</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">and</span>     <span class="token keyword">as</span>      <span class="token keyword">assert</span> <span class="token keyword">break</span> <span class="token keyword">class</span>      <span class="token class-name">continue</span>   <span class="token keyword">def</span>     <span class="token keyword">del</span>
<span class="token keyword">elif</span>    <span class="token keyword">else</span>    <span class="token keyword">except</span>    <span class="token keyword">exec</span>  <span class="token keyword">finally</span>   <span class="token keyword">for</span>     <span class="token keyword">from</span>   <span class="token keyword">global</span>     <span class="token keyword">if</span>      <span class="token keyword">in</span>      <span class="token keyword">import</span>    <span class="token keyword">is</span>    <span class="token keyword">lambda</span>    <span class="token keyword">not</span>     <span class="token keyword">or</span>      <span class="token keyword">pass</span>
<span class="token keyword">print</span>   <span class="token keyword">raise</span>   <span class="token keyword">return</span>    <span class="token keyword">try</span>   <span class="token keyword">while</span>     <span class="token keyword">with</span>    <span class="token keyword">yield</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过以下命令进行查看当前系统中 python 的关键字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> keyword
keyword<span class="token punctuation">.</span>kwlist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-输出" tabindex="-1"><a class="header-anchor" href="#_1-4-输出" aria-hidden="true">#</a> 1.4 输出</h3><h4 id="_1-格式化输出" tabindex="-1"><a class="header-anchor" href="#_1-格式化输出" aria-hidden="true">#</a> 1. 格式化输出</h4><h5 id="_1-格式化操作的目的" tabindex="-1"><a class="header-anchor" href="#_1-格式化操作的目的" aria-hidden="true">#</a> &lt;1&gt;格式化操作的目的</h5><p>比如有以下代码:</p><pre><code>pirnt(&quot;我今年10岁&quot;)
pirnt(&quot;我今年11岁&quot;)
pirnt(&quot;我今年12岁&quot;)
...
</code></pre><p>想一想:</p><p>在输出年龄的时候，用了多次&quot;我今年 xx 岁&quot;，能否简化一下程序呢？？？</p><p>答:</p><p>字符串格式化</p><h5 id="_2-什么是格式化" tabindex="-1"><a class="header-anchor" href="#_2-什么是格式化" aria-hidden="true">#</a> &lt;2&gt;什么是格式化</h5><p>看如下代码:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
    age <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我今年%d岁&quot;</span><span class="token operator">%</span>age<span class="token punctuation">)</span>

    age <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我今年%d岁&quot;</span><span class="token operator">%</span>age<span class="token punctuation">)</span>

    age <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我今年%d岁&quot;</span><span class="token operator">%</span>age<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序中，看到了%这样的操作符，这就是 Python 中格式化输出。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    age <span class="token operator">=</span> <span class="token number">18</span>
    name <span class="token operator">=</span> <span class="token string">&quot;xiaohua&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我的姓名是%s,年龄是%d&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-常用的格式符号" tabindex="-1"><a class="header-anchor" href="#_3-常用的格式符号" aria-hidden="true">#</a> &lt;3&gt;常用的格式符号</h5><p>下面是完整的，它可以与％符号使用列表:</p><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td>%c</td><td>字符</td></tr><tr><td>%s</td><td>通过 str() 字符串转换来格式化</td></tr><tr><td>%i</td><td>有符号十进制整数</td></tr><tr><td>%d</td><td>有符号十进制整数</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写字母）</td></tr><tr><td>%X</td><td>十六进制整数（大写字母）</td></tr><tr><td>%e</td><td>索引符号（小写&#39;e&#39;）</td></tr><tr><td>%E</td><td>索引符号（大写“E”）</td></tr><tr><td>%f</td><td>浮点实数</td></tr><tr><td>%g</td><td>％f 和％e 的简写</td></tr><tr><td>%G</td><td>％f 和％E 的简写</td></tr></tbody></table><h4 id="_2-换行输出" tabindex="-1"><a class="header-anchor" href="#_2-换行输出" aria-hidden="true">#</a> 2. 换行输出</h4><p>在输出的时候，如果有\\n 那么，此时\\n 后的内容会在另外一行显示</p><pre><code>print(&quot;1234567890-------&quot;) # 会在一行显示

print(&quot;1234567890\\n-------&quot;) # 一行显示1234567890，另外一行显示-------
</code></pre><h4 id="_3-练一练" tabindex="-1"><a class="header-anchor" href="#_3-练一练" aria-hidden="true">#</a> 3. 练一练</h4><h1 id="编写代码完成以下名片的显示" tabindex="-1"><a class="header-anchor" href="#编写代码完成以下名片的显示" aria-hidden="true">#</a> 编写代码完成以下名片的显示</h1><h1 id="姓名-donggeqq-xxxxxxx手机号-131xxxxxx公司地址-北京市-xxxx" tabindex="-1"><a class="header-anchor" href="#姓名-donggeqq-xxxxxxx手机号-131xxxxxx公司地址-北京市-xxxx" aria-hidden="true">#</a> 姓名: dongGe<br> QQ:xxxxxxx 手机号:131xxxxxx 公司地址:北京市 xxxx</h1><h3 id="_1-5-输入" tabindex="-1"><a class="header-anchor" href="#_1-5-输入" aria-hidden="true">#</a> 1.5 输入</h3><h4 id="_1-python2-版本" tabindex="-1"><a class="header-anchor" href="#_1-python2-版本" aria-hidden="true">#</a> 1.python2 版本</h4><h5 id="_1-1-raw-input" tabindex="-1"><a class="header-anchor" href="#_1-1-raw-input" aria-hidden="true">#</a> 1.1 raw_input()</h5><p>在 Python 中，获取键盘输入的数据的方法是采用 raw_input 函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> password <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码:&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&#39;您刚刚输入的密码是:&#39;</span><span class="token punctuation">,</span> password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><ul><li>raw_input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示</li><li>raw_input()在从键盘获取了数据以后，会存放到等号右边的变量中</li><li>raw_input()会把用户输入的任何值都作为字符串来对待</li><li><mark>raw_input 是 python2 中的方法，python3 中用 input 取代 raw_input</mark></li></ul><h5 id="_1-2-input" tabindex="-1"><a class="header-anchor" href="#_1-2-input" aria-hidden="true">#</a> 1.2 input()</h5><p>input()函数与 raw_input()类似，但其接受的输入必须是表达式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">123</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token number">123</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
abc
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
  File <span class="token string">&quot;&lt;string&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
NameError<span class="token punctuation">:</span> name <span class="token string">&#39;abc&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&quot;abc&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token string">&#39;abc&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1</span><span class="token operator">+</span><span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token number">4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&quot;abc&quot;</span><span class="token operator">+</span><span class="token string">&quot;def&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token string">&#39;abcdef&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> value <span class="token operator">=</span> <span class="token number">100</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
value
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>input()接受表达式输入，并把表达式的结果赋值给等号左边的变量</p><h4 id="_2-python3-版本中" tabindex="-1"><a class="header-anchor" href="#_2-python3-版本中" aria-hidden="true">#</a> 2. python3 版本中</h4><p>没有 raw_input()函数，只有 input()</p><p>并且 python3 中的 input 与 python2 中的 raw_input()功能一样</p><h3 id="_1-6-运算符" tabindex="-1"><a class="header-anchor" href="#_1-6-运算符" aria-hidden="true">#</a> 1.6 运算符</h3><ul><li><h4 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h4></li></ul><p>下面以 a=10 ,b=20 为例进行计算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加 a + b 输出结果 30</td></tr><tr><td>-</td><td>减</td><td>得到负数或是一个数减去另一个数 a - b 输出结果 -10</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td></tr><tr><td>/</td><td>除</td><td>x 除以 y b / a 输出结果 2</td></tr><tr><td>//</td><td>取整除</td><td>返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr><tr><td>%</td><td>取余</td><td>返回除法的余数 b % a 输出结果 0</td></tr><tr><td>**</td><td>幂</td><td>返回 x 的 y 次幂 a**b 为 10 的 20 次方， 输出结果 100000000000000000000</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">2.0</span>
<span class="token number">4.5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">9</span><span class="token operator">//</span><span class="token number">2.0</span>
<span class="token number">4.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值运算符 运算符 描述 实例 = 赋值运算符 把=号右边的结果给左边的变量 num=1+2*3 结果 num 的值为 7</p><ul><li><h4 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h4></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值运算符</td><td>把=号右边的结果给左边的变量 num=1+2*3 结果 num 的值为 7</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h4 id="复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#复合赋值运算符" aria-hidden="true">#</a> 复合赋值运算符</h4></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c _= a 等效于 c = c _ a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h3 id="_1-7-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_1-7-数据类型转换" aria-hidden="true">#</a> 1.7 数据类型转换</h3><h4 id="常用的数据类型转换" tabindex="-1"><a class="header-anchor" href="#常用的数据类型转换" aria-hidden="true">#</a> 常用的数据类型转换</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将 x 转换为一个整数</td></tr><tr><td>long(x [,base ])</td><td>将 x 转换为一个长整数</td></tr><tr><td>float(x )</td><td>将 x 转换到一个浮点数</td></tr><tr><td>complex(real [,imag ])</td><td>创建一个复数</td></tr><tr><td>str(x )</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x )</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str )</td><td>用来计算在字符串中的有效 Python 表达式,并返回一个对象</td></tr><tr><td>tuple(s )</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s )</td><td>将序列 s 转换为一个列表</td></tr><tr><td>chr(x )</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x )</td><td>将一个整数转换为 Unicode 字符</td></tr><tr><td>ord(x )</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x )</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x )</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><h4 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    a = &#39;100&#39; # 此时a的类型是一个字符串，里面存放了100这3个字符
    b = int(a) # 此时b的类型是整型，里面存放的是数字100

    print(&quot;a=%d&quot;%b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-if-语句" tabindex="-1"><a class="header-anchor" href="#_1-8-if-语句" aria-hidden="true">#</a> 1.8 if 语句</h3><p>if 判断语句介绍 if 语句是用来进行判断的，其使用格式如下： if 要判断的条件: 条件成立时，要做的事情 demo1:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    age <span class="token operator">=</span> <span class="token number">30</span>

    <span class="token keyword">print</span> <span class="token string">&quot;------if判断开始------&quot;</span>

    <span class="token keyword">if</span> age<span class="token operator">&gt;=</span><span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&quot;我已经成年了&quot;</span>

    <span class="token keyword">print</span> <span class="token string">&quot;------if判断结束------&quot;</span>
运行结果<span class="token punctuation">:</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断开始<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    我已经成年了
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断结束<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo2:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    age <span class="token operator">=</span> <span class="token number">16</span>

    <span class="token keyword">print</span> <span class="token string">&quot;------if判断开始------&quot;</span>

    <span class="token keyword">if</span> age<span class="token operator">&gt;=</span><span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&quot;我已经成年了&quot;</span>

    <span class="token keyword">print</span> <span class="token string">&quot;------if判断结束------&quot;</span>
运行结果<span class="token punctuation">:</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断开始<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span>判断结束<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-比较、关系运算符" tabindex="-1"><a class="header-anchor" href="#_1-9-比较、关系运算符" aria-hidden="true">#</a> 1.9 比较、关系运算符</h3><h4 id="_1-比较-即关系-运算符" tabindex="-1"><a class="header-anchor" href="#_1-比较-即关系-运算符" aria-hidden="true">#</a> &lt;1&gt; 比较(即关系)运算符</h4><p>python 中的比较运算符如下表</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>检查两个操作数的值是否相等，如果是则条件变为真。</td><td>如 a=3,b=3 则（a == b) 为 true.</td></tr><tr><td>!=</td><td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td>如 a=1,b=3 则(a != b) 为 true.</td></tr><tr><td>&lt;&gt;</td><td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。 如 a=1,b=3 则(a &lt;&gt; b) 为 true。</td><td>这个类似于 != 运算符</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</td><td>如 a=7,b=3 则(a &gt; b) 为 true.</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是，则条件成立。</td><td>如 a=7,b=3 则(a &lt; b) 为 false.</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。</td><td>如 a=3,b=3 则(a &gt;= b) 为 true.</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</td><td>如 a=3,b=3 则(a &lt;= b) 为 true.</td></tr></tbody></table><h4 id="_2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_2-逻辑运算符" aria-hidden="true">#</a> &lt;2&gt; 逻辑运算符</h4><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔&quot;或&quot; - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><h2 id="_2-判断语句和循环语句" tabindex="-1"><a class="header-anchor" href="#_2-判断语句和循环语句" aria-hidden="true">#</a> 2.判断语句和循环语句</h2><h3 id="_2-1-if-else" tabindex="-1"><a class="header-anchor" href="#_2-1-if-else" aria-hidden="true">#</a> 2.1 if-else</h3><h4 id="if-else-的使用格式" tabindex="-1"><a class="header-anchor" href="#if-else-的使用格式" aria-hidden="true">#</a> if-else 的使用格式</h4><p>demo1</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    chePiao <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 用1代表有车票，0代表没有车票</span>
    <span class="token keyword">if</span> chePiao <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;有车票，可以上火车&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;终于可以见到Ta了，美滋滋~~~&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;没有车票，不能上车&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;亲爱的，那就下次见了，一票难求啊~~~~(&gt;_&lt;)~~~~&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 1：有车票的情况</p><pre><code>有车票，可以上火车
终于可以见到Ta了，美滋滋~~~
</code></pre><p>结果 2：没有车票的情况</p><pre><code>没有车票，不能上课
亲爱的，那就下次见了，一票难求啊~~~~(&gt;_&lt;)~~~~
</code></pre><h3 id="_2-2-elif" tabindex="-1"><a class="header-anchor" href="#_2-2-elif" aria-hidden="true">#</a> 2.2 elif</h3><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    score <span class="token operator">=</span> <span class="token number">77</span>

    <span class="token keyword">if</span> score<span class="token operator">&gt;=</span><span class="token number">90</span> <span class="token keyword">and</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;本次考试，等级为A&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> score<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token keyword">and</span> score<span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;本次考试，等级为B&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> score<span class="token operator">&gt;=</span><span class="token number">70</span> <span class="token keyword">and</span> score<span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;本次考试，等级为C&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> score<span class="token operator">&gt;=</span><span class="token number">60</span> <span class="token keyword">and</span> score<span class="token operator">&lt;</span><span class="token number">70</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;本次考试，等级为D&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> score<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">and</span> score<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;本次考试，等级为E&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3while-循环" tabindex="-1"><a class="header-anchor" href="#_2-3while-循环" aria-hidden="true">#</a> 2.3while 循环</h3><h4 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> demo</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;当前是第%d次执行循环&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;i=%d&quot;</span><span class="token operator">%</span>i<span class="token punctuation">)</span>
    i<span class="token operator">+=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    当前是第<span class="token number">1</span>次执行循环
    i<span class="token operator">=</span><span class="token number">0</span>
    当前是第<span class="token number">2</span>次执行循环
    i<span class="token operator">=</span><span class="token number">1</span>
    当前是第<span class="token number">3</span>次执行循环
    i<span class="token operator">=</span><span class="token number">2</span>
    当前是第<span class="token number">4</span>次执行循环
    i<span class="token operator">=</span><span class="token number">3</span>
    当前是第<span class="token number">5</span>次执行循环
    i<span class="token operator">=</span><span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-for-循环" tabindex="-1"><a class="header-anchor" href="#_2-4-for-循环" aria-hidden="true">#</a> 2.4 for 循环</h3><p>像 while 循环一样，for 可以完成循环的功能。</p><p>在 Python 中 for 循环可以遍历任何序列的项目，如一个列表或者一个字符串等。</p><h4 id="for-循环的格式" tabindex="-1"><a class="header-anchor" href="#for-循环的格式" aria-hidden="true">#</a> for 循环的格式</h4><pre><code>for 临时变量 in 列表或者字符串等:
循环满足条件时执行的代码
else:
循环不满足条件时执行的代码
</code></pre><p>demo1</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    name <span class="token operator">=</span> <span class="token string">&#39;dongGe&#39;</span>

    <span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>d
o
n
g
G
e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo2</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>

    name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

    <span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;没有数据&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>没有数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-break-和-continue" tabindex="-1"><a class="header-anchor" href="#_2-5-break-和-continue" aria-hidden="true">#</a> 2.5 break 和 continue</h3><h4 id="_1-break" tabindex="-1"><a class="header-anchor" href="#_1-break" aria-hidden="true">#</a> 1. break</h4><h5 id="_1-for-循环" tabindex="-1"><a class="header-anchor" href="#_1-for-循环" aria-hidden="true">#</a> &lt;1&gt; for 循环</h5><p>普通的循环示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;dongGe&#39;</span>

  <span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>----
d
----
o
----
n
----
g
----
G
----
e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带有 break 的循环示例如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
  name <span class="token operator">=</span> <span class="token string">&#39;dongGe&#39;</span>

  <span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">:</span>
      <span class="token keyword">break</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-phtyon line-numbers-mode" data-ext="phtyon"><pre class="language-phtyon"><code>----
d
----
o
----
n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;2&gt; while 循环 普通的循环示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  i <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>
      i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>----
1
----
2
----
3
----
4
----
5
----
6
----
7
----
8
----
9
----
10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带有 break 的循环示例如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  i <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>
      i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>
      <span class="token keyword">break</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>----
1
----
2
----
3
----
4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小总结:</p><h5 id="break-的作用-用来结束整个循环" tabindex="-1"><a class="header-anchor" href="#break-的作用-用来结束整个循环" aria-hidden="true">#</a> break 的作用：用来结束整个循环</h5><h4 id="_2-continue" tabindex="-1"><a class="header-anchor" href="#_2-continue" aria-hidden="true">#</a> 2. continue</h4><h5 id="_1-for-循环-1" tabindex="-1"><a class="header-anchor" href="#_1-for-循环-1" aria-hidden="true">#</a> &lt;1&gt; for 循环</h5><p>带有 continue 的循环示例如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
  name <span class="token operator">=</span> <span class="token string">&#39;dongGe&#39;</span>

  <span class="token keyword">for</span> x <span class="token keyword">in</span> name<span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">:</span>
      <span class="token keyword">continue</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>----
d
----
o
----
n
----

----
G
----
e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;2&gt; while 循环 带有 continue 的循环示例如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  i <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>
      i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>
      <span class="token keyword">continue</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>----
1
----
2
----
3
----
4
----

----
6
----
7
----
8
----
9
----
10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小总结:</p><ul><li>continue 的作用：用来结束本次循环，紧接着执行下一次的循环</li></ul><h4 id="_3-注意点" tabindex="-1"><a class="header-anchor" href="#_3-注意点" aria-hidden="true">#</a> 3. 注意点</h4><h5 id="break-continue-只能用在循环中-除此以外不能单独使用" tabindex="-1"><a class="header-anchor" href="#break-continue-只能用在循环中-除此以外不能单独使用" aria-hidden="true">#</a> break/continue 只能用在循环中，除此以外不能单独使用</h5><h5 id="break-continue-在嵌套循环中-只对最近的一层循环起作用" tabindex="-1"><a class="header-anchor" href="#break-continue-在嵌套循环中-只对最近的一层循环起作用" aria-hidden="true">#</a> break/continue 在嵌套循环中，只对最近的一层循环起作用</h5><h2 id="_3-字符串、列表、元祖、字典、集合" tabindex="-1"><a class="header-anchor" href="#_3-字符串、列表、元祖、字典、集合" aria-hidden="true">#</a> 3.字符串、列表、元祖、字典、集合</h2><h3 id="_3-1-字符串下标和切片-截取" tabindex="-1"><a class="header-anchor" href="#_3-1-字符串下标和切片-截取" aria-hidden="true">#</a> 3.1 字符串下标和切片(截取)</h3><h4 id="_1-下标" tabindex="-1"><a class="header-anchor" href="#_1-下标" aria-hidden="true">#</a> 1.下标</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>   name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>

   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a
b
c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-切片" tabindex="-1"><a class="header-anchor" href="#_2-切片" aria-hidden="true">#</a> 2.切片</h4><p>切片的语法：[起始:结束:步长]</p><h5 id="注意-选取的区间属于左闭右开型-即从-起始-位开始-到-结束-位的前一位结束-不包含结束位本身-。" tabindex="-1"><a class="header-anchor" href="#注意-选取的区间属于左闭右开型-即从-起始-位开始-到-结束-位的前一位结束-不包含结束位本身-。" aria-hidden="true">#</a> 注意：选取的区间属于左闭右开型，即从&quot;起始&quot;位开始，到&quot;结束&quot;位的前一位结束（不包含结束位本身)。</h5><ul><li>步长 意思是从索引起始开始 每隔步长个元素取一次元素</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>

     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标0~2 的字符</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>

     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标为2开始到最后的字符</span>

 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">&quot;abcdef&quot;</span>
 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
 <span class="token string">&#39;abc&#39;</span>
 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
 <span class="token string">&#39;ace&#39;</span>
 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
 <span class="token string">&#39;&#39;</span>
 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
 <span class="token string">&#39;bd&#39;</span>
 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
 <span class="token string">&#39;fdb&#39;</span>
 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
 <span class="token string">&#39;fd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-字符串常见操作" tabindex="-1"><a class="header-anchor" href="#_3-2-字符串常见操作" aria-hidden="true">#</a> 3.2.字符串常见操作</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&#39;hello world itcast and itcastcpp&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-find" tabindex="-1"><a class="header-anchor" href="#_1-find" aria-hidden="true">#</a> &lt;1&gt;find</h4><p>检测 str 是否包含在 mystr 中，如果是返回开始的索引值，否则返回-1</p><ul><li>同 js 中的 indexOf</li></ul><p>mystr.find(str, start=0, end=len(mystr))</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span> <span class="token comment">#12</span>
mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-index" tabindex="-1"><a class="header-anchor" href="#_2-index" aria-hidden="true">#</a> &lt;2&gt;index</h4><p>跟 find()方法一样，只不过如果 str 不在 mystr 中会报一个异常.</p><p>mystr.index(str, start=0, end=len(mystr))</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">//</span>报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-count" tabindex="-1"><a class="header-anchor" href="#_3-count" aria-hidden="true">#</a> &lt;3&gt;count</h4><p>返回 str 在 start 和 end 之间 在 mystr 里面出现的次数</p><p>mystr.count(str, start=0, end=len(mystr))</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-replace" tabindex="-1"><a class="header-anchor" href="#_4-replace" aria-hidden="true">#</a> &lt;4&gt;replace</h4><p>把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.</p><p>mystr.replace(str1, str2, mystr.count(str1))</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[&#39;hello&#39;, &#39;world&#39;, &#39;itcast&#39;, &#39;and&#39;, &#39;itcastcpp&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#[&#39;hello&#39;, &#39;world&#39;, &#39;itcast&#39;, &#39;and itcastcpp&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-capitalize" tabindex="-1"><a class="header-anchor" href="#_6-capitalize" aria-hidden="true">#</a> &lt;6&gt;capitalize</h4><p>把字符串的第一个字符大写</p><p>mystr.capitalize()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Hello world itcast and itcastcpp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-title" tabindex="-1"><a class="header-anchor" href="#_7-title" aria-hidden="true">#</a> &lt;7&gt;title</h4><p>把字符串的每个单词首字母大写</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Hello World Itcast And Itcastcpp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-startswith" tabindex="-1"><a class="header-anchor" href="#_8-startswith" aria-hidden="true">#</a> &lt;8&gt;startswith</h4><p>检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False</p><p>mystr.startswith(obj)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-endswith" tabindex="-1"><a class="header-anchor" href="#_9-endswith" aria-hidden="true">#</a> &lt;9&gt;endswith</h4><p>检查字符串是否以 obj 结束，如果是返回 True,否则返回 False.</p><p>mystr.endswith(obj)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;itcastcpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-lower" tabindex="-1"><a class="header-anchor" href="#_10-lower" aria-hidden="true">#</a> &lt;10&gt;lower</h4><p>转换 mystr 中所有大写字符为小写</p><p>mystr.lower()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_11-upper" tabindex="-1"><a class="header-anchor" href="#_11-upper" aria-hidden="true">#</a> &lt;11&gt;upper</h4><p>转换 mystr 中的小写字母为大写</p><p>mystr.upper()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#HELLO WORLD ITCAST AND ITCASTCPP</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_12-ljust" tabindex="-1"><a class="header-anchor" href="#_12-ljust" aria-hidden="true">#</a> &lt;12&gt;ljust</h4><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p><p>mystr.ljust(width)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>strtest<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>strtest<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#39;abc       &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-rjust" tabindex="-1"><a class="header-anchor" href="#_13-rjust" aria-hidden="true">#</a> &lt;13&gt;rjust</h4><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</p><p>mystr.rjust(width)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>strtest<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#39;       abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_14-center" tabindex="-1"><a class="header-anchor" href="#_14-center" aria-hidden="true">#</a> &lt;14&gt;center</h4><p>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</p><p>mystr.center(width)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>strtest<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#39;   abc    &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_15-lstrip" tabindex="-1"><a class="header-anchor" href="#_15-lstrip" aria-hidden="true">#</a> &lt;15&gt;lstrip</h4><p>删除 mystr 左边的空白字符</p><p>mystr.lstrip()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>strtest<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_16-rstrip" tabindex="-1"><a class="header-anchor" href="#_16-rstrip" aria-hidden="true">#</a> &lt;16&gt;rstrip</h4><p>删除 mystr 字符串末尾的空白字符</p><p>mystr.rstrip()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>strtest<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_17-strip" tabindex="-1"><a class="header-anchor" href="#_17-strip" aria-hidden="true">#</a> &lt;17&gt;strip</h4><p>删除 mystr 字符串两端的空白字符</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">&quot;\\n\\t itcast \\t\\n&quot;</span>
<span class="token comment">#\\t表示空四个字符，也称缩进，就是按四下Tab键</span>
<span class="token comment">#\\n表示换行，相当于按一下回车</span>
<span class="token comment">#\\n\\t表示换行加每行空四格</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;itcast&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_18-rfind" tabindex="-1"><a class="header-anchor" href="#_18-rfind" aria-hidden="true">#</a> &lt;18&gt;rfind</h4><p>类似于 find()函数，不过是从右边开始查找.</p><p>mystr.rfind(str, start=0,end=len(mystr) )</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_19-rindex" tabindex="-1"><a class="header-anchor" href="#_19-rindex" aria-hidden="true">#</a> &lt;19&gt;rindex</h4><p>类似于 index()，不过是从右边开始.</p><p>mystr.rindex( str, start=0,end=len(mystr))</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_20-partition" tabindex="-1"><a class="header-anchor" href="#_20-partition" aria-hidden="true">#</a> &lt;20&gt;partition</h4><p>把 mystr 以 str 分割成三部分,str 前，str 和 str 后</p><p>mystr.partition(str)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">&#39;itcast&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#(&#39;hello world &#39;, &#39;itcast&#39;, &#39; and itcastcpp&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_21-rpartition" tabindex="-1"><a class="header-anchor" href="#_21-rpartition" aria-hidden="true">#</a> &lt;21&gt;rpartition</h4><p>类似于 partition()函数,不过是从右边开始.</p><p>mystr.rpartition(str)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">&#39;itcast&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#(&#39;hello world itcast and &#39;, &#39;itcast&#39;, &#39;cpp&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_22-splitlines" tabindex="-1"><a class="header-anchor" href="#_22-splitlines" aria-hidden="true">#</a> &lt;22&gt;splitlines</h4><p>按照行分隔，返回一个包含各行作为元素的列表</p><p>mystr.splitlines()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[&#39;hello world itcast and itcastcpp&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_23-isalpha" tabindex="-1"><a class="header-anchor" href="#_23-isalpha" aria-hidden="true">#</a> &lt;23&gt;isalpha</h4><p>如果 mystr 所有字符都是字母 则返回 True,否则返回 False</p><p>mystr.isalpha()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_24-isdigit" tabindex="-1"><a class="header-anchor" href="#_24-isdigit" aria-hidden="true">#</a> &lt;24&gt;isdigit</h4><p>如果 mystr 只包含数字则返回 True 否则返回 False.</p><p>mystr.isdigit()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num<span class="token operator">=</span><span class="token string">&#39;123456&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_25-isalnum" tabindex="-1"><a class="header-anchor" href="#_25-isalnum" aria-hidden="true">#</a> &lt;25&gt;isalnum</h4><p>如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False</p><p>mystr.isalnum()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_26-isspace" tabindex="-1"><a class="header-anchor" href="#_26-isspace" aria-hidden="true">#</a> &lt;26&gt;isspace</h4><p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p><p>mystr.isspace()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_27-join" tabindex="-1"><a class="header-anchor" href="#_27-join" aria-hidden="true">#</a> &lt;27&gt;join</h4><p>mystr 中每个字符后面插入 str,构造出一个新的字符串</p><p>mystr.join(str)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>test<span class="token operator">=</span><span class="token string">&#39;今天星期五&#39;</span>
space<span class="token operator">=</span><span class="token string">&quot;-&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>space<span class="token punctuation">.</span>join<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#今-天-星-期-五</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-列表的循环遍历" tabindex="-1"><a class="header-anchor" href="#_3-3-列表的循环遍历" aria-hidden="true">#</a> 3.3 列表的循环遍历</h3><h4 id="_1-使用-for-循环" tabindex="-1"><a class="header-anchor" href="#_1-使用-for-循环" aria-hidden="true">#</a> 1. 使用 for 循环</h4><p>为了更有效率的输出列表的每个数据，可以使用循环来完成</p><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;xiaoWang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoZhang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoHua&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> namesList<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    xiaoWang
    xiaoZhang
    xiaoHua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用-while-循环" tabindex="-1"><a class="header-anchor" href="#_2-使用-while-循环" aria-hidden="true">#</a> 2. 使用 while 循环</h4><p>为了更有效率的输出列表的每个数据，可以使用循环来完成</p><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;xiaoWang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoZhang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoHua&#39;</span><span class="token punctuation">]</span>

    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>namesList<span class="token punctuation">)</span>

    i <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    i<span class="token operator">+=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    xiaoWang
    xiaoZhang
    xiaoHua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-列表的常见操作" tabindex="-1"><a class="header-anchor" href="#_3-4-列表的常见操作" aria-hidden="true">#</a> 3.4 列表的常见操作</h3><p>列表中存放的数据是可以进行修改的，比如&quot;增&quot;、&quot;删&quot;、&quot;改&quot;&quot;</p><h4 id="_1-添加元素-增-append-extend-insert" tabindex="-1"><a class="header-anchor" href="#_1-添加元素-增-append-extend-insert" aria-hidden="true">#</a> &lt;1&gt;添加元素(&quot;增&quot;append, extend, insert)</h4><h5 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> append</h5><p>通过 append 可以向列表添加元素 demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
test<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
test<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token comment">#[2, 3, 4, [1, 2, 3]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="extend" tabindex="-1"><a class="header-anchor" href="#extend" aria-hidden="true">#</a> extend</h5><p>通过 extend 可以将另一个集合中的元素逐一添加到列表中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
test<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
test<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token comment"># [2, 3, 4, 1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h5><p>insert(index, object) 在指定位置 index 前插入元素 object</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改元素-改" tabindex="-1"><a class="header-anchor" href="#_2-修改元素-改" aria-hidden="true">#</a> &lt;2&gt;修改元素(&quot;改&quot;)</h4><p>修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改</p><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment">#定义变量A，默认有3个元素</span>
    A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;xiaoWang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoZhang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoHua&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-----修改之前，列表A的数据-----&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>

    <span class="token comment">#修改元素</span>
    A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;xiaoLu&#39;</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-----修改之后，列表A的数据-----&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>修改之前，列表A的数据<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    xiaoWang
    xiaoZhang
    xiaoHua
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>修改之后，列表A的数据<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    xiaoWang
    xiaoLu
    xiaoHua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-查找元素-查-in-not-in-index-count" tabindex="-1"><a class="header-anchor" href="#_3-查找元素-查-in-not-in-index-count" aria-hidden="true">#</a> &lt;3&gt;查找元素(&quot;查&quot;in, not in, index, count)</h4><p>所谓的查找，就是看看指定的元素是否存在</p><h5 id="in-not-in" tabindex="-1"><a class="header-anchor" href="#in-not-in" aria-hidden="true">#</a> in, not in</h5><p>python 中查找的常用方法为：</p><ul><li>in（存在）,如果存在那么结果为 true，否则为 false</li><li>not in（不存在），如果不存在那么结果为 true，否则 false demo</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment">#待查找的列表</span>
    nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;xiaoWang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoZhang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xiaoHua&#39;</span><span class="token punctuation">]</span>

    <span class="token comment">#获取用户要查找的名字</span>
    findName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入要查找的姓名:&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">#查找是否存在</span>
    <span class="token keyword">if</span> findName <span class="token keyword">in</span> nameList<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;在字典中找到了相同的名字&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;没有找到&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：<strong>in 的方法只要会用了，那么 not in 也是同样的用法，只不过 not in 判断的是不存在</strong></p><h5 id="index-count" tabindex="-1"><a class="header-anchor" href="#index-count" aria-hidden="true">#</a> index, count</h5><ul><li>index 和 count 与字符串中的用法相同</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 注意是左闭右开区间</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
ValueError<span class="token punctuation">:</span> <span class="token string">&#39;a&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-删除元素-删-del-pop-remove" tabindex="-1"><a class="header-anchor" href="#_4-删除元素-删-del-pop-remove" aria-hidden="true">#</a> &lt;4&gt;删除元素(&quot;删&quot;del, pop, remove)</h4><p>类比现实生活中，如果某位同学调班了，那么就应该把这个条走后的学生的姓名删除掉；在开发中经常会用到删除这种功能。</p><h5 id="列表元素的常用删除方法有" tabindex="-1"><a class="header-anchor" href="#列表元素的常用删除方法有" aria-hidden="true">#</a> 列表元素的常用删除方法有：</h5><ul><li>del：根据下标进行删除</li><li>pop：删除最后一个元素</li><li>remove：根据元素的值进行删除 demo:(del)</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;加勒比海盗&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;骇客帝国&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;第一滴血&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;指环王&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;霍比特人&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;速度与激情&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;------删除之前------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>

    <span class="token keyword">del</span> movieName<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;------删除之后------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><p>------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 指环王 霍比特人 速度与激情</p><p>demo:(pop)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;加勒比海盗&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;骇客帝国&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;第一滴血&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;指环王&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;霍比特人&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;速度与激情&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;------删除之前------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>

    movieName<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;------删除之后------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>------删除之前------
    加勒比海盗
    骇客帝国
    第一滴血
    指环王
    霍比特人
    速度与激情
------删除之后------
    加勒比海盗
    骇客帝国
    第一滴血
    指环王
    霍比特人
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:js 中 pop 和 python 中 pop 用法一致，都是删除自身最后一个元素，修改自身并返回</p><p>demo:(remove)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;加勒比海盗&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;骇客帝国&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;第一滴血&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;指环王&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;霍比特人&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;速度与激情&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;------删除之前------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>

    movieName<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;指环王&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;------删除之后------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>------删除之前------
    加勒比海盗
    骇客帝国
    第一滴血
    指环王
    霍比特人
    速度与激情
------删除之后------
    加勒比海盗
    骇客帝国
    第一滴血
    霍比特人
    速度与激情
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-排序-sort-reverse" tabindex="-1"><a class="header-anchor" href="#_5-排序-sort-reverse" aria-hidden="true">#</a> &lt;5&gt;排序(sort, reverse)</h5><p>sort 方法是将 list 按特定顺序重新排列，默认为由小到大，参数 reverse=True 可改为倒序，由大到小。</p><p>reverse 方法是将 list 逆置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>insert()</td><td>在指定位置插入一个元素</td></tr><tr><td>sort()</td><td>按特定的顺序排列（从小到大）</td></tr><tr><td>copy()</td><td>拷贝 一个副本</td></tr><tr><td>reverse（）</td><td>原地翻转所有的数据</td></tr><tr><td>clear()</td><td>清空所有元素</td></tr><tr><td>pop()</td><td>删除并返回最后一个元素</td></tr><tr><td>remove()</td><td>删除一个元素</td></tr><tr><td>exttend</td><td>拓展列表（用另一个列表）</td></tr><tr><td>append()</td><td>在最后增加一个元素</td></tr><tr><td>count()</td><td>计算并返回指定元素的数量</td></tr><tr><td>index()</td><td>寻找并返回参数的索引值</td></tr></tbody></table><h6 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h6><p>列表：可增删改</p><p>元组：不能添加、删除或修改</p><ul><li>1、类型不可改变</li><li>2、可以对元组进行操作的操作符： <ul><li>拼接操作符：+</li><li>重复操作符：*</li><li>成员操作符：in/ not in</li><li>关系操作符：&gt; &lt;</li><li>逻辑操作符：and or</li></ul></li></ul><h3 id="_3-5-列表的嵌套" tabindex="-1"><a class="header-anchor" href="#_3-5-列表的嵌套" aria-hidden="true">#</a> 3.5.列表的嵌套</h3><h4 id="random-模块" tabindex="-1"><a class="header-anchor" href="#random-模块" aria-hidden="true">#</a> random 模块</h4><h5 id="_1-random-random" tabindex="-1"><a class="header-anchor" href="#_1-random-random" aria-hidden="true">#</a> 1.random.random()</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token comment">#用于生成一个0到1的随机浮点数：0&lt;= n &lt; 1.0</span>

<span class="token keyword">import</span> random
a <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-random-uniform-a-b" tabindex="-1"><a class="header-anchor" href="#_2-random-uniform-a-b" aria-hidden="true">#</a> 2.random.uniform(a,b)</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#用于生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限。</span>
<span class="token comment">#如果a &gt; b，则生成的随机数n: a &lt;= n &lt;= b。</span>
<span class="token comment">#如果 a &lt;b， 则 b &lt;= n &lt;= a。</span>
<span class="token keyword">import</span> random
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#9.474815842579147</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#9.906754530688756</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-random-randint-a-b" tabindex="-1"><a class="header-anchor" href="#_3-random-randint-a-b" aria-hidden="true">#</a> 3.random.randint(a, b)</h5><ul><li>用于生成一个指定范围内的整数。其中参数 a 是下限，参数 b 是上限，生成的随机数 n: a &lt;= n &lt;= b</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-random-randrange-start-stop-step" tabindex="-1"><a class="header-anchor" href="#_4-random-randrange-start-stop-step" aria-hidden="true">#</a> 4.random.randrange([start], stop[, step])</h5><ul><li><p>从指定范围内，按指定基数递增的集合中 获取一个随机数。</p></li><li><p>random.randrange(10, 30, 2)，结果相当于从[10, 12, 14, 16, ... 26, 28]序列中获取一个随机数。</p></li><li><p>random.randrange(10, 30, 2)在结果上与 random.choice(range(10, 30, 2) 等效。</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-random-choice-sequence" tabindex="-1"><a class="header-anchor" href="#_5-random-choice-sequence" aria-hidden="true">#</a> 5.random.choice(sequence)</h5><ul><li><p>random.choice 从序列中获取一个随机元素。其函数原型为：random.choice(sequence)。</p></li><li><p>参数 sequence 表示一个有序类型。</p></li><li><p>这里要说明 一下：sequence 在 python 不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于 sequence。</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;javascript&#39;</span><span class="token punctuation">]</span>
str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;I love python&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-random-shuffle-x-random" tabindex="-1"><a class="header-anchor" href="#_6-random-shuffle-x-random" aria-hidden="true">#</a> 6.random.shuffle(x[, random])</h5><ul><li>用于将一个列表中的元素打乱,即将列表内的元素随机排列。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span> <span class="token punctuation">]</span>
random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-random-sample-sequence-k" tabindex="-1"><a class="header-anchor" href="#_7-random-sample-sequence-k" aria-hidden="true">#</a> 7.random.sample(sequence, k)</h5><ul><li>从指定序列中随机获取指定长度的片断并随机排列。注意：sample 函数不会修改原有序列。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>lst<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配
&#39;&#39;&#39;</span>

<span class="token comment">#encoding=utf-8</span>

<span class="token keyword">import</span> random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义一个列表用来保存-3-个办公室" tabindex="-1"><a class="header-anchor" href="#定义一个列表用来保存-3-个办公室" aria-hidden="true">#</a> 定义一个列表用来保存 3 个办公室</h4><p>offices = [[],[],[]]</p><h4 id="定义一个列表用来存储-8-位老师的名字" tabindex="-1"><a class="header-anchor" href="#定义一个列表用来存储-8-位老师的名字" aria-hidden="true">#</a> 定义一个列表用来存储 8 位老师的名字</h4><div class="language-phthon line-numbers-mode" data-ext="phthon"><pre class="language-phthon"><code>names = [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;]

i = 0
for name in names:
    index = random.randint(0,2)
    offices[index].append(name)

i = 1
for tempNames in offices:
    print(&#39;办公室%d的人数为:%d&#39;%(i,len(tempNames)))
    i+=1
    for name in tempNames:
    print(&quot;%s&quot;%name,end=&#39;&#39;)
    print(&quot;\\n&quot;)
    print(&quot;-&quot;*20)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-元祖" tabindex="-1"><a class="header-anchor" href="#_3-6-元祖" aria-hidden="true">#</a> 3.6 元祖</h3><p>Python 的元组与列表类似，不同之处在于<mark>元组的元素不能修改</mark>。元组使用小括号，列表使用方括号。</p><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>aTuple = (&#39;et&#39;,77,99.9)
print(aTuple)
#(&#39;et&#39;,77,99.9)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-访问元组" tabindex="-1"><a class="header-anchor" href="#_1-访问元组" aria-hidden="true">#</a> &lt;1&gt;访问元组</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>aTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;et&#39;</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">99.9</span><span class="token punctuation">)</span>
aTuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">#&#39;et&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改元组" tabindex="-1"><a class="header-anchor" href="#_2-修改元组" aria-hidden="true">#</a> &lt;2&gt;修改元组</h4><ul><li>python 中不允许修改元组的数据，包括不能删除其中的元素。</li><li>元组的修改 元组中的元组不允许修改 但可以合并两个元组成为一个新的元组。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>aa<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span>
bb<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span>
cc<span class="token operator">=</span>aa<span class="token operator">+</span>bb
<span class="token keyword">print</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>元组的删除 元组中的元组不允许删除 我们可以删除整个元组 删除之后就无法访问这个元组了。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> cc
<span class="token keyword">print</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span>
<span class="token comment">#报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-元祖的内置函数-count-index" tabindex="-1"><a class="header-anchor" href="#_3-元祖的内置函数-count-index" aria-hidden="true">#</a> &lt;3&gt;元祖的内置函数 count,index</h4><p>index 和 count 与字符串和列表中的用法相同</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 注意是左闭右开区间</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
ValueError<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">tuple</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-字典的常见操作" tabindex="-1"><a class="header-anchor" href="#_3-7-字典的常见操作" aria-hidden="true">#</a> 3.7 字典的常见操作</h3><h4 id="_1-修改元素" tabindex="-1"><a class="header-anchor" href="#_1-修改元素" aria-hidden="true">#</a> &lt;1&gt;修改元素</h4><p>字典的每个元素中的数据是可以修改的，只要通过 key 找到，即可修改</p><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;班长&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;地球亚洲中国北京&#39;</span><span class="token punctuation">}</span>

    newId <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入新的学号&#39;</span><span class="token punctuation">)</span>

    info<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>newId<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;修改之后的id为%d:&#39;</span><span class="token operator">%</span>info<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加元素" tabindex="-1"><a class="header-anchor" href="#_2-添加元素" aria-hidden="true">#</a> &lt;2&gt;添加元素</h4><p>demo:访问不存在的元素</p><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>    info = {&#39;name&#39;:&#39;班长&#39;, &#39;sex&#39;:&#39;f&#39;, &#39;address&#39;:&#39;地球亚洲中国北京&#39;}

    print(&#39;id为:%d&#39;%info[&#39;id&#39;])
    #报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在使用 变量名[&#39;键&#39;] = 数据 时，这个“键”在字典中，不存在，那么就会新增这个元素</p><p>demo:添加新的元素</p><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>    info = {&#39;name&#39;:&#39;班长&#39;, &#39;sex&#39;:&#39;f&#39;, &#39;address&#39;:&#39;地球亚洲中国北京&#39;}

    # print(&#39;id为:%d&#39;%info[&#39;id&#39;])#程序会终端运行，因为访问了不存在的键

    newId = input(&#39;请输入新的学号&#39;)

    info[&#39;id&#39;] = newId

    print(&#39;添加之后的id为:%d&#39;%info[&#39;id&#39;])
    #请输入新的学号188
    #添加之后的id为:188
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除元素" tabindex="-1"><a class="header-anchor" href="#_3-删除元素" aria-hidden="true">#</a> &lt;3&gt;删除元素</h4><p>对字典进行删除操作，有一下几种：</p><p>del clear() demo:del 删除指定的元素</p><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>    info = {&#39;name&#39;:&#39;班长&#39;, &#39;sex&#39;:&#39;f&#39;, &#39;address&#39;:&#39;地球亚洲中国北京&#39;}

    print(&#39;删除前,%s&#39;%info[&#39;name&#39;])

    del info[&#39;name&#39;]

    print(&#39;删除后,%s&#39;%info[&#39;name&#39;])#删除后不能访问，报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo:del 删除整个字典</p><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>
    info = {&#39;name&#39;:&#39;monitor&#39;, &#39;sex&#39;:&#39;f&#39;, &#39;address&#39;:&#39;China&#39;}

    print(&#39;删除前,%s&#39;%info)

    del info

    print(&#39;删除后,%s&#39;%info)#报错，变量名被回收
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo:clear 清空整个字典</p><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>    info = {&#39;name&#39;:&#39;monitor&#39;, &#39;sex&#39;:&#39;f&#39;, &#39;address&#39;:&#39;China&#39;}

    print(&#39;清空前,%s&#39;%info)

    info.clear()

    print(&#39;清空后,%s&#39;%info)
    #只是清空字典中的内容，变量名未被回收
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-len" tabindex="-1"><a class="header-anchor" href="#_4-len" aria-hidden="true">#</a> &lt;4&gt;len()</h4><p>测量字典中，键值对的个数,字典内容的长度</p><h4 id="_5-keys" tabindex="-1"><a class="header-anchor" href="#_5-keys" aria-hidden="true">#</a> &lt;5&gt;keys</h4><p>返回一个包含字典所有 KEY 的列表</p><h4 id="_6-values" tabindex="-1"><a class="header-anchor" href="#_6-values" aria-hidden="true">#</a> &lt;6&gt;values</h4><p>返回一个包含字典所有 value 的列表</p><h4 id="_7-items" tabindex="-1"><a class="header-anchor" href="#_7-items" aria-hidden="true">#</a> &lt;7&gt;items</h4><p>返回一个包含所有（键，值）元祖的列表</p><h4 id="_8-has-key" tabindex="-1"><a class="header-anchor" href="#_8-has-key" aria-hidden="true">#</a> &lt;8&gt;has_key</h4><p>dict.has_key(key)如果 key 在字典中，返回 True，否则返回 False</p><h4 id="_9-遍历" tabindex="-1"><a class="header-anchor" href="#_9-遍历" aria-hidden="true">#</a> &lt;9&gt;遍历</h4><p>通过 for ... in ...:的语法结构，我们可以遍历字符串、列表、元组、字典等数据结构。</p><p>注意 python 语法的缩进</p><h5 id="字符串遍历" tabindex="-1"><a class="header-anchor" href="#字符串遍历" aria-hidden="true">#</a> 字符串遍历</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_str <span class="token operator">=</span> <span class="token string">&quot;hello itcast&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> a_str<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

h e l l o i t c a s t

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="列表遍历" tabindex="-1"><a class="header-anchor" href="#列表遍历" aria-hidden="true">#</a> 列表遍历</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="元组遍历" tabindex="-1"><a class="header-anchor" href="#元组遍历" aria-hidden="true">#</a> 元组遍历</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_turple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> a_turple<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="字典遍历" tabindex="-1"><a class="header-anchor" href="#字典遍历" aria-hidden="true">#</a> 字典遍历</h5><ul><li>&lt;1&gt;遍历字典的 key</li></ul><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>dict={&quot;name&quot;:&quot;zhangsan&quot;,&quot;sex&quot;:&quot;m&quot;}
for key in dict.keys():
    print(key)
#name
#sex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&lt;2&gt;遍历字典中的 value</li></ul><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>dict={&quot;name&quot;:&quot;zhangsan&quot;,&quot;sex&quot;:&quot;m&quot;}
for value in dict.value():
    print(value)
# zhangsan
# m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&lt;3&gt;遍历字典中的项</li></ul><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>dict={&quot;name&quot;:&quot;zhangsan&quot;,&quot;sex&quot;:&quot;m&quot;}
for item in dict.items():
    print(item)
# (&quot;name&quot;:&quot;zhangsan&quot;)
# (&quot;sex&quot;:&quot;m&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&lt;4&gt;遍历字典中的 key-value</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">dict</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token comment"># name zhangsan</span>
<span class="token comment"># sex m</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="想一想-如何实现带下标索引的遍历" tabindex="-1"><a class="header-anchor" href="#想一想-如何实现带下标索引的遍历" aria-hidden="true">#</a> 想一想，如何实现带下标索引的遍历</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token builtin">chr</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">chr</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     i <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">0</span> a
<span class="token number">1</span> b
<span class="token number">2</span> c
<span class="token number">3</span> d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="enumerate" tabindex="-1"><a class="header-anchor" href="#enumerate" aria-hidden="true">#</a> enumerate()</h6><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token builtin">chr</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> i<span class="token punctuation">,</span> <span class="token builtin">chr</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">0</span> a
<span class="token number">1</span> b
<span class="token number">2</span> c
<span class="token number">3</span> d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-公共方法" tabindex="-1"><a class="header-anchor" href="#_3-8-公共方法" aria-hidden="true">#</a> 3.8 公共方法</h3><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h4><table><thead><tr><th>运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td>+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>&#39;Hi!&#39; * 4</td><td>[&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;]</td><td>复制</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr></tbody></table><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>+
&gt;&gt;&gt; &quot;hello &quot; + &quot;itcast&quot;
&#39;hello itcast&#39;
&gt;&gt;&gt; [1, 2] + [3, 4]
[1, 2, 3, 4]
&gt;&gt;&gt; (&#39;a&#39;, &#39;b&#39;) + (&#39;c&#39;, &#39;d&#39;)
(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)
*
&gt;&gt;&gt; &#39;ab&#39;*4
&#39;ababab&#39;
&gt;&gt;&gt; [1, 2]*4
[1, 2, 1, 2, 1, 2, 1, 2]
&gt;&gt;&gt; (&#39;a&#39;, &#39;b&#39;)*4
(&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;)
in
&gt;&gt;&gt; &#39;itc&#39; in &#39;hello itcast&#39;
True
&gt;&gt;&gt; 3 in [1, 2]
False
&gt;&gt;&gt; 4 in (1, 2, 3, 4)
True
&gt;&gt;&gt; &quot;name&quot; in {&quot;name&quot;:&quot;Delron&quot;, &quot;age&quot;:24}
True
#注意，in在对字典操作时，判断的是字典的键
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="python-内置函数" tabindex="-1"><a class="header-anchor" href="#python-内置函数" aria-hidden="true">#</a> python 内置函数</h4><p>Python 包含了以下内置函数</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>cmp(item1, item2)</td><td>比较两个值</td></tr><tr><td>2</td><td>len(item)</td><td>计算容器中元素个数</td></tr><tr><td>3</td><td>max(item)</td><td>返回容器中元素最大值</td></tr><tr><td>4</td><td>min(item)</td><td>返回容器中元素最小值</td></tr><tr><td>5</td><td>del(item)</td><td>删除变量</td></tr></tbody></table><h5 id="cmp" tabindex="-1"><a class="header-anchor" href="#cmp" aria-hidden="true">#</a> cmp</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span>
<span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>cmp 在比较字典数据时，先比较键，再比较值。</li><li>Python 3.X 的版本中已经没有 cmp 函数，如果你需要实现比较功能，需要引入 operator 模块，适合任何对象，包含的方法有：</li></ul><h6 id="operator-常用对照速查表" tabindex="-1"><a class="header-anchor" href="#operator-常用对照速查表" aria-hidden="true">#</a> operator 常用对照速查表</h6><table><thead><tr><th>实际操作</th><th>表达式</th><th>对应函数</th></tr></thead><tbody><tr><td>加</td><td>a + b</td><td>add(a, b)</td></tr><tr><td>串联列表</td><td>seq1 + seq2</td><td>concat(seq1, seq2)</td></tr><tr><td>查询包含</td><td>obj in seq</td><td>contains(seq, obj)</td></tr><tr><td>除</td><td>a / b</td><td>truediv(a, b)</td></tr><tr><td>除</td><td>a // b</td><td>floordiv(a, b)</td></tr><tr><td>位与</td><td>a &amp; b</td><td>and_(a, b)</td></tr><tr><td>位异或</td><td>a ^ b</td><td>xor(a, b)</td></tr><tr><td>位反</td><td>~ a</td><td>invert(a)</td></tr><tr><td>位或</td><td>a | b</td><td>or_(a, b)</td></tr><tr><td>指数</td><td>a ** b</td><td>pow(a, b)</td></tr><tr><td>判断</td><td>a is b</td><td>is_(a, b)</td></tr><tr><td>判断</td><td>a is not b</td><td>is_not(a, b)</td></tr><tr><td>索引赋值</td><td>obj[k] = v</td><td>setitem(obj, k, v)</td></tr><tr><td>索引删除</td><td>del obj[k]</td><td>delitem(obj, k)</td></tr><tr><td>索引查询</td><td>obj[k]</td><td>getitem(obj, k)</td></tr><tr><td>位左移</td><td>a &lt;&lt; b</td><td>lshift(a, b)</td></tr><tr><td>模</td><td>a % b</td><td>mod(a, b)</td></tr><tr><td>乘</td><td>a * b</td><td>mul(a, b)</td></tr><tr><td>矩阵乘（存在 bug）</td><td>a @ b</td><td>matmul(a, b)</td></tr><tr><td>算数取反</td><td>-a</td><td>neg(a)</td></tr><tr><td>逻辑取反</td><td>not a</td><td>not_(a)</td></tr><tr><td>取正</td><td>+a</td><td>pos(a)</td></tr><tr><td>位右移</td><td>a &gt;&gt; b</td><td>rshift(a, b)</td></tr><tr><td>切片赋值</td><td>seq[i:j] = values</td><td>setitem(seq, slice(i, j), values)</td></tr><tr><td>切片删除</td><td>del seq[i:j]</td><td>delitem(seq, slice(i, j))</td></tr><tr><td>切片</td><td>seq[i:j]</td><td>getitem(seq, slice(i, j))</td></tr><tr><td>格式化字符串</td><td>s % obj</td><td>mod(s, obj)</td></tr><tr><td>减</td><td>a - b</td><td>sub(a, b)</td></tr><tr><td>为真检验</td><td>obj</td><td>truth(obj)</td></tr><tr><td>大小判断</td><td>a &lt; b</td><td>lt(a, b)</td></tr><tr><td>大小判断</td><td>a &lt;= b</td><td>le(a, b)</td></tr><tr><td>相等判断</td><td>a == b</td><td>eq(a, b)</td></tr><tr><td>不等判断</td><td>a != b</td><td>ne(a, b)</td></tr><tr><td>大小判断</td><td>a &gt;= b</td><td>ge(a, b)</td></tr><tr><td>大小判断</td><td>a &gt; b</td><td>gt(a, b)</td></tr></tbody></table><h6 id="特殊操作" tabindex="-1"><a class="header-anchor" href="#特殊操作" aria-hidden="true">#</a> 特殊操作</h6><ul><li>operator.attrgetter(attr)</li><li>operator.attrgetter(*attrs)</li></ul><p><strong>调用操作（）</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> operator <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> math
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token operator">=</span>attrgetter<span class="token punctuation">(</span><span class="token string">&#39;pi&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">(</span>math<span class="token punctuation">)</span>
<span class="token number">3.141592653589793</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token operator">=</span>attrgetter<span class="token punctuation">(</span><span class="token string">&#39;pi&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">(</span>math<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3.141592653589793</span><span class="token punctuation">,</span> <span class="token number">2.718281828459045</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>operator.itemgetter(item)</li><li>operator.itemgetter(*items)</li></ul><p><strong>索引查询（[item]）</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">777</span><span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token number">777</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>operator.methodcaller(name[, args…])</li></ul><p><strong>可带参数的 attrgetter</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>After f <span class="token operator">=</span> methodcaller<span class="token punctuation">(</span>‘name’<span class="token punctuation">)</span><span class="token punctuation">,</span> the call f<span class="token punctuation">(</span>b<span class="token punctuation">)</span> returns b<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
After f <span class="token operator">=</span> methodcaller<span class="token punctuation">(</span>‘name’<span class="token punctuation">,</span> ‘foo’<span class="token punctuation">,</span> bar<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> the call f<span class="token punctuation">(</span>b<span class="token punctuation">)</span> returns b<span class="token punctuation">.</span>name<span class="token punctuation">(</span>‘foo’<span class="token punctuation">,</span> bar<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>operator.index(a) <strong>返回整数 a</strong></li><li>operator.concat(a, b) <strong>串联列表</strong></li><li>operator.delitem(a, b) <strong>列表删除元素</strong></li><li>operator.getitem(a, b) <strong>索引查询</strong></li><li>operator.indexOf(a, b) <strong>查询索引</strong></li><li>operator.setitem(a, b, c) <strong>索引赋值</strong></li><li>operator.length_hint(obj, default=0) <strong>长度查询数值运算</strong></li><li>operator.abs(obj) <strong>取绝对值</strong></li><li>operator.add(a, b) <strong>a + b</strong></li><li>operator.and_(a, b)<strong>按位与</strong></li><li>operator.floordiv(a, b)<strong>a // b</strong></li><li>operator.inv(obj) operator.invert(obj) <strong>按位取反</strong></li><li>operator.lshift(a, b)<strong>位左移</strong></li><li>operator.mod(a, b) <strong>a % b</strong></li><li>operator.mul(a, b) <strong>a * b</strong></li><li>operator.matmul(a, b) <strong>a @ b</strong></li><li>operator.neg(obj) <strong>取负</strong></li><li>operator.or_(a, b) <strong>按位或</strong></li><li>operator.pos(obj) <strong>取正</strong></li><li>operator.pow(a, b) **a ** b**</li><li>operator.rshift(a, b) <strong>位右移</strong></li><li>operator.sub(a, b) <strong>a - b</strong></li><li>operator.truediv(a, b) <strong>浮点除</strong></li><li>operator.xor(a, b) <strong>按位异或</strong></li></ol></blockquote><h5 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> len</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&quot;hello itcast&quot;</span><span class="token punctuation">)</span>
<span class="token number">12</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="注意-len-在操作字典数据时-返回的是键值对个数。" tabindex="-1"><a class="header-anchor" href="#注意-len-在操作字典数据时-返回的是键值对个数。" aria-hidden="true">#</a> 注意：len 在操作字典数据时，返回的是键值对个数。</h6><h5 id="max-返回容器中元素最大值" tabindex="-1"><a class="header-anchor" href="#max-返回容器中元素最大值" aria-hidden="true">#</a> max 返回容器中元素最大值</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token string">&quot;hello itcast&quot;</span><span class="token punctuation">)</span>
<span class="token string">&#39;t&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">522</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">522</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token string">&#39;b&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token string">&#39;b&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token string">&#39;c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="del" tabindex="-1"><a class="header-anchor" href="#del" aria-hidden="true">#</a> del</h5><ul><li>del 有两种用法，一种是 del 加空格，另一种是 del()</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> a
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
NameError<span class="token punctuation">:</span> name <span class="token string">&#39;a&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
NameError<span class="token punctuation">:</span> name <span class="token string">&#39;a&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多维列表-元祖访问的示例" tabindex="-1"><a class="header-anchor" href="#多维列表-元祖访问的示例" aria-hidden="true">#</a> 多维列表/元祖访问的示例</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
IndexError<span class="token punctuation">:</span> <span class="token builtin">tuple</span> index out of <span class="token builtin">range</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
IndexError<span class="token punctuation">:</span> <span class="token builtin">list</span> index out of <span class="token builtin">range</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple2 <span class="token operator">=</span> tuple1<span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple2
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-引用" tabindex="-1"><a class="header-anchor" href="#_3-9-引用" aria-hidden="true">#</a> 3.9 引用</h3><p>在 python 中，值是靠引用来传递来的。</p><p>我们可以用 id()来判断两个变量是否为同一个值的引用。 我们可以将 id 值理解为那块内存的地址标示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> a
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token number">13033816</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment"># 注意两个变量的id值相同</span>
<span class="token number">13033816</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># 注意a的id值已经变了</span>
<span class="token number">13033792</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment"># b的id值依旧</span>
<span class="token number">13033816</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> a
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token number">139935018544808</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token number">139935018544808</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token number">139935018544808</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>       <span class="token comment"># 注意a与b始终指向同一个地址</span>
<span class="token number">139935018544808</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可变类型与不可变类型" tabindex="-1"><a class="header-anchor" href="#可变类型与不可变类型" aria-hidden="true">#</a> 可变类型与不可变类型</h4><p>可变类型，值可以改变：</p><ul><li>列表 list</li><li>字典 dict</li></ul><p>不可变类型，值不可以改变：</p><ul><li>数值类型 int, long, bool, float</li><li>字符串 str</li><li>元组 tuple</li></ul><h3 id="_3-10-集合-set" tabindex="-1"><a class="header-anchor" href="#_3-10-集合-set" aria-hidden="true">#</a> 3.10 集合(Set)</h3><p>dict 是建立了一系列的映射关系，而 set 是建立一系列无序的，不重复的元素。</p><h4 id="_1-创建" tabindex="-1"><a class="header-anchor" href="#_1-创建" aria-hidden="true">#</a> （1）创建</h4><p>创建 set 的方式是调用 set()并传入一个 list，list 的元素将作为 set 的元素。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重复元素在 Set 中自动过滤，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加" tabindex="-1"><a class="header-anchor" href="#_2-添加" aria-hidden="true">#</a> （2）添加</h4><p>add()添加，有重复元素可以添加，但不会有效果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除" tabindex="-1"><a class="header-anchor" href="#_3-删除" aria-hidden="true">#</a> （3）删除</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-交集-并集" tabindex="-1"><a class="header-anchor" href="#_4-交集-并集" aria-hidden="true">#</a> （4）交集，并集</h4><p>set 可以看成数学意义上的无序和无重复元素的集合，因此，两个 set 可以做数学意义上的交集、并集：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S1<span class="token operator">&amp;</span>S2

<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> S1<span class="token operator">|</span>S2

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-11-list-tuple-dict-和-set-的主要区别" tabindex="-1"><a class="header-anchor" href="#_3-11-list-tuple-dict-和-set-的主要区别" aria-hidden="true">#</a> 3.11 list，tuple，dict 和 set 的主要区别</h3><h4 id="_1-list" tabindex="-1"><a class="header-anchor" href="#_1-list" aria-hidden="true">#</a> 1 .list</h4><ul><li><p>list 是一个使用方括号括起来的有序元素集合;</p></li><li><p>List 可以作为以 0 下标开始的数组,任何一个非空 list 的第一个元素总是 L[0],负数索引从 list 的尾部开始向前计数来存取元素。任何一个非空的 list 最后一个元素总是 L[-1];</p></li><li><p>有分片功能，两个 list 可以相加；</p></li><li><p>append 向 list 的末尾追加单个元素；</p></li><li><p>insert 将单个元素插入到 list 中；</p></li><li><p>extend 用来连接 list，使用一个 list 参数进行调用；</p></li><li><p>append 接受一个参数, 这个参数可以是任何数据类型, 并且简单地追加到 list 的尾部；</p></li><li><p>index 在 list 中查找一个值的首次出现并返回索引值；</p></li><li><p>要测试一个值是否在 list 内, 使用 in, 如果值存在, 它返回 True, 否则返为 False ；</p></li><li><p>remove 从 list 中删除一个值的首次出现；</p></li><li><p>pop 可以删除 list 的最后一个元素, 然后返回删除元素的值，用索引删除制定位置的值；</p></li></ul><h4 id="_2-tuple" tabindex="-1"><a class="header-anchor" href="#_2-tuple" aria-hidden="true">#</a> 2.tuple</h4><ul><li><p>tuple 是不可变的 list，创建了一个 tuple 就不能以任何方式改变它；</p></li><li><p>定义 tuple 是将整个元素集是用小括号括起来，是有序集合；</p></li><li><p>tuple 的索引与 list 一样从 0 开始,所以一个非空的 tuple 的第一个元素总是 t[0]；</p></li><li><p>负数索引与 list 一样从 tuple 的尾部开始计数；</p></li><li><p>与 list 一样分片 (slice) 也可以使用。分割一个 tuple 时, 会得到一个新的 tuple；</p></li><li><p>没有 append、extend、remove 或 pop 方法以及 index 方法；</p></li><li><p>可以使用 in 来查看一个元素是否存在于 tuple 中。</p></li></ul><h4 id="_3-dict" tabindex="-1"><a class="header-anchor" href="#_3-dict" aria-hidden="true">#</a> 3.dict</h4><ul><li><p>dict 定义了键和值之间的一一对应关系，每个元素都是一个 key-value 对；</p></li><li><p>整个元素集合用大括号括起来，有序集合；</p></li><li><p>可以通过 key 得到 value, 但不能通过 vaule 获取 key；</p></li><li><p>在一个 dict 中不能有重复的 key, 并且 key 是大小写敏感的；</p></li><li><p>键可以是数字、字符串或者是元组等不可变类型；</p></li><li><p>用 del 使用 key 可以删除 dict 中的独立元素；</p></li><li><p>用 clear 可以清除 dict 中的所有元素。</p></li></ul><h4 id="_4-set" tabindex="-1"><a class="header-anchor" href="#_4-set" aria-hidden="true">#</a> 4.set</h4><ul><li><p>set 是建立一系列无序的，不重复的元素；</p></li><li><p>创建 set 的方式是调用 set()并传入一个 list，list 的元素将作为 set 的元素；</p></li><li><p>set 和 dict 的唯一区别仅在于没有存储对应的 value。</p></li></ul><h2 id="_4-函数" tabindex="-1"><a class="header-anchor" href="#_4-函数" aria-hidden="true">#</a> 4.函数</h2><h3 id="_4-1-函数定义和调用" tabindex="-1"><a class="header-anchor" href="#_4-1-函数定义和调用" aria-hidden="true">#</a> 4.1 函数定义和调用</h3><h4 id="_1-定义函数" tabindex="-1"><a class="header-anchor" href="#_1-定义函数" aria-hidden="true">#</a> &lt;1&gt;定义函数</h4><p>定义函数的格式如下： def 函数名(): 代码 demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个函数，能够完成打印信息的功能</span>
    <span class="token keyword">def</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&#39;------------------------------------&#39;</span>
    <span class="token keyword">print</span> <span class="token string">&#39;     人生苦短，我用Python&#39;</span>
    <span class="token keyword">print</span> <span class="token string">&#39;------------------------------------&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-调用函数" tabindex="-1"><a class="header-anchor" href="#_2-调用函数" aria-hidden="true">#</a> &lt;2&gt;调用函数</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-局部变量和全局变量" tabindex="-1"><a class="header-anchor" href="#_4-2-局部变量和全局变量" aria-hidden="true">#</a> 4.2.局部变量和全局变量</h3><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4><ul><li>局部变量，就是在函数内部定义的变量</li><li>不同的函数，可以定义相同的名字的局部变量，但是各用个的不会产生影响</li><li>局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储，这就是它的作用</li></ul><h4 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h4><ul><li>在函数中不使用 global 声明全局变量时不能修改全局变量的本质是不能修改全局变量的指向，即不能将全局变量指向新的数据。</li><li>对于不可变类型的全局变量来说，因其指向的数据不能修改，所以不使用 global 时无法修改全局变量。</li><li>对于可变类型的全局变量来说，因其指向的数据可以修改，所以不使用 global 时也可修改全局变量。</li></ul><h3 id="_4-3-函数参数" tabindex="-1"><a class="header-anchor" href="#_4-3-函数参数" aria-hidden="true">#</a> 4.3 函数参数</h3><h4 id="_1-缺省参数" tabindex="-1"><a class="header-anchor" href="#_1-缺省参数" aria-hidden="true">#</a> 1. 缺省参数</h4><p>调用函数时，缺省参数的值如果没有传入，则被认为是默认值。下例会打印默认的 age，如果 age 没有被传入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token comment"># 打印任何传入的字符串</span>
   <span class="token keyword">print</span> <span class="token string">&quot;Name: &quot;</span><span class="token punctuation">,</span> name
   <span class="token keyword">print</span> <span class="token string">&quot;Age &quot;</span><span class="token punctuation">,</span> age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="调用-printinfo-函数" tabindex="-1"><a class="header-anchor" href="#调用-printinfo-函数" aria-hidden="true">#</a> 调用 printinfo 函数</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>printinfo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;miki&quot;</span> <span class="token punctuation">)</span>
printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&quot;miki&quot;</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="以上实例输出结果" tabindex="-1"><a class="header-anchor" href="#以上实例输出结果" aria-hidden="true">#</a> 以上实例输出结果：</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Name<span class="token punctuation">:</span>  miki
Age  <span class="token number">35</span>
Name<span class="token punctuation">:</span>  miki
Age  <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：带有默认值的参数一定要位于参数列表的最后面。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> name
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span>
SyntaxError<span class="token punctuation">:</span> non<span class="token operator">-</span>default argument follows default argument
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-不定长参数" tabindex="-1"><a class="header-anchor" href="#_2-不定长参数" aria-hidden="true">#</a> 2.不定长参数</h4><p>有时可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，声明时不会命名。</p><p>基本语法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token string">&quot;函数_文档字符串&quot;</span>
       function_suite
       <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加了星号*的变量 args 会存放所有未命名的变量参数，args 为元组；</p><p>而加**的变量 kwargs 会存放命名参数，即形如 key=value 的参数， kwargs 为字典。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>dist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span>

demo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
<span class="token comment"># (1, 2, 3)</span>
<span class="token comment"># {&#39;name&#39;: &#39;zs&#39;, &#39;age&#39;: 18}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-引用传参" tabindex="-1"><a class="header-anchor" href="#_3-引用传参" aria-hidden="true">#</a> 3. 引用传参</h4><p>可变类型与不可变类型的变量分别作为函数参数时，会有什么不同吗？ Python 有没有类似 C 语言中的指针传参呢？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">selfAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token triple-quoted-string string">&quot;&quot;&quot;自增&quot;&quot;&quot;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">+=</span> a
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_int <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_int
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selfAdd<span class="token punctuation">(</span>a_int<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_int
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_list
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selfAdd<span class="token punctuation">(</span>a_list<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_list
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中函数参数是引用传递（注意不是值传递）。</p><ul><li>对于不可变类型，因变量不能修改，所以运算不会影响到变量自身；</li><li>而对于可变类型来说，函数体中的运算有可能会更改传入的参数变量。</li></ul><h3 id="_4-4-局部变量、全局变量" tabindex="-1"><a class="header-anchor" href="#_4-4-局部变量、全局变量" aria-hidden="true">#</a> 4.4 局部变量、全局变量</h3><h4 id="_1-局部变量" tabindex="-1"><a class="header-anchor" href="#_1-局部变量" aria-hidden="true">#</a> 1.局部变量</h4><ul><li>局部变量，就是在函数内部定义的变量</li><li>不同的函数，可以定义相同的名字的局部变量，但是各用个的不会产生影响</li><li>局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储，这就是它的作用</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token operator">=</span><span class="token number">100</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token operator">=</span><span class="token number">300</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
     test<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#100</span>
     test2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-全局变量" tabindex="-1"><a class="header-anchor" href="#_2-全局变量" aria-hidden="true">#</a> 2.全局变量</h4><p>&lt;1&gt;什么是全局变量</p><ul><li>如果一个变量，既能在一个函数中使用，也能在其他的函数中使用，这样的变量就是全局变量</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义全局变量</span>
    a <span class="token operator">=</span> <span class="token number">100</span>

    <span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

    <span class="token comment"># 调用函数</span>
    test1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#100</span>
    test2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;2&gt;全局变量和局部变量名字相同问题 看如下代码:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义全局变量</span>
    a <span class="token operator">=</span> <span class="token number">100</span>

    <span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token operator">=</span><span class="token number">300</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;=test1=修改前==%d&quot;</span><span class="token operator">%</span>a<span class="token punctuation">)</span>
    a<span class="token operator">=</span><span class="token number">100</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;=test1=修改后==%d&quot;</span><span class="token operator">%</span>a<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;=test3=========%d&quot;</span><span class="token operator">%</span>a<span class="token punctuation">)</span>

    <span class="token comment"># 调用函数</span>
    test1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#100</span>
    test2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;3&gt;修改全局变量</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    a <span class="token operator">=</span> <span class="token number">1</span>
     <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> a
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    f<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#报错</span>
    a<span class="token operator">=</span><span class="token number">100</span>
    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> a
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----修改前-----%d&#39;</span><span class="token operator">%</span>a<span class="token punctuation">)</span> <span class="token comment">#100</span>
    a<span class="token operator">=</span><span class="token number">300</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----修改后-----%d&#39;</span><span class="token operator">%</span>a<span class="token punctuation">)</span> <span class="token comment">#300</span>
    <span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----test1-----%d&#39;</span><span class="token operator">%</span>a<span class="token punctuation">)</span> <span class="token comment">#300</span>
    test<span class="token punctuation">(</span><span class="token punctuation">)</span>
    test1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#在函数中不使用global声明全局变量时不能修改全局变量的本质是不能修改全局变量的指向，即不能将全局变量指向新的数据。</span>
<span class="token comment"># 对于不可变类型的全局变量来说，因其指向的数据不能修改，所以不使用global时无法修改全局变量。</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> li
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> li
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于可变类型的全局变量来说，因其指向的数据可以修改，所以不使用 global 时也可修改全局变量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> li
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> li
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-文件操作" tabindex="-1"><a class="header-anchor" href="#_5-文件操作" aria-hidden="true">#</a> 5.文件操作</h2><h3 id="_5-1-文件的打开与关闭" tabindex="-1"><a class="header-anchor" href="#_5-1-文件的打开与关闭" aria-hidden="true">#</a> 5.1 文件的打开与关闭</h3><h4 id="_1-打开文件" tabindex="-1"><a class="header-anchor" href="#_1-打开文件" aria-hidden="true">#</a> &lt;1&gt;打开文件</h4><p>在 python，使用 open 函数，可以打开一个已经存在的文件，或者创建一个新文件</p><p>open(文件名，访问模式)</p><p>示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h4 id="_2-关闭文件" tabindex="-1"><a class="header-anchor" href="#_2-关闭文件" aria-hidden="true">#</a> &lt;2&gt;关闭文件</h4><p>close( )</p><p>示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 新建一个文件，文件名为:test.txt</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 关闭这个文件</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-文件的读写" tabindex="-1"><a class="header-anchor" href="#_5-2-文件的读写" aria-hidden="true">#</a> 5.2 文件的读写</h3><h4 id="_1-写数据-write" tabindex="-1"><a class="header-anchor" href="#_1-写数据-write" aria-hidden="true">#</a> &lt;1&gt;写数据(write)</h4><p>使用 write()可以完成向文件写入数据</p><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;hello world, i am here!&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行现象: hello world, i am here!</p><ul><li>注意：如果文件不存在那么创建，如果存在那么就先清空，然后写入数据</li></ul><h4 id="_2-读数据-read" tabindex="-1"><a class="header-anchor" href="#_2-读数据-read" aria-hidden="true">#</a> &lt;2&gt;读数据(read)</h4><p>使用 read(num)可以从文件中读取数据，num 表示要从文件中读取的数据的长度（单位是字节），如果没有传入 num，那么就表示读取文件中所有的数据</p><p>demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>

content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>

content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>

f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行现象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>hello
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
world<span class="token punctuation">,</span> i am here!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>如果 open 是打开一个文件，那么可以不用谢打开的模式，即只写 open(&#39;test.txt&#39;)</li><li>如果使用读了多次，那么后面读取的数据是从上次读完后的位置开始的</li></ul><h4 id="_3-读数据-readlines" tabindex="-1"><a class="header-anchor" href="#_3-读数据-readlines" aria-hidden="true">#</a> &lt;3&gt;读数据（readlines）</h4><p>就像 read 没有参数时一样，readlines 可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#coding=utf-8</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>

content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>

i<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">for</span> temp <span class="token keyword">in</span> content<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%d:%s&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span>
    i<span class="token operator">+=</span><span class="token number">1</span>

f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行现象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">type</span> <span class="token string">&#39;list&#39;</span>
<span class="token number">1</span><span class="token punctuation">:</span><span class="token string">&#39;hello world, i am here!&#39;</span><span class="token punctuation">,</span>
<span class="token number">2</span><span class="token punctuation">:</span><span class="token string">&#39;hello world, i am here!&#39;</span><span class="token punctuation">,</span>
<span class="token number">3</span><span class="token punctuation">:</span><span class="token string">&#39;hello world, i am here!&#39;</span><span class="token punctuation">,</span>
<span class="token number">4</span><span class="token punctuation">:</span><span class="token string">&#39;hello world, i am here!&#39;</span><span class="token punctuation">,</span>
<span class="token number">5</span><span class="token punctuation">:</span><span class="token string">&#39;hello world, i am here!&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-读数据-readline" tabindex="-1"><a class="header-anchor" href="#_4-读数据-readline" aria-hidden="true">#</a> &lt;4&gt;读数据（readline）</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#coding=utf-8</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>

content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1:%s&quot;</span><span class="token operator">%</span>content<span class="token punctuation">)</span>

content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;2:%s&quot;</span><span class="token operator">%</span>content<span class="token punctuation">)</span>


f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-制作文件的备份" tabindex="-1"><a class="header-anchor" href="#_5-3-制作文件的备份" aria-hidden="true">#</a> 5.3 制作文件的备份</h3><ul><li>任务描述:输入文件的名字，然后程序自动完成对文件进行备份</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#coding=utf-8</span>

oldFileName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入要拷贝的文件名字:&quot;</span><span class="token punctuation">)</span>

oldFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>oldFileName<span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 如果打开文件</span>
<span class="token keyword">if</span> oldFile<span class="token punctuation">:</span>

    <span class="token comment"># 提取文件的后缀</span>
    fileFlagNum <span class="token operator">=</span> oldFileName<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> fileFlagNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    fileFlag <span class="token operator">=</span> oldFileName<span class="token punctuation">[</span>fileFlagNum<span class="token punctuation">:</span><span class="token punctuation">]</span>

    <span class="token comment"># 组织新的文件名字</span>
    newFileName <span class="token operator">=</span> oldFileName<span class="token punctuation">[</span><span class="token punctuation">:</span>fileFlagNum<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;[复件]&#39;</span> <span class="token operator">+</span> fileFlag

    <span class="token comment"># 创建新文件</span>
    newFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>newFileName<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 把旧文件中的数据，一行一行的进行复制到新文件中</span>
    <span class="token keyword">for</span> lineContent <span class="token keyword">in</span> oldFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    newFile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>lineContent<span class="token punctuation">)</span>

    <span class="token comment"># 关闭文件</span>
    oldFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    newFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-文件的随机读写" tabindex="-1"><a class="header-anchor" href="#_5-4-文件的随机读写" aria-hidden="true">#</a> 5.4 文件的随机读写</h3><h4 id="_1-获取当前读写的位置" tabindex="-1"><a class="header-anchor" href="#_1-获取当前读写的位置" aria-hidden="true">#</a> &lt;1&gt;获取当前读写的位置</h4><p>在读写文件的过程中，如果想知道当前的位置，可以使用 tell()来获取</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 打开一个已经存在的文件</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;读取的数据是 : &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span>

    <span class="token comment"># 查找当前位置</span>
    position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;当前文件位置 : &quot;</span><span class="token punctuation">,</span> position

    <span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;读取的数据是 : &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span>

    <span class="token comment"># 查找当前位置</span>
    position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;当前文件位置 : &quot;</span><span class="token punctuation">,</span> position

    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-定位到某个位置" tabindex="-1"><a class="header-anchor" href="#_2-定位到某个位置" aria-hidden="true">#</a> &lt;2&gt;定位到某个位置</h4><p>如果在读写文件的过程中，需要从另外一个位置进行操作的话，可以使用 seek()</p><ul><li>seek(offset, from)有 2 个参数 - offset:偏移量 - from:方向 - 0:表示文件开头 - 1:表示当前位置 - 2:表示文件末尾 demo:把位置设置为：从文件开头，偏移 5 个字节</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 打开一个已经存在的文件</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;读取的数据是 : &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-文件的重命名、删除" tabindex="-1"><a class="header-anchor" href="#_5-5-文件的重命名、删除" aria-hidden="true">#</a> 5.5 文件的重命名、删除</h3><p>有些时候，需要对文件进行重命名、删除等一些操作，python 的 os 模块中都有这么功能</p><h4 id="_1-文件重命名" tabindex="-1"><a class="header-anchor" href="#_1-文件重命名" aria-hidden="true">#</a> &lt;1&gt;文件重命名</h4><ul><li>os 模块中的 rename()可以完成对文件的重命名操作</li><li>rename(需要修改的文件名, 新的文件名)</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">&quot;毕业论文.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;毕业论文-最终版.txt&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-删除文件" tabindex="-1"><a class="header-anchor" href="#_2-删除文件" aria-hidden="true">#</a> &lt;2&gt;删除文件</h4><ul><li><p>os 模块中的 remove()可以完成对文件的删除操作</p></li><li><p>remove(待删除的文件名)</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;毕业论文.txt&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 查找当前位置</span>
    position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;当前文件位置 : &quot;</span><span class="token punctuation">,</span> position

    <span class="token comment"># 重新设置位置</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token comment"># 查找当前位置</span>
    position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;当前文件位置 : &quot;</span><span class="token punctuation">,</span> position

    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo:把位置设置为：离文件末尾，3 字节处</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 打开一个已经存在的文件</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 查找当前位置</span>
    position <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;当前文件位置 : &quot;</span><span class="token punctuation">,</span> position

    <span class="token comment"># 重新设置位置</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token comment"># 读取到的数据为：文件最后3个字节数据</span>
    <span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;读取的数据是 : &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span>

    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-文件夹的相关操作" tabindex="-1"><a class="header-anchor" href="#_5-6-文件夹的相关操作" aria-hidden="true">#</a> 5.6 文件夹的相关操作</h3><ul><li><p>实际开发中，有时需要用程序的方式对文件夹进行一定的操作，比如创建、删除等</p></li><li><p>就像对文件操作需要 os 模块一样，如果要操作文件夹，同样需要 os 模块</p></li></ul><h4 id="_1-创建文件夹" tabindex="-1"><a class="header-anchor" href="#_1-创建文件夹" aria-hidden="true">#</a> &lt;1&gt;创建文件夹</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-获取当前目录" tabindex="-1"><a class="header-anchor" href="#_2-获取当前目录" aria-hidden="true">#</a> &lt;2&gt;获取当前目录</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-改变默认目录" tabindex="-1"><a class="header-anchor" href="#_3-改变默认目录" aria-hidden="true">#</a> &lt;3&gt;改变默认目录</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">&quot;../&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-获取目录列表" tabindex="-1"><a class="header-anchor" href="#_4-获取目录列表" aria-hidden="true">#</a> &lt;4&gt;获取目录列表</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-删除文件夹" tabindex="-1"><a class="header-anchor" href="#_5-删除文件夹" aria-hidden="true">#</a> &lt;5&gt;删除文件夹</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">import</span> os

    os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-7-批量修改文件名" tabindex="-1"><a class="header-anchor" href="#_5-7-批量修改文件名" aria-hidden="true">#</a> 5.7 批量修改文件名</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token comment">#coding=utf-8</span>

    <span class="token comment"># 批量在文件名前加前缀</span>

    <span class="token keyword">import</span> os

    funFlag <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 1表示添加标志  2表示删除标志</span>

    folderName <span class="token operator">=</span> <span class="token string">&#39;./renameDir/&#39;</span>

    <span class="token comment"># 获取指定路径的所有文件名字</span>
    dirList <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folderName<span class="token punctuation">)</span>

    <span class="token comment"># 遍历输出所有文件名字</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> dirList<span class="token punctuation">:</span>
    <span class="token keyword">print</span> name

    <span class="token keyword">if</span> funFlag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        newName <span class="token operator">=</span> <span class="token string">&#39;[东哥出品]-&#39;</span> <span class="token operator">+</span> name
    <span class="token keyword">elif</span> funFlag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&#39;[东哥出品]-&#39;</span><span class="token punctuation">)</span>
        newName <span class="token operator">=</span> name<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span> newName

    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>folderName<span class="token operator">+</span>name<span class="token punctuation">,</span> folderName<span class="token operator">+</span>newName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-面向对象" tabindex="-1"><a class="header-anchor" href="#_6-面向对象" aria-hidden="true">#</a> 6.面向对象</h2><h3 id="_6-1-定义类" tabindex="-1"><a class="header-anchor" href="#_6-1-定义类" aria-hidden="true">#</a> 6.1 定义类</h3><p>定义一个类，格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class 类名:
    方法列表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>demo：定义一个 Car 类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义类</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>
    <span class="token comment"># 方法</span>
    <span class="token keyword">def</span> <span class="token function">getCarInfo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;车轮子个数:%d, 颜色%s&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>wheelNum<span class="token punctuation">,</span> self<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;车正在移动...&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong>：</p><ul><li>定义类时有 2 种：新式类和经典类，上面的 Car 为经典类，如果是 Car(object)则为新式类</li><li>类名 的命名规则按照&quot;大驼峰&quot;</li></ul><h3 id="_6-2-创建对象-类实例化" tabindex="-1"><a class="header-anchor" href="#_6-2-创建对象-类实例化" aria-hidden="true">#</a> 6.2 创建对象(类实例化)</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>创建对象的格式为:

对象名 = 类名()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建对象 demo:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义类</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>
    <span class="token comment"># 移动</span>
    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;车在奔跑...&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 鸣笛</span>
    <span class="token keyword">def</span> <span class="token function">toot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;车在鸣笛...嘟嘟..&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 创建一个对象，并用变量BMW来保存它的引用</span>
BMW <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token punctuation">)</span>
BMW<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;黑色&#39;</span>
BMW<span class="token punctuation">.</span>wheelNum <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">#轮子数量</span>
BMW<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token punctuation">)</span>
BMW<span class="token punctuation">.</span>toot<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>BMW<span class="token punctuation">.</span>color<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>BMW<span class="token punctuation">.</span>wheelNum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3init-方法" tabindex="-1"><a class="header-anchor" href="#_6-3init-方法" aria-hidden="true">#</a> 6.3<strong>init</strong>()方法</h3><p>&lt;1&gt;<strong>init</strong>()方法的调用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义汽车类</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>wheelNum <span class="token operator">=</span> <span class="token number">4</span>
    self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;蓝色&#39;</span>

    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;车在跑，目标:夏威夷&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 创建对象</span>
BMW <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;车的颜色为:%s&#39;</span><span class="token operator">%</span>BMW<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">#车的颜色为:</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;车轮胎数量为:%d&#39;</span><span class="token operator">%</span>BMW<span class="token punctuation">.</span>wheelNum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4str-方法" tabindex="-1"><a class="header-anchor" href="#_6-4str-方法" aria-hidden="true">#</a> 6.4<strong>str</strong>()方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> newWheelNum<span class="token punctuation">,</span> newColor<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>wheelNum <span class="token operator">=</span> newWheelNum
    self<span class="token punctuation">.</span>color <span class="token operator">=</span> newColor

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    msg <span class="token operator">=</span> <span class="token string">&quot;嘿。。。我的颜色是&quot;</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">&quot;我有&quot;</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>wheelNum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;个轮胎...&quot;</span>
    <span class="token keyword">return</span> msg

    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;车在跑，目标:夏威夷&#39;</span><span class="token punctuation">)</span>


BMW <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;白色&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>BMW<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-self" tabindex="-1"><a class="header-anchor" href="#_6-5-self" aria-hidden="true">#</a> 6.5 self</h3><ul><li>所谓的 self，可以理解为自己</li><li>可以把 self 当做 C++中类里面的 this 指针一样理解，就是对象自身的意思</li><li>某个对象调用其方法时，python 解释器会把这个对象作为第一个参数传递给 self，所以开发者只需要传递后面的参数即可</li></ul><h3 id="_6-6del-方法" tabindex="-1"><a class="header-anchor" href="#_6-6del-方法" aria-hidden="true">#</a> 6.6<strong>del</strong>()方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token comment">#创建对象后，python解释器默认调用__init__()方法；</span>

<span class="token comment">#当删除一个对象时，python解释器也会默认调用一个方法，这个方法为__del__()方法</span>
<span class="token keyword">import</span> time
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment"># 初始化方法</span>
    <span class="token comment"># 创建完对象后会自动被调用</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;__init__方法被调用&#39;</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name


    <span class="token comment"># 析构方法</span>
    <span class="token comment"># 当对象被删除时，会自动被调用</span>
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__del__方法被调用&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s对象马上被干掉了...&quot;</span><span class="token operator">%</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>

<span class="token comment"># 创建对象</span>
dog <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token string">&quot;哈皮狗&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 删除对象</span>
<span class="token keyword">del</span> dog


cat <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token string">&quot;波斯猫&quot;</span><span class="token punctuation">)</span>
cat2 <span class="token operator">=</span> cat
cat3 <span class="token operator">=</span> cat

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---马上 删除cat对象&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> cat
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---马上 删除cat2对象&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> cat2
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---马上 删除cat3对象&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> cat3

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;程序2秒钟后结束&quot;</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

__init__方法被调用
__del__方法被调用
<span class="token comment">#哈皮狗对象马上被干掉了...</span>
<span class="token comment">#__init__方法被调用</span>
<span class="token comment">#---马上 删除cat对象</span>
<span class="token comment">#---马上 删除cat2对象</span>
<span class="token comment">#---马上 删除cat3对象</span>
<span class="token comment">#__del__方法被调用</span>
<span class="token comment">#波斯猫对象马上被干掉了...</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-7-单继承" tabindex="-1"><a class="header-anchor" href="#_6-7-单继承" aria-hidden="true">#</a> 6.7 单继承</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;动物&#39;</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;白色&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
    self<span class="token punctuation">.</span>color <span class="token operator">=</span> color

    <span class="token keyword">def</span> <span class="token function">__test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>color<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>color<span class="token punctuation">)</span>



<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dogTest1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#print(self.__name) #不能访问到父类的私有属性</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>color<span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">dogTest2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#self.__test() #不能访问父类中的私有方法</span>
    self<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>


A <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#print(A.__name) #程序出现异常，不能访问私有属性</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>color<span class="token punctuation">)</span>
<span class="token comment">#A.__test() #程序出现异常，不能访问私有方法</span>
A<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;------分割线-----&quot;</span><span class="token punctuation">)</span>

D <span class="token operator">=</span> Dog<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;小花狗&quot;</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&quot;黄色&quot;</span><span class="token punctuation">)</span>
D<span class="token punctuation">.</span>dogTest1<span class="token punctuation">(</span><span class="token punctuation">)</span>
D<span class="token punctuation">.</span>dogTest2<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>私有的属性，不能通过对象直接访问，但是可以通过方法访问</li><li>私有的方法，不能通过对象直接访问</li><li>私有的属性、方法，不会被子类继承，也不能被访问</li><li>一般情况下，私有的属性、方法都是不对外公布的，往往用来做内部的事情，起到安全的作用</li></ul><h3 id="_6-8-多继承" tabindex="-1"><a class="header-anchor" href="#_6-8-多继承" aria-hidden="true">#</a> 6.8 多继承</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个父类</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">printA</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----A----&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 定义一个父类</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">printB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----B----&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 定义一个子类，继承自A、B</span>
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">printC</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----C----&#39;</span><span class="token punctuation">)</span>

obj_C <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>
obj_C<span class="token punctuation">.</span>printA<span class="token punctuation">(</span><span class="token punctuation">)</span>
obj_C<span class="token punctuation">.</span>printB<span class="token punctuation">(</span><span class="token punctuation">)</span>
运行结果<span class="token punctuation">:</span>

<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>A<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>B<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-9-重写父类方法与调用父类方法" tabindex="-1"><a class="header-anchor" href="#_6-9-重写父类方法与调用父类方法" aria-hidden="true">#</a> 6.9 重写父类方法与调用父类方法</h3><p>&lt;1&gt; 重写父类方法 所谓重写，就是子类中，有一个和父类相同名字的方法，在子类中的方法会覆盖掉父类中同名的方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#coding=utf-8</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;halou-----1&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Bosi</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;halou-----2&quot;</span><span class="token punctuation">)</span>

bosi <span class="token operator">=</span> Bosi<span class="token punctuation">(</span><span class="token punctuation">)</span>

bosi<span class="token punctuation">.</span>sayHello<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#halou-----2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;2&gt;调用父类的方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#coding=utf-8</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;yellow&#39;</span>


<span class="token keyword">class</span> <span class="token class-name">Bosi</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 调用父类的__init__方法1(python2)</span>
    <span class="token comment">#Cat.__init__(self,name)</span>
    <span class="token comment"># 调用父类的__init__方法2</span>
    <span class="token comment">#super(Bosi,self).__init__(name)</span>
    <span class="token comment"># 调用父类的__init__方法3</span>
    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>name

bosi <span class="token operator">=</span> Bosi<span class="token punctuation">(</span><span class="token string">&#39;xiaohua&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>bosi<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">#xiaohua</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bosi<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">#yellow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-10-多态" tabindex="-1"><a class="header-anchor" href="#_6-10-多态" aria-hidden="true">#</a> 6.10 多态</h3><p>多态的概念是应用于 Java 和 C#这一类强类型语言中，而 Python 崇尚“鸭子类型”。</p><p>所谓多态：定义时的类型和运行时的类型不一样，此时就成为多态</p><p>Python 伪代码实现 Java 或 C#的多态</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">F1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&#39;F1.show&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">S1</span><span class="token punctuation">(</span>F1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&#39;S1.show&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">S2</span><span class="token punctuation">(</span>F1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&#39;S2.show&#39;</span>

<span class="token comment"># 由于在Java或C#中定义函数参数时，必须指定参数的类型</span>
<span class="token comment"># 为了让Func函数既可以执行S1对象的show方法，又可以执行S2对象的show方法，所以，定义了一个S1和S2类的父类</span>
<span class="token comment"># 而实际传入的参数是：S1对象和S2对象</span>

<span class="token keyword">def</span> <span class="token function">Func</span><span class="token punctuation">(</span>F1 obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Func函数需要接收一个F1类型或者F1子类的类型&quot;&quot;&quot;</span>

    <span class="token keyword">print</span> obj<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

s1_obj <span class="token operator">=</span> S1<span class="token punctuation">(</span><span class="token punctuation">)</span>
Func<span class="token punctuation">(</span>s1_obj<span class="token punctuation">)</span> <span class="token comment"># 在Func函数中传入S1类的对象 s1_obj，执行 S1 的show方法，结果：S1.show</span>

s2_obj <span class="token operator">=</span> S2<span class="token punctuation">(</span><span class="token punctuation">)</span>
Func<span class="token punctuation">(</span>s2_obj<span class="token punctuation">)</span> <span class="token comment"># 在Func函数中传入Ss类的对象 ss_obj，执行 Ss 的show方法，结果：S2.show</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,658),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","python.html.vue"]]);export{d as default};
