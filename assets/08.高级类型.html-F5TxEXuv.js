const e=JSON.parse(`{"key":"v-39c42018","path":"/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%9F%B3/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html","title":"高级类型","lang":"zh-CN","frontmatter":{"title":"高级类型","date":"2020-01-05T10:17:47.000Z","author":"HuangYi","category":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"tag":["TypeScript"],"description":"交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，Person & Loggable 同时是 Person 和 Loggable。 就是说这个类型的对象同时拥有了这两种类型的成员。 我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用...","head":[["meta",{"property":"og:url","content":"https://chenDevs.github.io/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%9F%B3/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"高级类型"}],["meta",{"property":"og:description","content":"交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，Person & Loggable 同时是 Person 和 Loggable。 就是说这个类型的对象同时拥有了这两种类型的成员。 我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HuangYi"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2020-01-05T10:17:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-05T10:17:47.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuangYi\\"}]}"]]},"headers":[{"level":2,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":2,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":2,"title":"类型保护","slug":"类型保护","link":"#类型保护","children":[{"level":3,"title":"用户自定义的类型保护","slug":"用户自定义的类型保护","link":"#用户自定义的类型保护","children":[]},{"level":3,"title":"typeof 类型保护","slug":"typeof-类型保护","link":"#typeof-类型保护","children":[]},{"level":3,"title":"instanceof 类型保护","slug":"instanceof-类型保护","link":"#instanceof-类型保护","children":[]}]},{"level":2,"title":"可以为 null 的类型","slug":"可以为-null-的类型","link":"#可以为-null-的类型","children":[{"level":3,"title":"可选参数和可选属性","slug":"可选参数和可选属性","link":"#可选参数和可选属性","children":[]},{"level":3,"title":"类型保护和类型断言","slug":"类型保护和类型断言","link":"#类型保护和类型断言","children":[]}]},{"level":2,"title":"字符串字面量类型","slug":"字符串字面量类型","link":"#字符串字面量类型","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":8.97,"words":2691},"filePathRelative":"前端开发/前端基石/《TypeScript 从零实现 axios》/02.TypeScript 常用语法/08.高级类型.md","localizedDate":"2020年1月5日","autoDesc":true}`);export{e as data};
