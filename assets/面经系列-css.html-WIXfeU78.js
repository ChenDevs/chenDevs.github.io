import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,e as o}from"./app-S3nsRjMn.js";const c={},s=o(`<h3 id="link-与-import-的区别" tabindex="-1"><a class="header-anchor" href="#link-与-import-的区别" aria-hidden="true">#</a> link 与 @import 的区别</h3><ul><li><code>link</code> 是 <code>HTML</code> ⽅式， <code>@import</code> 是<code>CSS</code>⽅式</li><li><code>link</code> 最⼤限度⽀持并⾏下载， <code>@import</code> 过多嵌套导致串⾏下载，出现 FOUC (⽂档样式短暂失效)</li><li><code>link</code> 可以通过 <code>rel=&quot;alternate stylesheet&quot;</code> 指定候选样式</li><li>浏览器对 <code>link</code> ⽀持早于 <code>@import</code> ，可以使⽤ <code>@import</code> 对⽼浏览器隐藏样式</li><li><code>@import</code> 必须在样式规则之前，可以在<code>css</code>⽂件中引⽤其他⽂件</li><li>总体来说： <code>link</code> 优于 <code>@import</code> ，<code>link</code>优先级也更高</li></ul><h3 id="bfc-有什么用" tabindex="-1"><a class="header-anchor" href="#bfc-有什么用" aria-hidden="true">#</a> BFC 有什么用</h3><ul><li>创建规则： <ul><li>根元素</li><li>浮动元素（ <code>float</code> 不取值为 <code>none</code> ）</li><li>绝对定位元素（ <code>position</code> 取值为 <code>absolute</code> 或 <code>fixed</code> ）</li><li><code>display</code> 取值为 <code>inline-block 、 table-cell 、 table-caption 、 flex 、inline-flex</code> 之⼀的元素</li><li><code>overflow</code> 不取值为 <code>visible</code> 的元素</li></ul></li><li>作用 <ul><li>可以包含浮动元素</li><li>不被浮动元素覆盖</li><li>阻⽌⽗⼦元素的 <code>margin</code> 折叠</li></ul></li></ul><h3 id="清除浮动的几种方式" tabindex="-1"><a class="header-anchor" href="#清除浮动的几种方式" aria-hidden="true">#</a> 清除浮动的⼏种⽅式</h3><ul><li>⽗级 <code>div</code> 定义 <code>height</code></li><li>结尾处加空 <code>div</code> 标签 <code>clear:both</code></li><li>⽗级 <code>div</code> 定义伪类 <code>:after</code> 和 <code>zoom</code></li><li>⽗级 <code>div</code> 定义 <code>overflow:hidden</code></li><li>⽗级 <code>div</code> 也浮动，需要定义宽度</li><li>结尾处加 <code>br</code> 标签 <code>clear:both</code></li></ul><h3 id="css3-新增伪类-伪元素" tabindex="-1"><a class="header-anchor" href="#css3-新增伪类-伪元素" aria-hidden="true">#</a> Css3 新增伪类 - 伪元素</h3><ul><li><code>p:first-of-type</code> 选择属于其⽗元素的⾸个 p 元素的每个 p 元素。</li><li><code>p:last-of-type</code> 选择属于其⽗元素的最后 p 元素的每个 p 元素。</li><li><code>p:only-of-type</code> 选择属于其⽗元素唯⼀的 p 元素的每个 p 元素。</li><li><code>p:only-child</code> 选择属于其⽗元素的唯⼀⼦元素的每个 p 元素。</li><li><code>p:nth-child(2)</code> 选择属于其⽗元素的第⼆个⼦元素的每个 p 元素。</li><li><code>:enabled</code> 已启⽤的表单元素。</li><li><code>:disabled</code> 已禁⽤的表单元素。</li><li><code>:checked</code> 单选框或复选框被选中。</li><li><code>::before</code> 在元素之前添加内容。</li><li><code>::after</code> 在元素之后添加内容,也可以⽤来做清除浮动。</li><li><code>::first-line</code> 添加一个特殊的样式到文本的首字母。</li><li><code>::first-letter</code> 添加一行特殊样式到首行。</li></ul><p>相信大家也看出来他们的不同，</p><ul><li>伪类语法一个：，它是为了弥补 css 常规类选择器的不足</li><li>伪元素语法两个：，它是凭空创建的一个虚拟容器生成的元素</li></ul><h3 id="ie-盒子模型-、w3c-盒子模型" tabindex="-1"><a class="header-anchor" href="#ie-盒子模型-、w3c-盒子模型" aria-hidden="true">#</a> IE 盒子模型 、W3C 盒子模型</h3><ul><li>W3C 盒模型： 内容(content)、填充( padding )、边界( margin )、 边框( border )； <ul><li><code>box-sizing: content-box</code></li><li>width = content width;</li></ul></li><li>IE 盒子模型： IE 的 content 部分把 border 和 padding 计算了进去; <ul><li><code>box-sizing: border-box</code></li><li>width = border + padding + content width</li></ul></li></ul><h3 id="display-inline-block-什么时候不会显示间隙" tabindex="-1"><a class="header-anchor" href="#display-inline-block-什么时候不会显示间隙" aria-hidden="true">#</a> display:inline-block 什么时候不会显示间隙？</h3><ul><li>移除空格</li><li>使⽤ <code>margin</code> 负值</li><li>使⽤ <code>font-size:0</code></li><li><code>letter-spacing</code></li><li><code>word-spacing</code></li></ul><h3 id="行内元素-float-left-后是否变为块级元素" tabindex="-1"><a class="header-anchor" href="#行内元素-float-left-后是否变为块级元素" aria-hidden="true">#</a> ⾏内元素 float:left 后是否变为块级元素？</h3><p>⾏内元素设置成浮动之后变得更加像是 <code>inline-block</code> （⾏内块级元素，设置 成这个属性的元素会同时拥有⾏内和块级的特性，最明显的不同是它的默认宽 度不是 100% ），这时候给⾏内元素设置 <code>padding-top</code> 和 <code>padding-bottom</code> 或者 <code>width 、 height</code> 都是有效果的</p><h3 id="如果需要手动写动画-你认为最小时间间隔是多久-为什么" tabindex="-1"><a class="header-anchor" href="#如果需要手动写动画-你认为最小时间间隔是多久-为什么" aria-hidden="true">#</a> 如果需要⼿动写动画，你认为最⼩时间间隔是多久，为什么？</h3><p>多数显示器默认频率是 60Hz ，即 1 秒刷新 60 次，所以理论上最⼩间隔为 1/60*1000ms ＝ 16.7ms</p><h3 id="css-不同选择器的权重-css-层叠的规则" tabindex="-1"><a class="header-anchor" href="#css-不同选择器的权重-css-层叠的规则" aria-hidden="true">#</a> CSS 不同选择器的权重(CSS 层叠的规则)</h3><ul><li><code>！important</code> 规则最重要，⼤于其它规则</li><li>⾏内样式规则，加 1000</li><li>对于选择器中给定的各个 ID 属性值，加 100</li><li>对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加 10</li><li>对于选择其中给定的各个元素标签选择器，加 1</li><li>如果权值⼀样，则按照样式规则的先后顺序来应⽤，顺序靠后的覆盖靠前的规则</li></ul><h3 id="stylus-sass-less-区别" tabindex="-1"><a class="header-anchor" href="#stylus-sass-less-区别" aria-hidden="true">#</a> stylus/sass/less 区别</h3><ul><li>均具有“变量”、“混合”、“嵌套”、“继承”、“颜⾊混合”五⼤基本特性</li><li><code>Sass</code> 和 <code>LESS</code> 语法较为严谨， <code>LESS</code> 要求⼀定要使⽤⼤括号“{}”， <code>Sass</code> 和 <code>Stylus</code> 可以通过缩进表示层次与嵌套关系</li><li><code>Sass</code> ⽆全局变量的概念， <code>LESS</code> 和 <code>Stylus</code> 有类似于其它语⾔的作⽤域概念</li><li><code>Sass</code> 是基于 <code>Ruby</code> 语⾔的，⽽ <code>LESS</code> 和 <code>Stylus</code> 可以基于 <code>NodeJS NPM</code> 下载相应库后进⾏编译；</li></ul><p>这也是为什么安装 Sass 的时候有时候会报错，需要安装 python 脚本</p><p>优点：就不用我多说了，谁用谁知道，真香。</p><h3 id="rgba-和-opacity-的透明效果有什么不同" tabindex="-1"><a class="header-anchor" href="#rgba-和-opacity-的透明效果有什么不同" aria-hidden="true">#</a> rgba()和 opacity 的透明效果有什么不同？</h3><ul><li><code>rgba()</code> 和 <code>opacity</code> 都能实现透明效果，但最⼤的不同是 <code>opacity</code> 作⽤于元素，以及元素内的所有内容的透明度，</li><li>⽽ <code>rgba()</code> 只作⽤于元素的颜⾊或其背景⾊。（设置 rgba 透明的元素的⼦元素不会继承透明效果！）</li></ul><h3 id="水平居中的方法" tabindex="-1"><a class="header-anchor" href="#水平居中的方法" aria-hidden="true">#</a> ⽔平居中的⽅法</h3><ul><li>元素为⾏内元素，设置⽗元素 <code>text-align:center</code></li><li>如果元素宽度固定，可以设置左右 <code>margin 为 auto</code> ;</li><li>如果元素为绝对定位，设置⽗元素 <code>position 为 relative</code> ，元素设<code>left:0;right:0;margin:auto;</code></li><li>使⽤ <code>flex-box</code> 布局，指定 <code>justify-content</code> 属性为<code>center</code></li><li><code>display</code> 设置为 <code>tabel-ceil</code></li></ul><h3 id="垂直居中的方法" tabindex="-1"><a class="header-anchor" href="#垂直居中的方法" aria-hidden="true">#</a> 垂直居中的⽅法</h3><ul><li>将显示⽅式设置为表格， <code>display:table-cell</code> ,同时设置 <code>vertial-align：middle</code></li><li>使⽤ <code>flex</code> 布局，设置为 <code>align-item：center</code></li><li>绝对定位中设置 <code>bottom:0,top:0</code> ,并设置 <code>margin:auto</code></li><li>绝对定位中固定⾼度时设置 <code>top:50%，margin-top</code> 值为⾼度⼀半的负值</li><li>⽂本垂直居中设置 <code>line-height</code> 为 <code>height</code> 值</li></ul><p>前端是个大杂烩，各种框架层出不穷，但万变不离 JS，务实基础才是根本，如果你觉得本文对你有所帮助，点个赞支持一下吧~### 1.🤨 标准的 CSS 盒子模型及其和低版本的 IE 盒子模型的区别？</p><p>标准（W3C）盒子模型：<code>width</code> = 内容宽度<code>（content） + border + padding + margin</code></p><p>低版本 IE 盒子模型： <code>width</code> = 内容宽度<code>（content + border + padding）+ margin</code></p><p>图片展示:</p><figure><img src="https://user-gold-cdn.xitu.io/2020/5/30/172633c783abc1eb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://user-gold-cdn.xitu.io/2020/5/30/17263443113eb879?imageslim" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>区别： 标准盒子模型盒子的<code>height</code>和<code>width</code>是<code>content</code>（内容）的宽高，而 IE 盒子模型盒子的宽高则包括<code>content+padding+border</code>部分。</p><h3 id="_2-几种解决-ie6-存在的-bug-的方法" tabindex="-1"><a class="header-anchor" href="#_2-几种解决-ie6-存在的-bug-的方法" aria-hidden="true">#</a> 2.几种解决 IE6 存在的 bug 的方法</h3><ul><li>由<code>float</code>引起的双边距的问题，使用<code>display</code>解决；</li><li>由<code>float</code>引起的 3 像素问题，使用<code>display: inline -3px</code>;</li><li>使用正确的书写顺序<code>link visited hover active</code>，解决超链接<code>hover</code>点击失效问题；</li><li>对于<code>IE</code> 的<code>z-index</code>问题，通过给父元素增加<code>position: relative</code>解决；</li><li>使用<code>!important</code>解决<code>Min-height</code>最小高度问题；</li><li>使用<code>iframe</code>解决<code>select</code>在<code>IE6</code>下的覆盖问题；</li><li>使用<code>over: hidden</code>, <code>zoom: 0.08</code>, <code>line-height: 1px</code>解决定义 1px 左右的容器宽度问题；</li></ul><p>🍀<strong>注意</strong>：有关<code>IE6</code>支不支持<code>!important</code>的问题，对于单个类是支持的。例如：</p><pre><code>.content { color: pink !importent };
.content { color: orange };
// 这里IE6及以上，FF，google等都将显示粉红色
</code></pre><p>但是，当一个样式内部有多个相同属性的时候。例如：</p><pre><code>.content { color: pink !importent; color: orange };
// IE7及以上，FF, google显示粉红色，而IE6将显示橙色（原因是一个样式内重复设置了属性，后面的就会覆盖掉之前的）
</code></pre><h3 id="_3-css-选择符有哪些-哪些属性可以继承" tabindex="-1"><a class="header-anchor" href="#_3-css-选择符有哪些-哪些属性可以继承" aria-hidden="true">#</a> 3.CSS 选择符有哪些？哪些属性可以继承？</h3><p>常见的选择符有一下：</p><p><code>id</code>选择器（<code>#content</code>），类选择器（<code>.content</code>）, 标签选择器（<code>div</code>, <code>p</code>, <code>span</code>等）, 相邻选择器（<code>h1+p</code>）, 子选择器（<code>ul&gt;li</code>）, 后代选择器（<code>li a</code>）， 通配符选择器（<code>*</code>）, 属性选择器（<code>a[rel = &quot;external&quot;]</code>）， 伪类选择器（<code>a:hover</code>, <code>li:nth-child</code>）</p><p>可继承的样式属性： <code>font-size</code>, <code>font-family</code>, <code>color</code>, <code>ul</code>, <code>li</code>, <code>dl</code>, <code>dd</code>, <code>dt</code>;</p><p>不可继承的样式属性： <code>border</code>, <code>padding</code>, <code>margin</code>, <code>width</code>, <code>height</code>；</p><h3 id="_4-css-优先级算法如何计算" tabindex="-1"><a class="header-anchor" href="#_4-css-优先级算法如何计算" aria-hidden="true">#</a> 4.CSS 优先级算法如何计算？</h3><ul><li>考虑到就近原则，同权重情况下样式定义以最近者为准</li><li>载入的样式按照最后的定位为准</li></ul><p>优先级排序：</p><p>同权重情况下： 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）</p><p><code>!important &gt; # &gt; . &gt; tag</code></p><p>🍀<strong>注意</strong>： <code>!important</code> 比 内联优先级高</p><h3 id="_5-css3-新增伪类有那些" tabindex="-1"><a class="header-anchor" href="#_5-css3-新增伪类有那些" aria-hidden="true">#</a> 5.CSS3 新增伪类有那些？</h3><ul><li><p><code>:root</code> 选择文档的根元素，等同于<code>html</code>元素</p></li><li><p><code>:empty</code> 选择没有子元素的元素</p></li><li><p><code>:target</code> 选取当前活动的目标元素</p></li><li><p><code>:not(selector)</code> 选择除 <code>selector</code> 元素意外的元素</p></li><li><p><code>:enabled</code> 选择可用的表单元素</p></li><li><p><code>:disabled</code> 选择禁用的表单元素</p></li><li><p><code>:checked</code> 选择被选中的表单元素</p></li><li><p><code>:nth-child(n)</code> 匹配父元素下指定子元素，在所有子元素中排序第<code>n</code></p></li><li><p><code>nth-last-child(n)</code> 匹配父元素下指定子元素，在所有子元素中排序第<code>n</code>，从后向前数</p></li><li><p><code>:nth-child(odd)</code></p></li><li><p><code>:nth-child(even)</code></p></li><li><p><code>:nth-child(3n+1)</code></p></li><li><p><code>:first-child</code></p></li><li><p><code>:last-child</code></p></li><li><p><code>:only-child</code></p></li><li><p><code>:nth-of-type(n)</code> 匹配父元素下指定子元素，在同类子元素中排序第<code>n</code></p></li><li><p><code>:nth-last-of-type(n)</code> 匹配父元素下指定子元素，在同类子元素中排序第<code>n</code>，从后向前数</p></li><li><p><code>:nth-of-type(odd)</code></p></li><li><p><code>:nth-of-type(even)</code></p></li><li><p><code>:nth-of-type(3n+1)</code></p></li><li><p><code>:first-of-type</code></p></li><li><p><code>:last-of-type</code></p></li><li><p><code>:only-of-type</code></p></li><li><p><code>::selection</code> 选择被用户选取的元素部分（伪元素）</p></li><li><p><code>:first-line</code> 选择元素中的第一行（伪元素）</p></li><li><p><code>:first-letter</code> 选择元素中的第一个字符（伪元素）</p></li><li><p><code>:after</code> 在元素在该元素之后添加内容（伪元素）</p></li><li><p><code>:before</code> 在元素在该元素之前添加内容（伪元素）</p></li></ul><h3 id="_6-如何居中-div-如何居中一个浮动元素-如何让绝对定位的-div-居中" tabindex="-1"><a class="header-anchor" href="#_6-如何居中-div-如何居中一个浮动元素-如何让绝对定位的-div-居中" aria-hidden="true">#</a> 6.如何居中 div？如何居中一个浮动元素？如何让绝对定位的 div 居中？</h3><h4 id="水平居中" tabindex="-1"><a class="header-anchor" href="#水平居中" aria-hidden="true">#</a> 水平居中</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
     <span class="token comment">/* // 方式1： 使用margin： 0 auto居中 */</span>
  <span class="token comment">/* css: */</span>
  <span class="token selector">*</span> <span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  	   <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  	   <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* // 方式2： 使用 定位 + left 居中 */</span>

  <span class="token comment">/* css: */</span>
  <span class="token selector">*</span> <span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
  	<span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  	<span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
      position： relative；
      left： 50%；
      <span class="token property">margin-left</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="垂直居中" tabindex="-1"><a class="header-anchor" href="#垂直居中" aria-hidden="true">#</a> 垂直居中</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span> //  更新： 此处感谢小伙伴留言指出
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="居中浮动元素" tabindex="-1"><a class="header-anchor" href="#居中浮动元素" aria-hidden="true">#</a> 居中浮动元素</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.left:</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> // 水平居中
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何让绝对定位的-div-居中" tabindex="-1"><a class="header-anchor" href="#如何让绝对定位的-div-居中" aria-hidden="true">#</a> 如何让绝对定位的 div 居中</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 1500px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-display-有哪些值-他们的作用是什么" tabindex="-1"><a class="header-anchor" href="#_7-display-有哪些值-他们的作用是什么" aria-hidden="true">#</a> 7.display 有哪些值？他们的作用是什么？</h3><p>值</p><p>作用</p><p>none</p><p>使用后元素将不会显示</p><p>grid</p><p>定义一个容器属性为网格布局</p><p>flex</p><p>定义一个弹性布局</p><p>block</p><p>使用后元素将变为块级元素显示，元素前后带有换行符</p><p>inline</p><p>display 默认值。使用后原色变为行内元素显示，前后无换行符</p><p>list-item</p><p>使用后元素作为列表显示</p><p>run-in</p><p>使用后元素会根据上下文作为块级元素或行内元素显示</p><p>table</p><p>使用后将作为块级表格来显示（类似<code>&lt;table&gt;</code>），前后带有换行符</p><p>inline-table</p><p>使用后元素将作为内联表格显示（类似<code>&lt;table&gt;</code>），前后没有换行符</p><p>table-row-group</p><p>元素将作为一个或多个行的分组来显示（类似<code>&lt;tbody&gt;</code>）</p><p>table-hewder-group</p><p>元素将作为一个或多个行的分组来表示（类似<code>&lt;thead&gt;</code>）</p><p>table-footer-group</p><p>元素将作为一个或多个行分组显示（类似<code>&lt;tfoot&gt;</code>）</p><p>table-row</p><p>元素将作为一个表格行显示（类似<code>&lt;tr&gt;</code>）</p><p>table-column-group</p><p>元素将作为一个或多个列的分组显示（类似<code>&lt;colgroup&gt;</code>）</p><p>table-column</p><p>元素将作为一个单元格列显示（类似<code>&lt;col&gt;</code>）</p><p>table-cell</p><p>元素将作为一个表格单元格显示（类似<code>&lt;td&gt;和&lt;th&gt;</code>）</p><p>table-caption</p><p>元素将作为一个表格标题显示（类似<code>&lt;caption&gt;</code>）</p><p>inherit</p><p>规定应该从父元素集成 display 属性的值</p><p>其中，常用的有：<code>block</code>， <code>inline-block</code>， <code>none</code>， <code>table</code>， <code>line</code>。</p><h3 id="_8-position-的值-relative-和-absolute-定位原点" tabindex="-1"><a class="header-anchor" href="#_8-position-的值-relative-和-absolute-定位原点" aria-hidden="true">#</a> 8.position 的值 relative 和 absolute 定位原点？</h3><p>首先，使用<code>position</code>的时候，应该记住一个规律是‘<strong>子绝父相</strong>’。</p><p><code>relative</code>（相对定位）： 生成相对定位的元素，定位原点是元素本身所在的位置；</p><p><code>absolute</code>（绝对定位）：生成绝对定位的元素，定位原点是离自己这一级元素最近的一级<code>position</code>设置为<code>absolute</code>或者<code>relative</code>的父元素的左上角为原点的。</p><p><code>fixed</code> （老 IE 不支持）：生成绝对定位的元素，相对于浏览器窗口进行定位。</p><p><code>static</code>：默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>、<code>z-index</code> 声明）。</p><p><code>inherit</code>：规定从父元素继承 <code>position</code> 属性的值。</p><p><strong>更新一个属性</strong></p><p><code>sticky</code>: (新增元素，目前兼容性可能不是那么的好)，可以设置 position:sticky 同时给一个 (top,bottom,right,left) 之一即可。</p><p><strong>注意</strong>：</p><ul><li>使用<code>sticky</code>时，必须指定 top、bottom、left、right4 个值之一，不然只会处于相对定位；</li><li><code>sticky</code>只在其父元素内其效果，且保证父元素的高度要高于<code>sticky</code>的高度；</li><li>父元素不能<code>overflow:hidden</code>或者<code>overflow:auto</code>等属性。</li></ul><h3 id="_9-css3-有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_9-css3-有哪些新特性" aria-hidden="true">#</a> 9.CSS3 有哪些新特性？</h3><p>关于<code>CSS</code>新增的特性，有以下：</p><ul><li>选择器;</li><li>圆角<code>（border-raduis）</code>;</li><li>多列布局<code>（multi-column layout）</code>;</li><li>阴影<code>（shadow）</code>和反射<code>（reflect）</code>;</li><li>文字特效<code>（text-shadow）</code>;</li><li>文字渲染<code>（text-decoration</code>）;</li><li>线性渐变<code>（gradient）</code>;</li><li>旋转<code>（rotate</code>）/缩放<code>（scale）</code>/倾斜<code>（skew）</code>/移动<code>（translate）</code>;</li><li>媒体查询<code>（@media）</code>;</li><li><code>RGBA</code>和透明度 ;</li><li><code>@font-face</code>属性;</li><li>多背景图 ;</li><li>盒子大小;</li><li>语音;</li></ul><p>大致想到这么多，有遗漏的可以留言指出，小编看到会加上。</p><h3 id="_10-用纯-css-创建一个三角形的原理是什么" tabindex="-1"><a class="header-anchor" href="#_10-用纯-css-创建一个三角形的原理是什么" aria-hidden="true">#</a> 10.用纯 CSS 创建一个三角形的原理是什么？</h3><h4 id="方法一-隐藏上-左-右三条边-颜色设定为-transparent" tabindex="-1"><a class="header-anchor" href="#方法一-隐藏上-左-右三条边-颜色设定为-transparent" aria-hidden="true">#</a> 方法一：隐藏上，左，右三条边，颜色设定为（transparent）</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent pink transparent<span class="token punctuation">;</span> // 对应上右下左，此处为 下 粉色
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法二-采用的是均分原理" tabindex="-1"><a class="header-anchor" href="#方法二-采用的是均分原理" aria-hidden="true">#</a> 方法二： 采用的是均分原理</h4><p>实现步骤： 1.首先保证元素是块级元素；2.设置元素的边框；3.不需要显示的边框使用透明色。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid pink<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_11-🤨-什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-ie" tabindex="-1"><a class="header-anchor" href="#_11-🤨-什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-ie" aria-hidden="true">#</a> 11.🤨 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？</h3><p>响应式网站设计<code>（Responsive Web design</code>）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</p><p>关于原理： 基本原理是通过媒体查询<code>（@media）</code>查询检测不同的设备屏幕尺寸做处理。</p><p>关于兼容： 页面头部必须有 mate 声明的<code>viewport</code>。</p><pre><code>&lt;meta name=&quot;’viewport’&quot; content=&quot;”width=device-width,&quot; initial-scale=&quot;1.&quot; maximum-scale=&quot;1,user-scalable=no”&quot;/&gt;
</code></pre><h3 id="_12-为什么要初始化-css-样式" tabindex="-1"><a class="header-anchor" href="#_12-为什么要初始化-css-样式" aria-hidden="true">#</a> 12.为什么要初始化 CSS 样式？</h3><p>因为浏览器的兼容问题，不同浏览器对标签的默认值是不同的，如果没有对浏览器的<code>CSS</code>初始化，会造成相同页面在不同浏览器的显示存在差异。</p><h3 id="_13-浮动原理以及为什么会出现浮动和什么时候需要清除浮动-清除浮动的方式" tabindex="-1"><a class="header-anchor" href="#_13-浮动原理以及为什么会出现浮动和什么时候需要清除浮动-清除浮动的方式" aria-hidden="true">#</a> 13.浮动原理以及为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</h3><p>非 IE 浏览器下，容器不设定高度且子元素浮动时，容器高度不能被内容撑开。此时，内容会溢出到容器外面而影响布局。此类现象被称为浮动（溢出）。</p><p>原理：</p><ul><li>浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）；</li><li>浮动元素碰到包含它的边框或其他浮动元素的边框停留。</li></ul><p>浮动元素碰到包含他的边框或者浮动元素的边框停留。由于浮动元素不在文档流之中，文档流的块级框会表现的就像浮动框不存在一样。浮动元素会漂浮在文档流的块级框之上。</p><p>浮动会带来的问题：</p><ul><li>父级元素的高度将会无法被撑开，会影响与父级元素同级的元素</li><li>与浮动元素同级的非浮动元素（内联元素）会跟随其后</li><li>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</li></ul><p>清除方式：</p><ul><li>父级盒子定义高度<code>（height）</code>;</li><li>最后一个浮动元素后面加一个<code>div</code>空标签，并且添加样式<code>clear: both</code>;</li><li>包含浮动元素的父级标签添加样式<code>overflow</code>为<code>hidden/both</code>;</li><li>父级<code>div</code>定义<code>zoom</code>;</li></ul><h3 id="_14-css-优化、提高性能的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_14-css-优化、提高性能的方法有哪些" aria-hidden="true">#</a> 14.CSS 优化、提高性能的方法有哪些？</h3><ul><li>多个<code>css</code>可合并，并尽量减少<code>http</code>请求</li><li>属性值为 0 时，不加单位</li><li>将<code>css</code>文件放在页面最上面</li><li>避免后代选择符，过度约束和链式选择符</li><li>使用紧凑的语法</li><li>避免不必要的重复</li><li>使用语义化命名，便于维护</li><li>尽量少的使用<code>!impotrant</code>，可以选择其他选择器</li><li>精简规则，尽可能合并不同类的重复规则</li><li>遵守盒子模型规则</li></ul><h3 id="_15-css-预处理器-后处理器是什么-为什么要使用它们" tabindex="-1"><a class="header-anchor" href="#_15-css-预处理器-后处理器是什么-为什么要使用它们" aria-hidden="true">#</a> 15.CSS 预处理器/后处理器是什么？为什么要使用它们？</h3><p>预处理器，如：<code>less</code>，<code>sass</code>，<code>stylus</code>,用来预编译<code>sass</code>或者<code>less</code>，增加了<code>css</code>代码的复用性，还有层级，<code>mixin</code>， 变量，循环， 函数等，对编写以及开发 UI 组件都极为方便。</p><p>后处理器， 如： <code>postCss</code>,通常被视为在完成的样式表中根据<code>css</code>规范处理<code>css</code>，让其更加有效。目前最常做的是给<code>css</code>属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p><p><code>css</code>预处理器为<code>css</code>增加一些编程特性，无需考虑浏览器的兼容问题，我们可以在<code>CSS</code>中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让我们的<code>css</code>更加的简洁，增加适应性以及可读性，可维护性等。</p><p>其它<code>css</code>预处理器语言：<code>Sass（Scss</code>）, <code>Less</code>, <code>Stylus</code>, <code>Turbine</code>, <code>Swithch css</code>, <code>CSS Cacheer</code>, <code>DT Css</code>。</p><p>使用原因：</p><ul><li>结构清晰， 便于扩展</li><li>可以很方便的屏蔽浏览器私有语法的差异</li><li>可以轻松实现多重继承</li><li>完美的兼容了<code>CSS</code>代码，可以应用到老项目中</li></ul><h3 id="_16-before-和-after-中双冒号和单冒号有什么区别-解释一下这-2-个伪元素的作用" tabindex="-1"><a class="header-anchor" href="#_16-before-和-after-中双冒号和单冒号有什么区别-解释一下这-2-个伪元素的作用" aria-hidden="true">#</a> 16.::before 和 :after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用</h3><p>（1）、冒号(<code>:</code>)用于<code>CSS3</code>伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素。</p><p>（2）、<code>::before</code>就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在在页面之中。</p><p>🍀<strong>注意：</strong> <code>:before</code>和 <code>:after</code> 这两个伪元素，是在<code>CSS2.1</code>里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着<code>Web</code>的进化，在<code>CSS3</code>的规范里，伪元素的语法被修改成使用双冒号，成为<code>::before ::after</code>。</p><h3 id="_17-让页面里的字体变清晰-变细用-css-怎么做" tabindex="-1"><a class="header-anchor" href="#_17-让页面里的字体变清晰-变细用-css-怎么做" aria-hidden="true">#</a> 17.让页面里的字体变清晰，变细用 CSS 怎么做？</h3><p><code>-webkit-font-smoothing</code>在 <code>window</code>系统下没有起作用，但是在 <code>IOS</code>设备上起作用 <code>-webkit-font-smoothing：antialiased</code>是最佳的，灰度平滑。</p><h3 id="_18-如果需要手动写动画-你认为最小时间间隔是多久-为什么" tabindex="-1"><a class="header-anchor" href="#_18-如果需要手动写动画-你认为最小时间间隔是多久-为什么" aria-hidden="true">#</a> 18. 如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3><p>多数显示器默认频率是<code>60Hz</code>，即 1 秒刷新 60 次，所以理论上最小间隔为<code>1/60＊1000ms ＝ 16.7ms</code>。</p><h3 id="_19-rgba-和-opacity-的透明效果有什么不同" tabindex="-1"><a class="header-anchor" href="#_19-rgba-和-opacity-的透明效果有什么不同" aria-hidden="true">#</a> 19. rgba() 和 opacity 的透明效果有什么不同？</h3><p><code>opacity</code> 作用于元素以及元素内的所有内容（包括文字）的透明度；</p><p><code>rgba()</code>只作用于元素自身的颜色或其背景色，子元素不会继承透明效果；</p><h3 id="_20-css-属性-content-有什么作用" tabindex="-1"><a class="header-anchor" href="#_20-css-属性-content-有什么作用" aria-hidden="true">#</a> 20.css 属性 content 有什么作用？</h3><p><code>content</code> 属性专门应用在 <code>before/after</code> 伪元素上，用于插入额外内容或样式。</p><hr><h3 id="_21-🧐-请解释一下-css3-的-flexbox-弹性盒布局模型-以及适用场景" tabindex="-1"><a class="header-anchor" href="#_21-🧐-请解释一下-css3-的-flexbox-弹性盒布局模型-以及适用场景" aria-hidden="true">#</a> 21.🧐 请解释一下 CSS3 的 Flexbox（弹性盒布局模型）以及适用场景？</h3><blockquote><p>概念： <code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。采用<code>Flex</code>布局的元素，称为<code>Flex</code>容器<code>（flex container）</code>，简称”容器”。它的所有子元素自动成为容器成员，称为<code>Flex</code>项目<code>（flex item）</code>，简称”项目”。</p></blockquote><p>适用场景： 任何一个容器都可以指定为<code>Flex</code>布局。<code>Flexbox</code> 用于不同尺寸屏幕中创建可自动扩展和收缩布局。</p><h3 id="_22-display-inline-block-什么时候会显示间隙" tabindex="-1"><a class="header-anchor" href="#_22-display-inline-block-什么时候会显示间隙" aria-hidden="true">#</a> 22.display:inline-block 什么时候会显示间隙？</h3><ul><li>有空格时候会有间隙， 可以删除空格解决；</li><li><code>margin</code>正值的时候， 可以让<code>margin</code>使用负值解决；</li><li>使用<code>font-size</code>时候，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li></ul><h3 id="_23-png、jpg、-jpeg、-bmp、gif-这些图片格式解释一下-分别什么时候用。有没有了解过-webp" tabindex="-1"><a class="header-anchor" href="#_23-png、jpg、-jpeg、-bmp、gif-这些图片格式解释一下-分别什么时候用。有没有了解过-webp" aria-hidden="true">#</a> 23. png、jpg、 jpeg、 bmp、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？</h3><p>（1）、<code>png</code>-便携式网络图片<code>（Portable Network Graphics）</code>,是一种无损数据压缩位图文件格式。优点是：压缩比高，色彩好。 大多数地方都可以用。</p><p>（2）、<code>jpg</code>是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在<code>www</code>上，被用来储存和传输照片的格式。</p><p>（3）、<code>gif</code>是一种位图文件格式，以 8 位色重现真色彩的图像。可以实现动画效果。</p><p>（4）、<code>bmp</code>的优点： 高质量图片；缺点： 体积太大； 适用场景： <code>windows</code>桌面壁纸；</p><p>（4）、<code>webp</code>格式是谷歌在 2010 年推出的图片格式，压缩率只有<code>jpg</code>的 2/3，大小比<code>png</code>小了 45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和<code>opera</code>支持。</p><h3 id="_24-在-css-样式中常使用-px、em-在表现上有什么区别" tabindex="-1"><a class="header-anchor" href="#_24-在-css-样式中常使用-px、em-在表现上有什么区别" aria-hidden="true">#</a> 24. 在 CSS 样式中常使用 px、em 在表现上有什么区别？</h3><p><code>px</code>相对于显示器屏幕分辨率，无法用浏览器字体放大功能。</p><p><code>em</code>值不是固定的，会继承父级的字体大小： <code>em = 像素值 / 父级font-size</code>。</p><h3 id="_25-一个高度自适应的-div-里面有两个-div-一个高度-100px-希望另一个填满剩下的高度问题怎么解决" tabindex="-1"><a class="header-anchor" href="#_25-一个高度自适应的-div-里面有两个-div-一个高度-100px-希望另一个填满剩下的高度问题怎么解决" aria-hidden="true">#</a> 25.一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度问题怎么解决？</h3><p>方案一： <code>.content { height: calc(100%-100px); }</code></p><p>方案二：<code>.container { position:relative; } .content { position: absolute; top: 100px; bottom: 0; }</code></p><p>方案三：<code>.container { display:flex; flex-direction:column; } .content { flex:1; }</code></p><h3 id="_26-overflow-scroll-时不能平滑滚动的问题怎么处理" tabindex="-1"><a class="header-anchor" href="#_26-overflow-scroll-时不能平滑滚动的问题怎么处理" aria-hidden="true">#</a> 26.overflow: scroll 时不能平滑滚动的问题怎么处理？</h3><p>监听滚轮事件，然后滚动到一定距离时用 <code>jquery</code> 的 <code>animate</code> 实现平滑效果。</p><h3 id="_27-transform、animation-和-animation-duration-的区别" tabindex="-1"><a class="header-anchor" href="#_27-transform、animation-和-animation-duration-的区别" aria-hidden="true">#</a> 27.transform、animation 和 animation-duration 的区别？</h3><ul><li><code>Transform</code>: 它和<code>width</code>、<code>left</code>一样，定义了元素很多静态样式实现变形、旋转、缩放、移位及透视等功能，通过一系列功能的组合我们可以实现很炫酷的静态效果（非动画)。</li><li><code>Animation</code>: 作用于元素本身而不是样式属性,属于关键帧动画的范畴，它本身被用来替代一些纯粹表现的<code>javascript</code>代码而实现动画,可以通过<code>keyframe</code>显式控制当前帧的属性值。</li><li><code>animation-duration</code>：规定完成动画所花费的时间，以秒或毫秒计。</li></ul><h3 id="_28-对-line-height-是如何理解的" tabindex="-1"><a class="header-anchor" href="#_28-对-line-height-是如何理解的" aria-hidden="true">#</a> 28.对 line-height 是如何理解的？</h3><p><code>line-height</code>指的是一行字的高度，包含了字间距，实际上是下一行基线到上一行基线的距离。如果一个标签没有定义<code>height</code>属性，那么其最终表现的高度是由<code>line-height</code>决定的。一个容器没有设置高度，那么撑开容器的高度的是<code>line-height</code>,而不是容器内部的文字内容。把<code>line-height</code>值设置为<code>height</code>一样大小的值可以实现单行文字的垂直居中。<code>line-height</code>和<code>height</code>都能撑开一个高度，<code>height</code>会触发<code>haslayout</code>，而<code>line-height</code>不会。</p><h3 id="_29-抽离样式模块怎么写-述其思路。" tabindex="-1"><a class="header-anchor" href="#_29-抽离样式模块怎么写-述其思路。" aria-hidden="true">#</a> 29.抽离样式模块怎么写？述其思路。</h3><p>可将<code>css</code>拆分成两部分： 公共<code>CSS</code>和业务<code>CSS</code>。</p><p>网站的配色，字体，交互提取出为公共的<code>CSS</code>。这部分的<code>CSS</code>命名不应涉及具体的业务。对于业务<code>CSS</code>，需要有统一的命名，使用公共的前缀。</p><h3 id="_30-在网页中的应该使用奇数还是偶数的字体" tabindex="-1"><a class="header-anchor" href="#_30-在网页中的应该使用奇数还是偶数的字体" aria-hidden="true">#</a> 30.在网页中的应该使用奇数还是偶数的字体？</h3><p>在网页中的应该使用“偶数”字体：</p><p>偶数字号相对更容易和 <code>web</code> 设计的其他部分构成比例关系，使用奇数号字体时文本段落无法对齐，宋体的中文网页排布中使用最多的就是 <code>12</code> 和 <code>14</code>。</p><hr><h3 id="_31-🤥-什么是外边距重叠-重叠的结果是什么" tabindex="-1"><a class="header-anchor" href="#_31-🤥-什么是外边距重叠-重叠的结果是什么" aria-hidden="true">#</a> 31. 🤥 什么是外边距重叠？ 重叠的结果是什么？</h3><p>首先，外边距重叠就是 <code>margin-collapse</code>。相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。 这种合并外边距的方式被称为折叠，结合而成的外边距称为折叠外边距。</p><p>折叠结果遵循下列计算原则：</p><ul><li>两个相邻的外面边距是正数时，折叠结果就是他们之中的较大值；</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值；</li><li>两个外边距一正一负时，折叠结果是两者的相加的和；</li></ul><h3 id="_32-display-none-与-visibility-hidden-有什么区别" tabindex="-1"><a class="header-anchor" href="#_32-display-none-与-visibility-hidden-有什么区别" aria-hidden="true">#</a> 32.display: none; 与 visibility: hidden; 有什么区别？</h3><p>联系： 这两个属性的值都可以让元素变得不可见；</p><p>区别：</p><ul><li><strong>从占据空间角度看</strong>：<code>display: none;</code>会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility: hidden;</code>不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见；</li><li><strong>从继承方面角度看</strong>：<code>display: none;</code>是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；<code>visibility:hidden;</code>是继承属性，子孙节点消失由于继承了<code>hidden</code>，通过设置<code>visibility: visible;</code>可以让子孙节点显式；</li><li><strong>从重绘和重排角度看</strong>：修改常规流中元素的<code>display</code>通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘 读屏器不会读取<code>display: none;</code>元素内容；会读取<code>visibility: hidden</code>元素内容；</li></ul><h3 id="_33-css-hack-原理及常用-hack-有哪些" tabindex="-1"><a class="header-anchor" href="#_33-css-hack-原理及常用-hack-有哪些" aria-hidden="true">#</a> 33.css hack 原理及常用 hack 有哪些？</h3><p>原理： 利用不同浏览器对<code>CSS</code>的支持和解析结果不一样编写针对特定浏览器的样式。</p><p>常见的<code>hack</code>有： <strong>属性 hack</strong>、<strong>选择器 hack</strong>、<strong>IE 条件注释</strong>。</p><h3 id="_34-link-与-import-的区别" tabindex="-1"><a class="header-anchor" href="#_34-link-与-import-的区别" aria-hidden="true">#</a> 34.link 与 @import 的区别？</h3><ul><li><code>link</code> 是<code>HTML</code>方式， <code>@import</code> 是<code>CSS</code>方式；</li><li><code>link</code>最大限度支持并行下载，<code>@import</code> 过多嵌套导致串行下载，出现<code>FOUC</code>；</li><li><code>link</code> 可以通过 <code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式；</li><li>浏览器对 <code>link</code> 支持早于<code>@import</code>，可以使用 <code>@import</code>对老浏览器隐藏样式；</li><li><code>@import</code>必须在样式规则之前，可以在 css 文件中引用其他文件；</li></ul><p>总的来说： <code>link</code>优于<code>@import</code>。</p><h3 id="_35-什么是-fouc-flash-of-unstyled-content-如何来避免-fouc" tabindex="-1"><a class="header-anchor" href="#_35-什么是-fouc-flash-of-unstyled-content-如何来避免-fouc" aria-hidden="true">#</a> 35.什么是 FOUC(Flash of Unstyled Content)？ 如何来避免 FOUC？</h3><p>当使用<code>@import</code>导入<code>CSS</code>时，会导致某些页面在<code>IE</code>出现奇怪的现象： 没有样式的页面内容显示瞬间闪烁，这种现象被称为“文档样式暂时失效”，简称<code>FOUC</code>。</p><p>产生原因： 当样式表晚于结构性 html 加载时，加载到此样式表时，页面将会停止之前的渲染。等待此样式表被下载和解析后，再重新渲染页面，期间导致短暂的花屏现象。</p><p>解决办法： 只要在<code>&lt;head&gt;</code>之间加入一个<code>&lt;link&gt;</code>或者<code>&lt;script&gt;\`\`&lt;/script&gt;</code>元素即可。</p><h3 id="_36-display-float-position-有什么关系" tabindex="-1"><a class="header-anchor" href="#_36-display-float-position-有什么关系" aria-hidden="true">#</a> 36.display,float,position 有什么关系？</h3><ul><li>如果 <code>display</code> 为<code>none</code>，那么<code>position</code>和<code>float</code>都不起作用，元素不显示；</li><li>如果<code>position</code>值为<code>absolute</code>或者<code>fixed</code>，元素绝对定位，<code>float</code>的计算值为<code>none</code>，<code>display</code>根据下面的表格进行调整；</li><li>如果<code>float</code>不是<code>none</code>，框是浮动的，<code>display</code>根据下表进行调整；</li><li>其他情况下<code>display</code>的值为指定值 总结起来：绝对定位、浮动、根元素都需要调整 <code>display</code>；</li></ul><h3 id="_37-外边距折叠-collapsing-margins" tabindex="-1"><a class="header-anchor" href="#_37-外边距折叠-collapsing-margins" aria-hidden="true">#</a> 37.外边距折叠(collapsing margins)</h3><p>毗邻的两个或多个<code>margin</code>会合并成一个<code>margin</code>，叫做外边距折叠。规则如下：</p><ul><li>两个或多个毗邻的普通流中的块元素垂直方向上的<code>margin</code>会折叠；</li><li>浮动元素或<code>linline-block</code>元素或绝对定位元素的<code>margin</code>不会和垂直方向上的其他元素的<code>margin</code>折叠；</li><li>创建了会计格式化上下文的元素，不会和它的子元素发生<code>margin</code>折叠；</li><li>元素自身的<code>margin-bottom</code>和<code>margin-top</code>相邻时也会折叠；</li></ul><h3 id="_38-有哪几种隐藏元素的方法" tabindex="-1"><a class="header-anchor" href="#_38-有哪几种隐藏元素的方法" aria-hidden="true">#</a> 38.有哪几种隐藏元素的方法？</h3><ul><li><code>visibility: hidden;</code> 这个属性只是简单的隐藏某个元素，但是元素占用的空间任然存在；</li><li><code>opacity: 0;\`\`CSS3</code>属性，设置 0 可以使一个元素完全透明；</li><li><code>position: absolute;</code> 设置一个很大的 left 负值定位，使元素定位在可见区域之外；</li><li><code>display: none;</code> 元素会变得不可见，并且不会再占用文档的空间；</li><li><code>transform: scale(0);</code> 将一个元素设置为缩放无限小，元素将不可见，元素原来所在的位置将被保留；</li><li><code>&lt;div hidden=&quot;hidden&quot;&gt;</code> <code>HTML5</code>属性,效果和<code>display:none;</code>相同，但这个属性用于记录一个元素的状态；</li><li><code>height: 0;</code> 将元素高度设为 0 ，并消除边框；</li><li><code>filter: blur(0);</code> <code>CSS3</code>属性，括号内的数值越大，图像高斯模糊的程度越大，到达一定程度可使图像消失<code>（此处感谢小伙伴支持）</code>；</li></ul><h3 id="_39-li-与-li-之间有看不见的空白间隔是什么原因引起的-有什么解决办法" tabindex="-1"><a class="header-anchor" href="#_39-li-与-li-之间有看不见的空白间隔是什么原因引起的-有什么解决办法" aria-hidden="true">#</a> 39.li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p><code>li</code>排列受到中间空白(回车/空格)等的影响，因为空白也属于字符，会被应用样式占据空间，产生间隔。解决办法：</p><ul><li>在<code>ul</code>中用<code>font-size：0</code>（谷歌不支持）；可以使用<code>letter-space：-3px;</code></li><li>设置<code>float：left；</code></li></ul><h3 id="_40-浏览器是怎样解析-css-选择器的" tabindex="-1"><a class="header-anchor" href="#_40-浏览器是怎样解析-css-选择器的" aria-hidden="true">#</a> 40.浏览器是怎样解析 CSS 选择器的？</h3><p>浏览器解析<code>CSS</code>是从上到下，从右到左解析的，这样会提高查找选择器所对应的元素的效率（至于原因，有兴趣的童鞋可以自行去了解）。</p><hr><h3 id="_41-🤭-全屏滚动的原理是什么-用到了-css-的哪些属性" tabindex="-1"><a class="header-anchor" href="#_41-🤭-全屏滚动的原理是什么-用到了-css-的哪些属性" aria-hidden="true">#</a> 41.🤭 全屏滚动的原理是什么？用到了 CSS 的哪些属性？</h3><p>全屏滚动有点类似于轮播，整体的元素一直排列下去，假设有<code>5</code>个需要展示的全屏页面，那么高度是<code>500%</code>，只是展示<code>100%</code>。也可以理解为超出隐藏部分，滚动时显示。</p><p>可能用到的<code>CSS</code>属： <code>overflow:hidden; transform:translate(100%, 100%); display:none;</code></p><p>❤️<strong>拓展</strong> ： 也可以利用全屏视觉滚动差，使用<code>background-attachment: fixed;</code>来实现全屏效果。（这里是细心的小伙伴提出的另一个 idea🤨）</p><h3 id="_42-对浏览器内核的理解" tabindex="-1"><a class="header-anchor" href="#_42-对浏览器内核的理解" aria-hidden="true">#</a> 42.对浏览器内核的理解？</h3><p>浏览器内核主要分为两个部分： 渲染引擎和 js 引擎；</p><ul><li>渲染引擎： 负责取得页面的内容（<code>html</code>，<code>xml</code>， 图像等）、整理讯息（加入<code>css</code>等）、以及计算网页的显示方式，然后对输出至显示器或者打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不同。所有网页浏览器、电子邮件客户以及其他所需要编辑、显示网络的应用程序都需要内核。</li><li><code>JS</code>引擎： 解析和执行<code>Javascript</code>来实现网页的动态效果。</li></ul><p>最开始渲染引擎和<code>js</code>引擎没有明确的区分，后来<code>js</code>引擎越来越独立，内核就倾向于只渲染引擎。</p><h3 id="_43-对-web-标准以及-w3c-的理解与认识" tabindex="-1"><a class="header-anchor" href="#_43-对-web-标准以及-w3c-的理解与认识" aria-hidden="true">#</a> 43.对 WEB 标准以及 W3C 的理解与认识</h3><p>对于结构的要求：（规范的标签可以提高搜索引擎对页面的抓取效率，对<code>SEO</code>很有帮助）</p><ul><li>标签要闭合</li><li>标签字母小写</li><li>标签不允许随意嵌套</li></ul><p>对于<code>CSS</code>和<code>JS</code>来说：</p><ul><li>尽量使用外链<code>CSS</code>样式表和<code>JS</code>脚本。同时结构，表现和行为分为三块，符合规范。此外，还得提高页面渲染速度，提高用户体验。</li><li>尽量少用行内样式，保证结构和表现分离。标签的<code>id</code>和<code>class</code>等的属性命名要做到见文知意，标签越少，加载越快，用户体验就会越高。同时代码方面也会更易于维护，便于改版。</li><li>不需要变动内容，便可一同打印版本而不需要复制内容，提高网站易用性。</li></ul><h3 id="_44-制作一个访问量很大的网站-如何管理所有的-css-文件-js-和图片" tabindex="-1"><a class="header-anchor" href="#_44-制作一个访问量很大的网站-如何管理所有的-css-文件-js-和图片" aria-hidden="true">#</a> 44.制作一个访问量很大的网站，如何管理所有的 css 文件，js 和图片？</h3><p>从人手，分工和同步方面回答：</p><ul><li>前期团队必须确认好全局样式，编码模式；</li><li>代码风格，编写习惯保持一致；</li><li>标注样式编写人，各模块都要及时标注（标注关键样式调用的地方）；</li><li>对自己负责的页面进行标注；</li><li><code>CSS</code>和<code>JS</code>分文件夹存并行存放，命名都要统一；</li><li><code>JS</code>分文件夹存放，明明以该<code>JS</code>功能为准的英文翻译；</li><li>图片采用整合的<code>.png</code>格式存放，金狼整合在一起，方便将来管理；</li></ul><h3 id="_45-视差滚动效果以及如何实现" tabindex="-1"><a class="header-anchor" href="#_45-视差滚动效果以及如何实现" aria-hidden="true">#</a> 45.视差滚动效果以及如何实现？</h3><p>视差滚动<code>（Parallax Scrolling）</code>指网页滚动过程中，多层次的元素进行不同程度的移动，视觉上形成立体运动效果的网页展示技术（3D 效果）。</p><p>实现方式：</p><ul><li><code>CSS3</code>实现： 优点是开发时间相对较短，性能和开发效率比较好。缺点是不能兼容到低版本的浏览器；</li><li><code>JQuery</code>实现：（通过控制不同层滚动速度，计算每一层的时间）优点是能兼容到各个版本，效果可控性好，缺点是开发起来对制作者的要求较高；</li><li>插件实现方式： 例如使用<code>parallax-scrolling</code>,兼容性十分好；</li></ul><h3 id="_46-对-bfc-规范-块级格式化上下文-block-formatting-context-的理解" tabindex="-1"><a class="header-anchor" href="#_46-对-bfc-规范-块级格式化上下文-block-formatting-context-的理解" aria-hidden="true">#</a> 46.对 BFC 规范(块级格式化上下文：block formatting context)的理解</h3><p><code>BFC</code>规定了内部的<code>Block Box</code>如何布局。一个页面是由很多个<code>Box</code>组成的，元素的类型和<code>display</code>属性，决定了这个<code>Box</code>的类型。不同类型的<code>box</code>，会参与不同的<code>Formatting Context</code>（决定如何渲染文档的容器），因此<code>Box</code>内的元素会以不用的方式渲染，也是就是说<code>BFC</code>内部的元素和外部的元素不会相互影响。</p><p>定位方案：</p><ul><li>内部的<code>box</code>会在垂直方向上一个接一个的放置；</li><li><code>box</code>垂直方向的距离由<code>margin</code>决定，属于同一个<code>BFC</code>的两个相邻<code>Box</code>的<code>margin</code>会发生重叠；</li><li>每个元素<code>margin box</code>的左边，与包含块<code>border box</code>的左边相接触；</li><li><code>BFC</code>的区域不会与 float box 重叠；</li><li><code>BFC</code>是页面上的一个隔离的独立容器，容器里面的元素不会影响到外面的元素；</li><li>计算<code>BFC</code>的高度时，浮动元素也会参与计算。</li></ul><p>满足下列条件之一就可以出发 BFC：</p><ul><li>根元素变化，即<code>html</code>；</li><li><code>float</code>的值不为<code>none</code>（默认）；</li><li><code>overflow</code>的值不为<code>visible</code>（默认）；</li><li><code>display</code>的值为<code>inline-block</code>, <code>tabke-cell</code>，<code>table-caption</code>；</li><li><code>position</code>的值为<code>absolute</code>或<code>fixed</code>;</li></ul><h3 id="_47-元素竖向的百分比设定是相对于容器的高度吗" tabindex="-1"><a class="header-anchor" href="#_47-元素竖向的百分比设定是相对于容器的高度吗" aria-hidden="true">#</a> 47.元素竖向的百分比设定是相对于容器的高度吗？</h3><p>一般来说，子元素的百分比单位都是以父元素为依据。但是<code>margin</code>和<code>padding</code>例外。元素的<code>height</code>是相对于容器的高度，但是元素的<code>margin</code>和<code>padding</code>是相对于容器的宽度。</p><h3 id="_48-一个满屏-品字-布局如何设计" tabindex="-1"><a class="header-anchor" href="#_48-一个满屏-品字-布局如何设计" aria-hidden="true">#</a> 48.一个满屏&#39;品字&#39;布局如何设计?</h3><p>方法有挺多种，但是比较简单的方式就是： 上面的<code>div</code>宽度设置为 100%，底下两个<code>div</code>设置成<code>50%</code>，并使用<code>float</code>或者<code>inline</code>使其保持在同一行即可（具体的样式可以自己微调）。如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- css: --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.top</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.left</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 45%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.right</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 45%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- html: --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>top<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_49-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用-hack-的技巧" tabindex="-1"><a class="header-anchor" href="#_49-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用-hack-的技巧" aria-hidden="true">#</a> 49.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧 ？</h3><p>（1）、问题：<code>png24</code>位的图片在<code>ie</code>浏览器上出现背景。解决： 做成<code>png8</code>；</p><p>（2）、问题：浏览器默认的<code>margin</code>和<code>padding</code>不同。 解决： 添加一个全局的<code>*{ margin： 0; padding： 0;}</code>；</p><p>（3）、问题：<code>IE</code>下,可以使用获取常规属性的方法来获取自定义属性,也可以使用<code>getAttribute()</code>获取自定义属性，而<code>Firefox</code>下,只能使用<code>getAttribute()</code>获取自定义属性。 解决： 统一通过<code>getAttribute()</code>获取自定义属性；</p><p>（4）、问题： <code>IE</code>下,<code>event</code>对象有<code>x</code>,<code>y</code>属性,但是没有<code>pageX</code>,<code>pageY</code>属性，而<code>Firefox</code>下,<code>event</code>对象有<code>pageX</code>,<code>pageY</code>属性,但是没有<code>x</code>,<code>y</code>属性。 解决： 使用<code>mX(mX = event.x ? event.x : event.pageX;)</code>来代替<code>IE</code>下的<code>event.x</code>或者<code>Firefox</code>下的<code>event.pageX</code>。</p><h3 id="_50-box-sizing-常用的属性有哪些-分别有什么作用" tabindex="-1"><a class="header-anchor" href="#_50-box-sizing-常用的属性有哪些-分别有什么作用" aria-hidden="true">#</a> 50.box-sizing 常用的属性有哪些？分别有什么作用？</h3><ul><li><code>box-sizing: content-box;</code> // 默认的标准<code>(W3C)</code>盒模型元素效果；</li><li><code>box-sizing: border-box;</code> // 触发怪异<code>(IE)</code>盒模型元素的效果；</li><li><code>box-sizing: inherit;</code> // 继承父元素 <code>box-sizing</code> 属性的值；</li></ul><hr><h3 id="_51-🤤-在网页中的应该使用奇数还是偶数的字体" tabindex="-1"><a class="header-anchor" href="#_51-🤤-在网页中的应该使用奇数还是偶数的字体" aria-hidden="true">#</a> 51. 🤤 在网页中的应该使用奇数还是偶数的字体？</h3><p>一般情况下，在网页中，应该使用 <strong>偶数</strong> 字体。原因：</p><ul><li>偶数字号相对更容易和<code>web</code>设计的其他部分构成比例关系；</li><li>使用基数字号时文本段落无法对齐；</li><li>宋体的中文网页排布中使用最多的是 12 号和 14 号。</li></ul><h3 id="_52-margin-和-padding-分别适合什么场景使用" tabindex="-1"><a class="header-anchor" href="#_52-margin-和-padding-分别适合什么场景使用" aria-hidden="true">#</a> 52. margin 和 padding 分别适合什么场景使用？</h3><p>（1）、需要在<code>border</code>外侧添加空白且空白处不需要背景（色），或上下相连的两个盒子之间的空白需要相互抵消时，可以使用<code>margin</code>；</p><p>（2）、需要在<code>border</code>内侧添加空白且空白处需要背景（色），或上下相连的两个盒子之间的空白，希望等于两者之和时，可以使用<code>padding</code>。</p><h3 id="_53-伪元素和伪类的区别和作用" tabindex="-1"><a class="header-anchor" href="#_53-伪元素和伪类的区别和作用" aria-hidden="true">#</a> 53. 伪元素和伪类的区别和作用？</h3><p>首先，伪类的效果可以通过添加实际的类来实现，而伪元素的效果可以通过添加实际的元素来实现。所以它们的<strong>本质区别就是是否抽象创造了新元素</strong>。</p><p>伪元素/伪对象： 不存在在 DOM 文档中，是虚拟的元素，是创建新元素。代表某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中。</p><pre><code>p::first-child {color: red}
</code></pre><p>伪类：存在<code>DOM</code>文档中，逻辑上存在但在文档树中却无须标识的“幽灵”分类。</p><pre><code>a:hover {color: #FF00FF}
p:first-child {color: red}
</code></pre><p>🍀<strong>注意</strong>：</p><ul><li>伪类只能使用“：”；</li><li>而伪元素既可以使用“:”，也可以使用“::”；</li><li>因为伪类是类似于添加类所以可以是多个，而伪元素在一个选择器中只能出现一次，并且只能出现在末尾。</li></ul><h3 id="_54-before-和-after-中双冒号和单冒号有什么区别" tabindex="-1"><a class="header-anchor" href="#_54-before-和-after-中双冒号和单冒号有什么区别" aria-hidden="true">#</a> 54. ::before 和 :after 中双冒号和单冒号有什么区别？</h3><ul><li>在 <code>CSS</code> 中伪类一直用 : 表示，如 <code>:hover</code>, <code>:active</code> 等；</li><li>伪元素在<code>CSS1</code>中已存在，当时语法是用 : 表示，如<code>:before</code> 和<code>:after</code>；</li><li>后来在<code>CSS3</code>中修订，伪元素用 <code>::</code>表示，如 <code>::before</code> 和 <code>::after</code>，以此区分伪元素和伪类；</li><li>由于低版本<code>IE</code>对双冒号不兼容，开发者为了兼容性各浏览器，继续使使用 <code>:after</code> 这种老语法表示伪元素；</li></ul><p>综上所述：<code>::before</code> 是<code>CSS3</code>中写伪元素的新语法； <code>:after</code>是 <code>CSS1</code> 中存在的、兼容<code>IE</code>的老语法。</p><h3 id="_55-怎么让-chrome-支持小于-12px-的文字" tabindex="-1"><a class="header-anchor" href="#_55-怎么让-chrome-支持小于-12px-的文字" aria-hidden="true">#</a> 55. 怎么让 Chrome 支持小于 12px 的文字？</h3><pre><code>.shrink {
-webkit-transform: scale(0.8);
-o-transform: scale(1);
display: inilne-block;
}
</code></pre><h3 id="_56-将多个元素设置为同一行-清除浮动有几种方式" tabindex="-1"><a class="header-anchor" href="#_56-将多个元素设置为同一行-清除浮动有几种方式" aria-hidden="true">#</a> 56. 将多个元素设置为同一行?清除浮动有几种方式?</h3><p>将多个元素设置为同一行的方法： 使用<code>float</code>或<code>inline-block</code>；</p><p>清除浮动的方式：</p><ul><li>添加新的元素，应用<code>clear： both</code>；</li><li>父级<code>div</code>定义<code>overflow：hidden</code>;</li><li>利用<code>：after</code>和<code>：before</code>来在元素内部插入两个元素块，从而达到清除浮动的效果。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clear</span> <span class="token punctuation">{</span>
  <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clear:after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_57-css-hack-概念以及简述几个-css-hack" tabindex="-1"><a class="header-anchor" href="#_57-css-hack-概念以及简述几个-css-hack" aria-hidden="true">#</a> 57. css hack 概念以及简述几个 css hack?</h3><blockquote><p><strong>概念</strong>： <code>CSS hack</code>是通过在<code>CSS</code>样式中加入一些特殊的符号，让不同的浏览器识别不同的符号（什么样的浏览器识别什么样的符号是有标准的，<code>CSS hack</code>就是让你记住这个标准），以达到应用不同的<code>CSS</code>样式的目的。</p></blockquote><p>（1）、图片间隙</p><p>在<code>div</code>中插入图片，图片会将<code>div</code>下方撑大<code>3px</code>：</p><ul><li><code>hack1</code>： 将<code>&lt;div&gt;</code>与<code>&lt;img&gt;</code>写在同一行；</li><li><code>hack2</code>： 给<code>&lt;img&gt;</code>添加<code>display：block</code>；</li></ul><p><code>dt</code> <code>li</code> 中的图片间隙：</p><ul><li><code>hack1:</code> 给<code>&lt;img&gt;</code>添加<code>display：block</code>；</li></ul><p>（2）、默认高度，<code>IE6</code>以下版本中，部分块元素，拥有默认高度（低于 18px）：</p><ul><li><code>hack1</code>： 给元素添加： <code>font-size： 0</code>；</li><li><code>hack2</code>： 声明： <code>overflow： hidden</code>；</li></ul><p>表单行高不一致：</p><ul><li><code>hack1</code>： 给表单添加声明： <code>float： left; height: ; border: 0</code>;</li></ul><p>鼠标指针：</p><ul><li><code>hack</code>： 若统一某一元素鼠标指针为手型：<code>cursor： pointer;</code>,当 li 内的 a 转化为块元素时，给<code>a</code>设置<code>float</code>，<code>IE</code>里面会出现阶梯状；</li><li><code>hack1</code>： 给<code>a</code>添加<code>display： inline-block</code>;</li><li><code>hack2</code>： 给<code>li</code>添加<code>float: left</code>;</li></ul><h3 id="_58-css2-0-和-css3-0-对比有什么不同" tabindex="-1"><a class="header-anchor" href="#_58-css2-0-和-css3-0-对比有什么不同" aria-hidden="true">#</a> 58. css2.0 和 css3.0 对比有什么不同？</h3><p><code>CSS3</code>加强了<code>CSS2</code>的功能，增加了新的属性和新的标签，并且删除了一些冗余的标签，在布局方面减少了代码量。以前比较复杂的布局，现在使用一个属性就能解决（例如<code>columns</code>等）。在展示型效果方面还加入了更多的效果（如动画，阴影，圆角等），在盒子模型和列表模块都有了改进。但是<code>CSS3</code>就兼容性而言，还是有些不足之处是，只能支持一些高版本的浏览器。</p><h3 id="_59-块级元素、行内元素和空元素定义" tabindex="-1"><a class="header-anchor" href="#_59-块级元素、行内元素和空元素定义" aria-hidden="true">#</a> 59. 块级元素、行内元素和空元素定义？</h3><ul><li><strong>行内元素</strong>：和有他元素都在一行上，高度、行高及外边距和内边距都不可改变，文字图片的宽度不可改变，只能容纳文本或者其他行内元素；</li><li><strong>块级元素</strong>：总是在新行上开始，高度、行高及外边距和内边距都可控制，可以容纳内敛元素和其他元素；</li><li><strong>空元素</strong>：在<code>HTML</code>元素中，没有内容的 <code>HTML</code> 元素被称为空元素。空元素是在开始标签中关闭的。<code>&lt;br&gt;</code> 就是没有关闭标签的空元素。</li></ul><h3 id="_60-如何解决特定浏览器的样式问题" tabindex="-1"><a class="header-anchor" href="#_60-如何解决特定浏览器的样式问题" aria-hidden="true">#</a> 60. 如何解决特定浏览器的样式问题？</h3><p>建议方案： 主张向前兼容，不考虑向后兼容。根据产品的用户群中各大浏览器，来考虑需要兼容的浏览器。</p><p>可以把浏览器分为两类： 一类是历史遗留浏览器，一类是现代浏览器。根据这个分类开发两个版本的网站，然后自己来定义哪些浏览器是历史遗留版本。</p><p>在用户使用历史遗留版本的时候，通过通告栏告知用户使用现代浏览器，获取更多的功能，拥有更好的用户体验等（升级）。当用户的浏览器不能兼容时，提示用户只是使用什么版本的浏览器才能使用网站（下载可以兼容的浏览器）。</p><p>🍀<strong>注意</strong>：项目开始前就需要确认兼容支持的最低版本是多少，以此设计一个对应的兼容方案。</p><hr><h3 id="_61-🥴-浏览器如何判断元素是否匹配某个-css-选择器" tabindex="-1"><a class="header-anchor" href="#_61-🥴-浏览器如何判断元素是否匹配某个-css-选择器" aria-hidden="true">#</a> 61. 🥴 浏览器如何判断元素是否匹配某个 CSS 选择器？</h3><p>浏览器先产生一个集合，这个集合往往由最后一个部分的索引产生（如果没有索引就是所有元素的集合）。然后向上匹配，如果不符合上一个部分，就把元素从集合中删除，直到这个选择器都匹配完，还在集合中的元素就匹配这个选择器了。</p><h3 id="_62-描述-css-reset-的作用和用途" tabindex="-1"><a class="header-anchor" href="#_62-描述-css-reset-的作用和用途" aria-hidden="true">#</a> 62. 描述 css reset 的作用和用途？</h3><p><code>Reset</code>重置浏览器的<code>CSS</code>默认属性，浏览器的品种不同，样式不同时，将他们重置，让他们统一。</p><h3 id="_63-css-sprites-是什么-如何使用" tabindex="-1"><a class="header-anchor" href="#_63-css-sprites-是什么-如何使用" aria-hidden="true">#</a> 63. css sprites 是什么？如何使用？</h3><p><code>css</code>精灵图，把一堆小的图片整合到一张大的图片（png）上，利用<code>CSS</code>的<code>“background-image”</code>，<code>“background- repeat”\`\`，“background-position”</code>的组合进行背景定位<code>background-position</code>可以用数字能精确的定位出背景图片的位置，减轻服务器对图片的请求数量。</p><h3 id="_64-css-sprites-的优缺点" tabindex="-1"><a class="header-anchor" href="#_64-css-sprites-的优缺点" aria-hidden="true">#</a> 64. css sprites 的优缺点？</h3><p><strong>优点：</strong></p><ul><li>利用<code>CSS Sprites</code>能很好地减少网页的 http 请求，从而大大提高了页面的性能，这也是<code>CSS Sprites</code>最大的优点；</li><li><code>CSS Sprites</code>能减少图片的字节，曾经多次比较过，把 3 张图片合并成 1 张图片的字节总是小于这 3 张图片的字节总和。</li></ul><p><strong>缺点：</strong></p><ul><li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；</li><li><code>CSSSprites</code>在开发的时候相对来说有点麻烦，需要借助<code>photoshop</code>或其他工具来对每个背景单元测量其准确的位置。</li><li>维护方面：<code>CSS Sprites</code>在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的<code>CSS</code>，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动<code>CSS</code>。</li></ul><p><strong>拓展：</strong> 目前网站开发所用的精灵图（如字体库）一般都是直接用云端，而不是采用这种本地的了，如阿里图标库等。</p><h3 id="_65-绝对定位和浮动的区别和应用" tabindex="-1"><a class="header-anchor" href="#_65-绝对定位和浮动的区别和应用" aria-hidden="true">#</a> 65. 绝对定位和浮动的区别和应用？</h3><p><strong>绝对定位</strong>： 绝对定位脱离标准文档流，它的参考点是文档的左上角或者是右上角。如果有任何父元素有定位属性，此时就可以参考“<strong>子绝父相</strong>”定律来设置自己的定位参考元素。在网页制作过程中很灵活。制作覆盖效果的时候，会大量使用绝对定位。</p><p><strong>浮动</strong>： 浮动脱离标准文档流，通常用于制作并排显示的元素，通常用于大的布局，或者无序列表比如图片的并排。可以使用<code>clear:both</code>属性让标准流中的其他元素在此之后依次排列。</p><h3 id="_66-当-float-和-margin-同时使用时-如何解决-ie6-的双倍边距" tabindex="-1"><a class="header-anchor" href="#_66-当-float-和-margin-同时使用时-如何解决-ie6-的双倍边距" aria-hidden="true">#</a> 66. 当 float 和 margin 同时使用时，如何解决 IE6 的双倍边距？</h3><p>当浮动的方向和<code>margin</code>是同方向的时候，此时 IE6 会在这个方向的第一个元素身上产生双倍<code>margin</code>。</p><p>解决办法：</p><p>（1）、改变<code>margin</code>的方向，<code>float:left; margin-right:20px;</code> 浮动向左，<code>margin</code>向右； （2）、给第一个元素单独写一个类叫做<code>.content</code>, 此时<code>.content{_margin-left:一半的margin;}</code>； （3）、用<code>display:inline;</code>不用浮动了（哈哈哈哈）。</p><h3 id="_67-简述什么是内容与表现分离" tabindex="-1"><a class="header-anchor" href="#_67-简述什么是内容与表现分离" aria-hidden="true">#</a> 67. 简述什么是内容与表现分离？</h3><p>首先对于<code>html</code>，<code>css</code>以及<code>javascript</code>，可以这样理解：</p><p>把网站理解成一个人，<code>html</code>就是构成人体的‘骨架’，<code>css</code>就是人体的‘装饰’，比如衣服，饰品等；而<code>javascript</code>就相当于人做出的‘动作’，这样就通俗易懂了。</p><p>对于内容和表现分离，小编的理解是：尽量不要再<code>html</code>中插入行内样式，尽量将 css 抽成一个独立的模块，实现<code>html</code>‘骨架’和样式的分离，利于搜索引擎的同时，也便于后期维护。</p><h3 id="_68-css-怎样判断不同分辨率显示不同宽度布局-从而实现自适应宽度" tabindex="-1"><a class="header-anchor" href="#_68-css-怎样判断不同分辨率显示不同宽度布局-从而实现自适应宽度" aria-hidden="true">#</a> 68. CSS 怎样判断不同分辨率显示不同宽度布局，从而实现自适应宽度？</h3><ul><li>使用百分比布局，用百分比来写宽度、<code>marign</code>、<code>padding</code>；</li><li>使用<code>rem</code>做单位，适当的写<code>js\`\`让html</code>根元素的字号随着浏览器宽度的变化而等比例变化；</li><li>使用媒体查询让不同宽度的浏览器使用不同的样式表。</li></ul><h3 id="_69-rem-为什么可以缩放-以什么为基准-其优缺点有哪些" tabindex="-1"><a class="header-anchor" href="#_69-rem-为什么可以缩放-以什么为基准-其优缺点有哪些" aria-hidden="true">#</a> 69.rem 为什么可以缩放，以什么为基准？其优缺点有哪些？</h3><p><code>rem\`\`以html</code>的字号为基准，比如<code>2rem</code>，而<code>html</code>的字号时<code>16px</code>，此时<code>rem</code>就是<code>32px</code>。可以写一段<code>js</code>让<code>html</code>根元素的字号随着浏览器宽度的变化而等比例变化，此时造成页面等比例缩放的现象。</p><p><strong>优点</strong>：</p><p>相对于<code>em</code>的好处来说，不会发生逐渐增大或者减小字体尺寸的情况，因为始终集成根元素的字体大小；<code>rem</code>单位不仅仅是可应用于字体大小，还可以用于设定高度等其它大小，使页面可以适配不同屏幕尺寸。</p><p>🍀<strong>注意</strong>： <code>rem</code> 一般只用于移动端。</p><h3 id="_70-5-条常见的-firefox-和-ie-的脚本兼容的问题。" tabindex="-1"><a class="header-anchor" href="#_70-5-条常见的-firefox-和-ie-的脚本兼容的问题。" aria-hidden="true">#</a> 70. 5 条常见的 Firefox 和 IE 的脚本兼容的问题。</h3><ul><li><strong>绑定监听</strong>： <code>IE</code>是<code>attatchEvent()</code> 、 <code>firefox</code>是<code>addEventListener()</code>;</li><li><strong>计算样式</strong>：<code>IE</code>是<code>currentStyle</code>、 <code>firefox</code>是<code>getComputedSyle</code>;</li><li><strong>滚动事件</strong>：<code>IE</code>是<code>MouseWheel</code>、 <code>firefox</code>是<code>onmousewheel</code>；</li><li><strong>表单元素</strong>：<code>IE</code>是 <code>document.forms(”formname”)</code> ， <code>firefox</code>是<code>document.forms[&quot;formname&quot;]</code>；</li><li><strong>事件对象</strong>： <code>IE</code>是<code>window.event</code>属性， <code>firefox</code>必须给事件处理函数注入实参<code>event</code>；</li></ul><figure><img src="https://user-gold-cdn.xitu.io/2020/6/5/17282053da3df444?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="_71-🥳css-的优先级如何计算" tabindex="-1"><a class="header-anchor" href="#_71-🥳css-的优先级如何计算" aria-hidden="true">#</a> 71. 🥳css 的优先级如何计算？</h3><p>巩固一下：</p><p>分类</p><p>优先级</p><p>元素选择符</p><p>1</p><p>class 选择器</p><p>10</p><p>id 选择器</p><p>100</p><p>元素标签</p><p>1000</p><p>（1）、<code>!important</code>声明的样式优先级最高，若有冲突会再进行计算；</p><p>（2）、优先级相同时，以最后出现的样式为准；</p><p>（3）、继承得到的样式的优先级是最低的。</p><h3 id="_72-回顾-position-的值及其作用" tabindex="-1"><a class="header-anchor" href="#_72-回顾-position-的值及其作用" aria-hidden="true">#</a> 72. 回顾 position 的值及其作用？</h3><ul><li><code>static</code>（默认）：按照正常文档流进行排列；</li><li><code>relative</code>（相对定位）： 不脱离文档流，参考自身静态位置通过<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>定位；</li><li><code>absolute</code>（绝对定位）： 参考距离最近一个不为<code>static</code>的父级元素通过<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>定位；</li><li><code>fixed</code>（固定定位）： 所固定的参照对象是可视窗口。</li></ul><h3 id="_73-有哪几种高等布局" tabindex="-1"><a class="header-anchor" href="#_73-有哪几种高等布局" aria-hidden="true">#</a> 73.有哪几种高等布局？</h3><ul><li>假等高列：使用背景图片，在列的父元素上使用这个背景图进行 Y 轴的铺放，从而实现一种等高列的假象；</li><li>给容器的<code>div</code>使用单独的背景色（固定布局）（流体布局）：用元素中的最大高度撑起其他容器的高度；</li><li>创建带边框的两列等高布局： 用<code>border-left</code>来做，之鞥呢使用两列；</li><li>使用正<code>padding</code>和负<code>margin</code>对冲实现多列布局方法： 在所有列中使用的上，下<code>padding</code>和负的上，下<code>margin</code>，并在所有列外面加上一个容器，设置<code>overflow： hidden</code>，把溢出的背景切掉。</li><li>使用边框和定位模拟列等高： 但不能使用在多列；</li><li>模仿表格布局等高列效果： 兼容性不好，在<code>ie6-7</code>中无法正常运行；</li></ul><h3 id="_74-link、-visited、-hover、-active-的执行顺序是怎么样的" tabindex="-1"><a class="header-anchor" href="#_74-link、-visited、-hover、-active-的执行顺序是怎么样的" aria-hidden="true">#</a> 74. :link、:visited、:hover、:active 的执行顺序是怎么样的？</h3><p><code>L-V-H-A</code>，<code>l(link)ov(visited)e h(hover)a(active)te</code>，即用喜欢和讨厌两个词来概括。</p><h3 id="_75-经常遇到的浏览器兼容性有哪些-如何解决" tabindex="-1"><a class="header-anchor" href="#_75-经常遇到的浏览器兼容性有哪些-如何解决" aria-hidden="true">#</a> 75. 经常遇到的浏览器兼容性有哪些？如何解决？</h3><ul><li>浏览器默认的<code>margin</code>和<code>padding</code>不同；</li><li><code>IE6</code>双边距<code>bug</code>；</li><li>在<code>IE6-7</code>中元素高度超出自己设置的高度。原因是 IE8 以前的浏览器中会给元素设置偶人的行高的高度所导致的；</li><li><code>min-height</code>在<code>IE6</code>下不起作用；</li><li>透明性<code>IE</code>用<code>filter：Alpha（Opacity=60）</code>,而其它主流浏览器用<code>opacity： 0.6</code>；</li><li><code>input</code>边框问题，去掉<code>input</code>边框一般用<code>border：none；</code>就可以但是由于<code>IE6</code>在解析<code>input</code>样式时<code>bug</code>（优先级问题），在<code>IE6</code>下无效；</li></ul><h3 id="_76-为什么要语义化以及对于标签语义化的理解" tabindex="-1"><a class="header-anchor" href="#_76-为什么要语义化以及对于标签语义化的理解" aria-hidden="true">#</a> 76. 为什么要语义化以及对于标签语义化的理解？</h3><p>原因： <strong>为了在没有 css 的情况下，页面也能呈现出很好的内筒结构和代码架构（可以理解为为了裸奔时好看哈哈哈）</strong>。</p><p>理解：</p><ul><li>去掉或者丢失样式的时候能够让页面呈现清晰的结构；</li><li>有利于<code>SEO</code>，可以和搜索引擎建立良好的沟通，有助于爬虫抓取更多的有效信息（爬虫依赖于标签来确定上下文和各个关键字的权重）；</li><li>方便其他设备解析（如屏幕阅读器，盲人阅读器，移动设备等），以意义的方式来渲染网页；</li><li>便于团队的开发和维护，语义化更具有可读性，遵循<code>W3C</code>标准的团队都遵循这个标准，可以减少代码差异化；</li></ul><h3 id="_77-常见的-css-布局有几种" tabindex="-1"><a class="header-anchor" href="#_77-常见的-css-布局有几种" aria-hidden="true">#</a> 77. 常见的 CSS 布局有几种？</h3><p>常见的<code>CSS</code>布局有： <strong>固定布局</strong>、<strong>流式布局</strong>、<strong>弹性布局</strong>、<strong>浮动布局</strong>、<strong>定位布局</strong>、<strong>margin 和 padding</strong>。</p><h3 id="_78-position-的-absolute-与-fixed-共同点与不同点" tabindex="-1"><a class="header-anchor" href="#_78-position-的-absolute-与-fixed-共同点与不同点" aria-hidden="true">#</a> 78. position 的 absolute 与 fixed 共同点与不同点？</h3><p>相同点：</p><ul><li>改变行内元素的呈现方式，<code>display</code>被设置为<code>block</code>；</li><li>让元素脱离普通流，不占据空间；</li><li>默认会覆盖到非定位元素上；</li></ul><p>不同点：</p><ul><li><code>absolute</code>的“根元素”是可以设置的，而<code>fixed</code>的“根元素”固定为浏览器窗口；</li><li>当滚动网页时，<code>fixed</code>元素与浏览器窗口之间的距离是不变的。</li></ul><h3 id="_79-css-哪些属性可以继承-哪些属性不可以继承" tabindex="-1"><a class="header-anchor" href="#_79-css-哪些属性可以继承-哪些属性不可以继承" aria-hidden="true">#</a> 79. CSS 哪些属性可以继承？哪些属性不可以继承？</h3><ul><li>可以继承的样式属性： <code>font-size</code>、<code>font-family</code>、<code>color</code>、<code>list-style</code>、<code>cursor</code>、<code>ul</code>, <code>li</code>, <code>dl</code>, <code>dd</code>, <code>dt</code>;</li><li>不可继承的样式属性： <code>width</code>、<code>height</code>、 <code>border</code>、 <code>padding</code>、 <code>margin</code>、 <code>background</code>；</li></ul><p>🍀<strong>注意</strong>： 为了便于理解，小编觉得可以大致理解为<strong>字体相关的样式可以继承，与尺寸相关的样式不可继承</strong>。</p><h3 id="_80-使用过的-css-预处理器" tabindex="-1"><a class="header-anchor" href="#_80-使用过的-css-预处理器" aria-hidden="true">#</a> 80.使用过的 CSS 预处理器？</h3><p><code>CSS</code>预处理器的基本思想： 为<code>CSS</code>增加了一些变量的特性（变量，判断逻辑和函数等）。</p><p>开发者使用这种语言进行 web 页面上样式设计，再编译成正常的<code>css</code>文件使用。使用 CSS 预处理器，可以使<code>CSS</code>更加简洁，适应性更强，可读性更佳，无需考虑兼容性。最常用的<code>CSS</code>预处理器语言包括： <code>Sass(Scss)</code>和<code>Less</code>。</p><hr><h3 id="_81-🤧-设置元素浮动后-该元素的-display-值会如何变化" tabindex="-1"><a class="header-anchor" href="#_81-🤧-设置元素浮动后-该元素的-display-值会如何变化" aria-hidden="true">#</a> 81. 🤧 设置元素浮动后，该元素的 display 值会如何变化？</h3><p>设置元素浮动后，该元素的<code>display</code>值自动变成<code>block</code>。</p><h3 id="_82-行内元素有哪些-块级元素有哪些-空-void-元素有那些" tabindex="-1"><a class="header-anchor" href="#_82-行内元素有哪些-块级元素有哪些-空-void-元素有那些" aria-hidden="true">#</a> 82. 行内元素有哪些?块级元素有哪些? 空(void)元素有那些?</h3><ul><li>行内元素： <code>a</code>、<code>b</code>、 <code>span</code>、<code>img</code>、 <code>input</code>、 <code>strong</code>、 <code>select</code>、 <code>label</code>、 <code>em</code>、 <code>button</code>、 <code>textarea</code>；</li><li>块级元素： <code>div</code>、 <code>ul</code>、 <code>li</code>、 <code>dl</code>、 <code>dt</code>、 <code>dd</code>、 <code>p</code>、 <code>h1-h6</code>、 <code>blockquote</code>；</li><li>空元素： 即没有实际内容内容的<code>html</code>元素，如：<code>br</code>、<code>meta</code>、<code>hr</code>、 <code>link</code>、 <code>input</code>、 <code>img</code>；</li></ul><h3 id="_83-box-sizing-属性" tabindex="-1"><a class="header-anchor" href="#_83-box-sizing-属性" aria-hidden="true">#</a> 83. box-sizing 属性？</h3><p>用来控制元素的盒子模型的解析模式，默认为<code>content-box</code>。</p><ul><li><code>content-box: W3C</code>的标准盒子模型，设置元素的<code>height/width</code>属性指的是<code>content</code>部分的宽/高；</li><li><code>border-box</code>：IE 传统盒子模型。设置元素的<code>height/width</code>属性指的是<code>border + padding + content</code>部分的高/宽；</li></ul><h3 id="_84-css3-动画比基于脚本的动画有哪些优势" tabindex="-1"><a class="header-anchor" href="#_84-css3-动画比基于脚本的动画有哪些优势" aria-hidden="true">#</a> 84. CSS3 动画比基于脚本的动画有哪些优势？</h3><p>跟脚本动画相比，使用<code>CSS3</code>动画具有以下优势：</p><ul><li>易于使用，任何人都可以在不了解<code>javascript</code>的情况下创建它们；</li><li>即使在合理的系统负载下也能很好的执行。</li><li>由于简单的动画在<code>javascript</code>中的效果比较差，因此渲染引擎使用跳帧技术来使动画流畅进行；</li><li>允许浏览器控制动画序列，通过建撒谎哦在当前不可见的选项卡中执行的动画的更新频率来优化性能和效率；</li></ul><h3 id="_85-如何优化网页的打印样式" tabindex="-1"><a class="header-anchor" href="#_85-如何优化网页的打印样式" aria-hidden="true">#</a> 85. 如何优化网页的打印样式？</h3><p><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen(或者print、tv等) href=&quot;aaa.css&quot;&gt;</code></p><p>🍀<strong>注意</strong>，在打印样式表也应该注意以下几点：</p><ul><li>打印样式表中最好不要用背景图片，因为打印机不能打印 CSS 中的背景图。如果坚持要显示图片，可以使用<code>html</code>插入到页面中；</li><li>最好不要使用像素作为单位，因为打印样式表要打印出来的是实物，建议使用<code>pt/cm</code>;</li><li>隐藏掉不必要的内容。（如<code>@print content{display: none}</code>）;</li><li>打印样式表中不建议使用浮动属性（建议少用），因为它们会消失。</li></ul><h3 id="_86-react-native-中的样式与-css-的区别" tabindex="-1"><a class="header-anchor" href="#_86-react-native-中的样式与-css-的区别" aria-hidden="true">#</a> 86. React Native 中的样式与 css 的区别？</h3><ul><li><code>React Native</code> 的样式基本上是实现了 <code>CSS</code> 的一个子集，并且属性名不完全一致，所以当你开始在考虑兼容<code>React Native</code> 端之前，可以先简要了解一下 <code>React Native</code> 的样式。</li><li>这些样式名基本上是遵循了 <code>web</code> 上的 <code>CSS</code>的命名，只是按照 <code>JS</code> 的语法要求使用了驼峰命名法。</li><li><code>RN</code>使用 <code>JavaScript</code> 来写样式，所有核心组件都接受名为<code>style</code>的属性，相当于<code>css</code>的行内样式。</li><li>在 <code>React Native</code>中使用 Flexbox 规则来指定某个组件的子元素的布局。<code>Flexbox</code> 可以在不同屏幕尺寸上提供一致的布局结构。因此，如果你要考虑 <code>React Native</code> 端，那你的样式布局就得采用 <code>Flex</code> 布局。</li></ul><h3 id="_87-style-标签写在-body-后与-body-前有什么区别" tabindex="-1"><a class="header-anchor" href="#_87-style-标签写在-body-后与-body-前有什么区别" aria-hidden="true">#</a> 87. style 标签写在 body 后与 body 前有什么区别？</h3><p>一般情况下，页面加载时自上而下的。将<code>style</code>标签至于<code>body</code>之前，为的是先加载样式。</p><p>若是写在<code>body</code>标签之后，由于浏览器以逐行方式对 html 文档进行解析，当解析到写在写在文档尾部的样式表时，会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后会重新渲染，在<code>windows</code>的<code>IE</code>下可能会出现<code>FOUC</code>现象（页面闪烁）。</p><h3 id="_88-css-属性-overflow-属性定义溢出元素内容区的内容会如何处理" tabindex="-1"><a class="header-anchor" href="#_88-css-属性-overflow-属性定义溢出元素内容区的内容会如何处理" aria-hidden="true">#</a> 88. CSS 属性 overflow 属性定义溢出元素内容区的内容会如何处理?</h3><ul><li>参数是<code>scroll</code>的时候，一定会出滚动条；</li><li>参数是<code>auto</code>的时候，子元素内容大于父元素时出现滚动条；</li><li>参数是<code>visible</code>的时候，溢出的内容出现在父元素之外；</li><li>参数是<code>hidden</code>的时候，溢出隐藏；</li></ul><h3 id="_89-bfc、ifc、gfc、ffc-是什么" tabindex="-1"><a class="header-anchor" href="#_89-bfc、ifc、gfc、ffc-是什么" aria-hidden="true">#</a> 89. BFC、IFC、GFC、FFC 是什么？</h3><ul><li><code>Block formatting context(BFC)</code>--块级格式化上下文；</li><li><code>Inline formatting context(IFC)</code>--内联格式化上下文；</li><li><code>Crid formatting context(GFC)</code>--网格布局格式化上下文；</li><li><code>Flex formatting context(FFC)</code>--自适应格式化上下文；</li></ul><h3 id="_90-对于使用图片-需要注意什么" tabindex="-1"><a class="header-anchor" href="#_90-对于使用图片-需要注意什么" aria-hidden="true">#</a> 90. 对于使用图片，需要注意什么？</h3><ul><li>优化图片；</li><li>尽量避免在<code>html</code>中使用压缩图片；</li><li>使用恰当的图片格式；</li><li>使用<code>css sprites</code>技巧对图片优化；</li></ul><hr><h3 id="_91-😯-如何优化图像以及图像格式有什么区别" tabindex="-1"><a class="header-anchor" href="#_91-😯-如何优化图像以及图像格式有什么区别" aria-hidden="true">#</a> 91.😯 如何优化图像以及图像格式有什么区别？</h3><p><strong>优化图像</strong>：</p><ul><li>不用图片，尽量使用<code>CSS3</code>代替。对于一些要实现的修饰效果，例如阴影，圆角，半透明等，可以用<code>CSS3</code>完成；</li><li>尽可能使用矢量图<code>SVG</code>代替位图。对于绝大多数图案和图标等，矢量图更小，而且可以缩放而无需生成多套图。现代的主流浏览器大多数都能稳定的支持<code>SVG</code>。</li></ul><p><strong>图像格式区别</strong>：</p><ul><li>矢量图： 图标字体，如<code>font-awesome</code>、<code>svg</code>；</li><li>位图： <code>GIF</code>、<code>jpg（JPEG）</code>、<code>png</code>；</li></ul><p>矢量图和位图的区别：</p><ul><li><code>PNG</code>：它可以细分为三种格式： <code>PNG8</code>，<code>PNG24</code>，<code>PNG32</code>。后面的数字代表这种<code>PNG</code>格式最多可以索引和存储的颜色值；</li><li><code>JPG</code>: 一种大小与质量相对平衡的压缩图片格式。适用于允许轻微失真的色彩丰富的照片，不适用于色彩简单（色调少）的图片，比如图标啊，<code>logo</code>等；</li><li><code>GIF</code>： 一种无损的，8 位图片格式。具有支持动画，索引透明，压缩等特性。使用色彩简单的图片。</li></ul><p><strong>优点</strong>： 能保证在最不失真的情况下尽可能压缩图像文件的大小；</p><p><strong>缺点</strong>： 对于需要高保真的较为复杂的图像，<code>PNG</code>虽然能无损压缩，但是图片较大，不适合应用在 web 页面上；</p><h3 id="_92-position-fixed-在手机端下无效怎么处理" tabindex="-1"><a class="header-anchor" href="#_92-position-fixed-在手机端下无效怎么处理" aria-hidden="true">#</a> 92. position:fixed;在手机端下无效怎么处理？</h3><p><code>fixed</code>的元素实现相对于整个页面是固定位置的，当在屏幕上滑动时是在滑动整个<code>viewport</code>。原来的网页还在，fixed 也没有变过位置，所以说并不是手机端不支持<code>fixed</code>，只是<code>fixed</code>元素不是相对于手机屏幕固定的，因此我们按照以下方式来设计：</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;/&gt;
</code></pre><h3 id="_93-css-样式引入方式的优缺点对比" tabindex="-1"><a class="header-anchor" href="#_93-css-样式引入方式的优缺点对比" aria-hidden="true">#</a> 93. css 样式引入方式的优缺点对比</h3><ul><li>内嵌样式： 优点： 方便书写，权重高；缺点： 没有做到结构和样式分离；</li><li>内联样式： 优点：结构样式相分离； 缺点：没有彻底分离；</li><li>外联样式： 优点： 完全实现了结构和样式相分离； 缺点： 需要引入才能使用；</li></ul><h3 id="_94-border-none-与-border-0-有什么区别" tabindex="-1"><a class="header-anchor" href="#_94-border-none-与-border-0-有什么区别" aria-hidden="true">#</a> 94. border:none;与 border:0;有什么区别？</h3><p><strong>首先是性能差异</strong>：</p><ul><li><code>{border：0;}</code>: 把<code>border</code>设置为 0 像素，虽然在页面上看不到，但是按<code>border</code>默认值理解，浏览器依然对<code>border-width/border-color</code>进行了渲染，即已经占用内存值；</li><li><code>{border：none；}</code>被理解为<code>border-style:none</code>。<code>boder:0</code>;比<code>border:none</code>多渲染了一个<code>border-width:0</code>,也就是为什么<code>border:none</code>的性能要比<code>border:0</code>高；</li></ul><p><strong>兼容性差异</strong>：</p><ul><li><code>{border:none;}</code>当<code>border</code>为<code>“none”</code>时似乎对<code>IE6/7</code>无效边框依然存在当<code>border</code>为“0”时，感觉比<code>“none”</code>更有效，所有浏览器都一致把边框隐藏。</li></ul><h3 id="_95-position-跟-display、overflow、float-这些特性相互叠加后会怎么样" tabindex="-1"><a class="header-anchor" href="#_95-position-跟-display、overflow、float-这些特性相互叠加后会怎么样" aria-hidden="true">#</a> 95. position 跟 display、overflow、float 这些特性相互叠加后会怎么样？</h3><ul><li><code>display</code>属性规定元素应该生成的框的类型；</li><li><code>position</code>属性规定元素的定位类型；</li><li><code>float</code>属性是一种布局方式，定义元素往哪个方向浮动；</li></ul><p><strong>叠加结果</strong>：有点类似于优先机制。<code>position</code>的值-- <code>absolute/fixed</code>优先级最高，有他们在时，<code>float</code>不起作用，<code>display</code>值需要调整。<code>float</code>或者<code>absolute</code>定位的元素，只鞥是块元素或者表格。</p><h3 id="_96-什么是-critical-css" tabindex="-1"><a class="header-anchor" href="#_96-什么是-critical-css" aria-hidden="true">#</a> 96. 什么是 critical CSS？</h3><p><code>Critical CSS</code>是一种提取首屏中 <code>CSS</code> 的技术，以便尽快将内容呈现给用户。这是快速加载网页首屏的好方法。</p><p>核心思路：</p><p>（1）、抽取出首页的<code>CSS</code>；</p><p>（2）、用行内 css 样式，加载这部分的<code>css(critical CSS)</code>;</p><p>（3）、等到页面加载完之后，再加载整个<code>css</code>，会有一部分<code>css</code>与<code>critical css</code>重叠；</p><h3 id="_97-什么是回流-重排-和重绘以及其区别" tabindex="-1"><a class="header-anchor" href="#_97-什么是回流-重排-和重绘以及其区别" aria-hidden="true">#</a> 97. 什么是回流（重排）和重绘以及其区别？</h3><ul><li>回流（重排），<code>reflow</code>:当<code>render tree</code>中的一部分（或全部）因为元素的规模尺寸，布局，隐藏等改变时而需要重新构建；</li><li>重绘<code>（repaint</code>）:当<code>render tree</code>中的一些元素需要更新属性，而这些属性只影响元素的外观，风格，而不会影响布局时，称其为<strong>重绘</strong>，例如颜色改变等。</li></ul><p>🍀<strong>注意</strong>：<strong>每个页面至少需要引发一次重排+重绘，而且重排（回流）一定会引发重绘</strong>。</p><p>触发重排（回流）的条件：</p><ul><li>增加或者删除可见的<code>dom</code>元素；</li><li>元素的位置发生了改变；</li><li>元素的尺寸发生了改变，例如边距，宽高等几何属性改变；</li><li>内容改变，例如图片大小，字体大小改变等；</li><li>页面渲染初始化；</li><li>浏览器窗口尺寸改变，例如<code>resize</code>事件发生时等；</li></ul><h3 id="_98-css-中可以让文字在垂直和水平方向上重叠的两个属性是什么" tabindex="-1"><a class="header-anchor" href="#_98-css-中可以让文字在垂直和水平方向上重叠的两个属性是什么" aria-hidden="true">#</a> 98. css 中可以让文字在垂直和水平方向上重叠的两个属性是什么？</h3><ul><li>垂直方向： <code>line-height</code>；</li><li>水平方向： <code>letter-spacing</code>；</li></ul><p>🍀<strong>注意</strong>： <code>letter-spacing</code>还可以用来消除<code>inline-block</code>元素间的换行符空格间隙等问题。</p><h3 id="_99-对-web-标准以及-w3c-有什么理解与认识" tabindex="-1"><a class="header-anchor" href="#_99-对-web-标准以及-w3c-有什么理解与认识" aria-hidden="true">#</a> 99. 对 WEB 标准以及 W3C 有什么理解与认识？</h3><ul><li>标签闭合，标签小写，不乱嵌套；</li><li>提高搜索机器人的搜索几率；</li><li>使用外链<code>CSS</code>和<code>JS</code>脚本；</li><li>结构行为标签分离；</li><li>文件下载和页面速度更快；</li><li>内容能被更多的用户以及更广泛的设备访问；</li><li>更少的代码和组件，易于维护，改版方便；</li><li>不需要动页面内容，同时提供打印版本也不需要复制内容，提高网站的易用性；</li></ul><h3 id="_100-、-deep-、-v-deep" tabindex="-1"><a class="header-anchor" href="#_100-、-deep-、-v-deep" aria-hidden="true">#</a> 100.&gt;&gt;&gt;、/deep/、::v-deep</h3><hr><p>都是<code>深度选择器</code>，可以操作<code>样式穿透</code>，用于局部修改 UI 组件库默认样式</p><p>区别是 <code>&gt;&gt;&gt;</code> 只作用于 CSS，在 Less/Sass 中无法识别，所以用 deep 代替，在 Vue3.0 之前用 <code>/deep/</code>，Vue3.0 之后用 <code>::v-deep</code></p><h2 id="几种隐藏的区别" tabindex="-1"><a class="header-anchor" href="#几种隐藏的区别" aria-hidden="true">#</a> 几种隐藏的区别</h2><ul><li><code>visibility:hidden</code>：隐藏元素，会继续在文档流中占位，所以触发重绘，隐藏后不能触发点击事件</li><li><code>display:none</code>：隐藏元素，会从页面中删除掉，所以会触发重排和重绘</li><li><code>opacity:0</code>：透明，会继续在文档流中占位，所以触发重绘。由是是作用于元素自身，所以子元素会继承，全部变透明，透明后可以触发点击事件</li><li><code>rgba(0,0,0,0)</code>：透明，会继续在文档流中占位，所以触发重绘。由于只作用于颜色或背景色，所以子元素不会继承，透明后可以触发点击事件</li></ul><p>另外 <code>transition</code> 过渡不支持 <code>display:none</code>，其他三个是支持的</p><h3 id="_101-常见样式兼容问题" tabindex="-1"><a class="header-anchor" href="#_101-常见样式兼容问题" aria-hidden="true">#</a> 101.常见样式兼容问题</h3><hr><ul><li>不同浏览器默认 margin 和 padding 不一样</li><li>Chrome 默认文字最小 12px，可添加 CSS 属性 -webkit-text-size-adjust:none(新版浏览器已弃用); 或用 transform:scale()缩小；或者在浏览器设置修改字体大小最小限制</li><li>超链接访问过后 hover 和 active 样式就不出现了，解决办法是调整 CSS 属性顺序 lvha：a:link{} a:visited{} a:hover{} a:active{}</li><li>Chrome 中 visibility 的值为 collapse 和 hidden 是一样的，在 Firefox,Opera 和 IE 中，值为 collapse 和 display:none 是一样的</li><li>CSS3 属性添加针对不同浏览器的前缀</li></ul><h3 id="_102-before-和-before-的区别" tabindex="-1"><a class="header-anchor" href="#_102-before-和-before-的区别" aria-hidden="true">#</a> 102.:before 和 ::before 的区别</h3><hr><ul><li>单冒号是 <code>CSS2.1</code> 引入的，用于伪类，操作文档已有的元素，侧重于丰富选择器的选择能力</li><li>双冒号是 <code>CSS3</code> 引入的，用于伪元素，会创建文档树之外的元素，侧重于表达或定义不在语法定义范围内的抽象元素</li></ul><h3 id="_103-link-和-import" tabindex="-1"><a class="header-anchor" href="#_103-link-和-import" aria-hidden="true">#</a> 103.link 和 @import</h3><hr><ul><li><code>link</code>：是 html 引入方式；最大限度支持并行下载；优先级高于 @import；可以通过 ref=&quot;alternate stylesheet&quot; 指定候选样式</li><li><code>@import</code>：是 CSS 引入方式，必须写在样式之前；可以嵌套，但过多嵌套会导致串行下载，出现文档样式暂失效；老浏览器不支持</li></ul><h3 id="_104-如何利用标签提升渲染速度" tabindex="-1"><a class="header-anchor" href="#_104-如何利用标签提升渲染速度" aria-hidden="true">#</a> 104.如何利用标签提升渲染速度</h3><hr><h3 id="link-标签" tabindex="-1"><a class="header-anchor" href="#link-标签" aria-hidden="true">#</a> link 标签</h3><p>通过<code>rel</code>属性进行<code>预加载</code>，如</p><pre><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//xx.baidu.com&quot;&gt;
复制代码
</code></pre><p>rel 有几个属性：</p><ul><li><code>dns-prefetch</code>：浏览器会对 href 中的域名进行 DNS 解析并缓存，当再次请求该域名资源时，能省去查询 IP 的过程，从而减少时间损耗</li><li><code>prefetch</code>/<code>preload</code>：都是预先下载并缓存某个资源，不同的是 prefetch 可能会在浏览器忙时被忽略，而 preload 则一定会预先下载</li><li><code>preconnect</code>：正式发送 http 请求前预先执行 DNS 解析、TCP 握手、TLS 协商。通过消除往返延迟来节省时间</li><li><code>prerender</code>：浏览器不仅会加载资源，还会解析执行页面，并进行预渲染</li></ul><h3 id="script-标签" tabindex="-1"><a class="header-anchor" href="#script-标签" aria-hidden="true">#</a> script 标签</h3><p>由于浏览器底层运行机制，渲染引擎在解析 HTML 时遇到 script 标签引用文件是会暂停解析过程的，同时通过网络线程加载文件，文件加载后切换至 js 引擎执行相应代码，代码执行完成后再切换回渲染引擎继续渲染页面</p><p>可是首次渲染可能并不依赖这些 js 文件，这就延长了页面渲染的时间，所以为了减少这些时间损耗，可以通过 script 标签三个属性来实现：</p><ul><li><code>async</code>：立即请求文件，但不阻塞渲染引擎，而是文件加载完毕后再阻塞渲染引擎并执行 js 先</li><li><code>defer</code>：立即请求文件，但不阻塞渲染引擎，等解析完 HTML 再执行 js</li><li><code>H5</code>标准的<code>type=&quot;module&quot;</code>：让浏览器按照 ES6 标准将文件当模板解析，默认阻塞效果和 defer 一样，也可以配合 async 在请求完成后立即执行</li></ul><h3 id="_105-href-和-src-的区别" tabindex="-1"><a class="header-anchor" href="#_105-href-和-src-的区别" aria-hidden="true">#</a> 105.href 和 src 的区别</h3><hr><p>href 是<code>引用</code>，src 是<code>引入</code></p><p>href:</p><ul><li>href 引入的 CSS 会阻塞页面渲染，CSS 加载完成才会进行渲染，所以渲染出来就是带样式的</li><li>不会阻塞 js 加载，但是会阻塞 js 的执行，因为 js 执行可能会操作 DOM，所以 CSS 加载完之前执行 js 是可能会有问题的</li></ul><p>src:</p><ul><li>src 引入的 js 会阻塞页面的渲染(没有 defer 和 async 的情况下)，因为 js 很可能操作 DOM 修改文档结构</li><li>多个脚本时不会不阻塞后续资源的加载，但是会阻塞后续 js 逻辑的执行，按顺序执行</li></ul><h3 id="_106-seo-和语义化" tabindex="-1"><a class="header-anchor" href="#_106-seo-和语义化" aria-hidden="true">#</a> 106.SEO 和语义化</h3><hr><p><code>SEO</code>就是搜索引擎优化，利用搜索引擎的搜索规则来提高网站的自然排名，比如对网站的标题、关键字、描述精心设置，比如网站的结构布局设计和网页代码优化</p><p><code>语义化</code>就根据内容结构化选择合适的标签和特有的属性去格式化文档内容，在没有 CSS 的情况下也能呈现出很好的内容结构，代码结构，便于开发者阅读和维护，同时也利于 SEO</p><h2 id="alt-和-title-的作用及区别" tabindex="-1"><a class="header-anchor" href="#alt-和-title-的作用及区别" aria-hidden="true">#</a> alt 和 title 的作用及区别</h2><p>共同点是有利于 SEO</p><p>不同点是 alt 是图片不能正常显示时出现的提示信息；title 是鼠标移到元素上时显示的提示信息，而且大多数标签都支持 title 属性，但是优先级要低于 alt(都在图片上图片不能正常显示时)；title 内容可以比 alt 更长</p><h3 id="_107-html-自动刷新或跳转" tabindex="-1"><a class="header-anchor" href="#_107-html-自动刷新或跳转" aria-hidden="true">#</a> 107.HTML 自动刷新或跳转</h3><hr><p>除了定时器控制页面跳转还有更简洁的方法，比如<code>meta</code>标签</p><pre><code>&lt;!-- 5秒后自动跳转到page2.html --&gt;
&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5; URL=page2.html&quot;&gt;

&lt;!-- 30秒后自动刷新当前页面 --&gt;
&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;30&quot;&gt;
复制代码
</code></pre><p>比如实现 PPT 自动播放功能或者自动返回首页，或者做大屏幕监控的时候用这样的方法来自动刷新，是不是很简单呢</p><p>当然它的缺点是刷新和跳转是<code>不可取消</code>的，如果需要动态刷新或者手动取消的，还是推荐定时器</p>`,500),d=[s];function i(t,l){return n(),a("div",null,d)}const u=e(c,[["render",i],["__file","面经系列-css.html.vue"]]);export{u as default};
