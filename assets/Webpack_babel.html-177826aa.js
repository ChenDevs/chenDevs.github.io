import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as o,b as n,d as s,a as e,e as p}from"./app-6987be88.js";const c={},r=n("h4",{id:"webpack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack","aria-hidden":"true"},"#"),s(" Webpack")],-1),u={id:"前端模块系统的演进",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#前端模块系统的演进","aria-hidden":"true"},"#",-1),k={href:"http://zhaoda.net/webpack-handbook/module-system.html",target:"_blank",rel:"noopener noreferrer"},b=p('<h5 id="webpack-解决了现存模块打包器的两个痛点" tabindex="-1"><a class="header-anchor" href="#webpack-解决了现存模块打包器的两个痛点" aria-hidden="true">#</a> webpack 解决了现存模块打包器的两个痛点：</h5><ul><li>1 Code Spliting - 代码分离</li><li>2 静态资源的模块化处理方案</li><li>在 webpack 看来：所有的静态资源都是模块</li><li>webpack 模块能够识别以下等形式的模块之间的依赖：</li><li>JS 的模块化规范： <ul><li>ES2015 import export</li><li>CommonJS require() module.exports</li><li>AMD define 和 require</li></ul></li><li>非 JS 等静态资源： <ul><li>css/sass/less 文件中的 @import</li><li>图片连接，比如：样式 url(...) 或 HTML img</li><li>字体 等</li></ul></li></ul><h5 id="webpack-文档和资源" tabindex="-1"><a class="header-anchor" href="#webpack-文档和资源" aria-hidden="true">#</a> webpack 文档和资源</h5>',3),v={href:"https://doc.webpack-china.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://webpack.github.io/docs/what-is-webpack.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.jianshu.com/p/42e11515c10f#",target:"_blank",rel:"noopener noreferrer"},y=p(`<h5 id="安装-webpack" tabindex="-1"><a class="header-anchor" href="#安装-webpack" aria-hidden="true">#</a> 安装 webpack</h5><ul><li>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</li></ul><h5 id="webpack-的作用-对整个代码库中的模块进行静态分析、编译打包-合并文件-压缩文件-处理文件的依赖关系" tabindex="-1"><a class="header-anchor" href="#webpack-的作用-对整个代码库中的模块进行静态分析、编译打包-合并文件-压缩文件-处理文件的依赖关系" aria-hidden="true">#</a> webpack 的作用：对整个代码库中的模块进行静态分析、编译打包，合并文件，压缩文件，处理文件的依赖关系</h5><h6 id="它是高度可配置的-但是-在开始前你需要先理解四个核心概念" tabindex="-1"><a class="header-anchor" href="#它是高度可配置的-但是-在开始前你需要先理解四个核心概念" aria-hidden="true">#</a> 它是高度可配置的，但是，在开始前你需要先理解四个核心概念：</h6><ul><li><p>入口(entry):告诉 webpack 要在哪里打包..要处理哪些文件;</p></li><li><p>输出(output):告诉 webpack 要把处理后的文件放到哪里</p></li><li><p>loader:处理一些非. js 的特殊文件(.css .less .html .svg), 转换器 (webpack 默认只处理 js 模块的文件,不识别其他后缀的文件)</p></li><li><p>插件(plugins)：是对 loader 的一个补充,处理 loader 不能处理的文件,压缩 抽离 等等</p></li><li><p>全局安装：npm i -g webpack</p><ul><li>目的：在任何目录中通过 CLI 使用 webpack 这个命令</li></ul></li><li><p>项目安装：npm i -D webpack</p><ul><li>目的：执行当前项目的构建</li></ul></li></ul><h5 id="webpack-的基本使用" tabindex="-1"><a class="header-anchor" href="#webpack-的基本使用" aria-hidden="true">#</a> webpack 的基本使用</h5><ul><li>安装：npm i -D webpack</li><li>webpack 的两种使用方式：1 命令行 2 配置文件（webpack.config.js）</li></ul><h5 id="命令行方式演示-案例-隔行变色" tabindex="-1"><a class="header-anchor" href="#命令行方式演示-案例-隔行变色" aria-hidden="true">#</a> 命令行方式演示 - 案例：隔行变色</h5><ul><li>1 使用 npm init -y 初始 package.json，使用 npm 来管理项目中的包</li><li>2 新建 index.html 和 main.js，实现隔行变色功能</li><li>3 运行 webpack src/js/main.js dist/bundle.js 进行打包构建，语法是：webpack 入口文件 输出文件</li><li>4 注意：需要在页面中引入 输出文件 的路径（此步骤可通过配置 webpack 去掉）</li></ul><h5 id="配置文件方式-推荐" tabindex="-1"><a class="header-anchor" href="#配置文件方式-推荐" aria-hidden="true">#</a> 配置文件方式（推荐）</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
  webpack.config.js

  运行命令：webpack

  entry 入口的配置说明：
  https://doc.webpack-china.org/concepts/entry-points
*/</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导入 自动生成页面、自动引入js、css文件 插件</span>
<span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 入口文件</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/js/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// 输出文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的路径</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的名称</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server" aria-hidden="true">#</a> webpack-dev-server</h5><ul><li>安装：npm i -D webpack-dev-server</li><li>作用：配合 webpack，创建开发环境（启动服务器、监视文件变化、自动编译、刷新浏览器等），提高开发效率</li><li>注意：无法直接在终端中执行 webpack-dev-server，需要通过 package.json 的 scripts 实现</li><li>使用方式：npm run dev</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用说明:</p><ul><li>注意：webpack-dev-server 将打包好的文件存储在内存中，提高编译和加载速度，效率更高</li><li>注意：输出的文件被放到项目根目录中 <ul><li>命令行中的提示：webpack output is served from /</li><li>在 index.html 页面中直接通过 /bundle.js 来引入内存中的文件</li></ul></li></ul></li><li><p>--contentBase ：告诉服务器在哪个目录中提供服务（可以理解为：打开哪个目录中的 index.html）</p><ul><li>--contentBase ./：当前工作目录</li><li>--contentBase ./src：当前目录下的 src 文件夹</li></ul></li><li><p>--open ：自动打开浏览器</p></li><li><p>--port ：端口号</p></li><li><p>--hot ：热更新，只加载修改的文件(按需加载修改的内容)，而非全部加载</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">/* package.json */</span>
    <span class="token comment">/* 运行命令：npm run dev */</span>

    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server --contentBase ./src --open --port 8888 --hot&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置说明-webpack-config-js" tabindex="-1"><a class="header-anchor" href="#配置说明-webpack-config-js" aria-hidden="true">#</a> 配置说明 - webpack.config.js</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>

<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 服务器的根目录 Tell the server where to serve content from</span>
  <span class="token comment">// https://webpack.js.org/configuration/dev-server/#devserver-contentbase</span>
  <span class="token literal-property property">contentBase</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 自动打开浏览器</span>
  <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 端口号</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>

  <span class="token comment">// --------------- 1 热更新 -----------------</span>
  <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token comment">// ---------------- 2 启用热更新插件 ----------------</span>
  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="html-webpack-plugin-插件" tabindex="-1"><a class="header-anchor" href="#html-webpack-plugin-插件" aria-hidden="true">#</a> html-webpack-plugin 插件</h5><ul><li>安装：npm i -D html-webpack-plugin</li><li>作用：根据模板，自动生成 html 页面</li><li>优势：页面存储在内存中，自动引入 bundle.js、css 等文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>
<span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 模板页面路径</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 在内存中生成页面路径，默认值为：index.html</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="loaders-加载器" tabindex="-1"><a class="header-anchor" href="#loaders-加载器" aria-hidden="true">#</a> Loaders（加载器）</h5>`,22),f={href:"https://webpack.js.org/loaders/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://doc.webpack-china.org/guides/asset-management",target:"_blank",rel:"noopener noreferrer"},j=p(`<ul><li>webpack 只能处理 JavaScript 资源</li><li>webpack 通过 loaders(加载器)处理非 JavaScript 静态资源</li></ul><h6 id="css-打包" tabindex="-1"><a class="header-anchor" href="#css-打包" aria-hidden="true">#</a> CSS 打包</h6><ul><li>1 CSS 打包文件（加载）</li><li>2 SASS 打包文件（编译为 CSS）</li></ul><h6 id="使用-webpack-打包-css" tabindex="-1"><a class="header-anchor" href="#使用-webpack-打包-css" aria-hidden="true">#</a> 使用 webpack 打包 CSS</h6><ul><li>安装：npm i -D style-loader css-loader</li><li>注意：use 中模块的顺序不能颠倒，加载顺序：从右向左加载</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* index.js */</span>

<span class="token comment">// 导入 css 文件</span>
<span class="token keyword">import</span> <span class="token string">&#39;./css/app.css&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/* webpack.config.js */</span>

<span class="token comment">// 配置各种资源文件的loader加载器</span>
<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 配置匹配规则</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// test 用来配置匹配文件规则（正则）</span>
    <span class="token comment">// use  是一个数组，按照从后往前的顺序执行加载</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="使用-webpack-打包-sass-文件" tabindex="-1"><a class="header-anchor" href="#使用-webpack-打包-sass-文件" aria-hidden="true">#</a> 使用 webpack 打包 sass 文件</h6><ul><li>安装：npm i -D sass-loader node-sass</li><li>注意：sass-loader 依赖于 node-sass 模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

<span class="token comment">// 参考：https://webpack.js.org/loaders/sass-loader/#examples</span>
<span class="token comment">// &quot;style-loader&quot;  ：creates style nodes from JS strings 创建style标签</span>
<span class="token comment">// &quot;css-loader&quot;    ：translates CSS into CommonJS 将css转化为CommonJS代码</span>
<span class="token comment">// &quot;sass-loader&quot;   ：compiles Sass to CSS 将Sass编译为css</span>

<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(scss|sass)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="图片和字体打包" tabindex="-1"><a class="header-anchor" href="#图片和字体打包" aria-hidden="true">#</a> 图片和字体打包</h6><ul><li>安装：npm i -D url-loader file-loader</li><li>file-loader：加载并重命名文件（图片、字体 等）</li><li>url-loader：将图片或字体转化为 base64 编码格式的字符串，嵌入到样式文件中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 打包 图片文件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 打包 字体文件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="图片打包细节" tabindex="-1"><a class="header-anchor" href="#图片打包细节" aria-hidden="true">#</a> 图片打包细节</h6><ul><li>limit 参数的作用：（单位为：字节(byte)） <ul><li>当图片文件大小（字节）小于指定的 limit 时，图片被转化为 base64 编码格式</li><li>当图片文件大小（字节）大于等于指定的 limit 时，图片被重命名以 url 路径形式加载（此时，需要 file-loader 来加载图片）</li></ul></li><li>图片文件重命名，保证相同文件不会被加载多次。例如：一张图片（a.jpg）拷贝一个副本（b.jpg），同时引入这两张图片，重命名后只会加载一次，因为这两张图片就是同一张</li><li>文件重命名以后，会通过 MD5 加密的方式，来计算这个文件的名称</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// {test: /\\.(jpg|png|gif|jpeg)$/, use: &#39;url-loader?limit=100&#39;},</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="字体文件打包说明" tabindex="-1"><a class="header-anchor" href="#字体文件打包说明" aria-hidden="true">#</a> 字体文件打包说明</h6><ul><li>处理方式与图片相同，可以使用：file-loader 或 url-loader</li></ul><h5 id="webpack-发布项目" tabindex="-1"><a class="header-anchor" href="#webpack-发布项目" aria-hidden="true">#</a> webpack 发布项目</h5><ul><li>项目开发期间配置文件：‘webpack.config.js’</li><li>项目发布配置文件：‘webpack.prod.js’（文件名称非固定） - display-error-details 错误信息详细提示</li></ul><h4 id="babel-js-文件处理" tabindex="-1"><a class="header-anchor" href="#babel-js-文件处理" aria-hidden="true">#</a> babel(js 文件处理)</h4><p><img src="https://babeljs.io/" alt="babel"><img src="http://2ality.com/2015/12/babel6-loose-mode.html" alt="es2015-loose"><img src="https://github.com/brunoyang/blog/issues/20" alt="babel 全家桶"></p><ul><li>安装：npm i -D babel-core babel-loader</li><li>安装：npm i -D babel-preset-env</li></ul><h5 id="基本使用-两步" tabindex="-1"><a class="header-anchor" href="#基本使用-两步" aria-hidden="true">#</a> 基本使用（两步）</h5><ul><li><h6 id="第一步" tabindex="-1"><a class="header-anchor" href="#第一步" aria-hidden="true">#</a> 第一步：</h6></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// exclude 排除，不需要编译的目录，提高编译速度</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h6 id="第二步-在项目根目录中新建-babelrc-配置文件" tabindex="-1"><a class="header-anchor" href="#第二步-在项目根目录中新建-babelrc-配置文件" aria-hidden="true">#</a> 第二步：在项目根目录中新建.babelrc 配置文件</h6></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* .babelrc */</span>

<span class="token comment">// 将来babel-loader运行的时候，会检查这个配置文件，并读取相关的语法和插件配置</span>
<span class="token comment">//env  解析 ES6\\ES7\\ES8的代码</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;env&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="babel-的说明" tabindex="-1"><a class="header-anchor" href="#babel-的说明" aria-hidden="true">#</a> babel 的说明</h5><ul><li><h6 id="babel-的作用" tabindex="-1"><a class="header-anchor" href="#babel-的作用" aria-hidden="true">#</a> babel 的作用：</h6></li><li><p>1 语法转换：将新的 ES 语法转化为浏览器能识别的语法（babel-preset-*）</p></li><li><p>2 polyfill 浏览器兼容：让低版本浏览器兼容最新版 ES 的 API</p></li></ul><h5 id="babel-preset" tabindex="-1"><a class="header-anchor" href="#babel-preset" aria-hidden="true">#</a> babel-preset-*</h5>`,30),x=n("li",null,[n("h6",{id:"babel-通过语法转换器-能够支持最新版本的-javascript-语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#babel-通过语法转换器-能够支持最新版本的-javascript-语法","aria-hidden":"true"},"#"),s(" Babel 通过语法转换器，能够支持最新版本的 JavaScript 语法")])],-1),_=n("h6",{id:"babel-preset-用来指定我们书写的是什么版本的-js-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#babel-preset-用来指定我们书写的是什么版本的-js-代码","aria-hidden":"true"},"#"),s(" babel-preset-* 用来指定我们书写的是什么版本的 JS 代码")],-1),S={href:"http://es6.ruanyifeng.com/#docs/intro#%E8%AF%AD%E6%B3%95%E6%8F%90%E6%A1%88%E7%9A%84%E6%89%B9%E5%87%86%E6%B5%81%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[n("p",null,"ES2015 也就是 ES6, 下一个版本是 ES7, 从 ES6 到 ES7 之间经历了 5 个阶段")],-1),E=n("li",null,[n("p",null,"babel-preset-es2015 转换 es6 的语法")],-1),D=n("li",null,[n("p",null,"babel-preset-stage-0 转换比 es6 更新的语法")],-1),B=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Stage <span class="token number">0</span> <span class="token operator">-</span> Strawman（展示阶段）
Stage <span class="token number">1</span> <span class="token operator">-</span> Proposal（征求意见阶段）
Stage <span class="token number">2</span> <span class="token operator">-</span> Draft（草案阶段）
Stage <span class="token number">3</span> <span class="token operator">-</span> Candidate（候选人阶段）
Stage <span class="token number">4</span> <span class="token operator">-</span> Finished（定案阶段）

Stage <span class="token number">0</span> is <span class="token string">&quot;i&#39;ve got a crazy idea&quot;</span><span class="token punctuation">,</span>
stage <span class="token number">1</span> is <span class="token string">&quot;this idea might not be stupid&quot;</span><span class="token punctuation">,</span>
stage <span class="token number">2</span> is <span class="token string">&quot;let&#39;s use polyfills and transpilers to play with it&quot;</span><span class="token punctuation">,</span>
stage <span class="token number">3</span> is <span class="token string">&quot;let&#39;s let browsers implement it and see how it goes&quot;</span><span class="token punctuation">,</span>
stage <span class="token number">4</span> is <span class="token string">&quot;now it&#39;s javascript&quot;</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="babel-polyfill-和-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-polyfill-和-transform-runtime" aria-hidden="true">#</a> babel-polyfill 和 transform-runtime</h5>`,2),C=n("li",null,[s("作用：实现浏览器对不支持 API 的兼容（兼容旧环境、填补） "),n("ul",null,[n("li",null,"在低版本浏览器中使用高级的 ES6 或 ES7 的方法或函数，比如：'abc'.padStart(10)")])],-1),P=n("li",null,"方式一 [polyfill](https://babeljs.io/docs/usage/polyfill/#usage-in - node-browserify-webpack)",-1),A={href:"https://babeljs.io/docs/plugins/transform-runtime/",target:"_blank",rel:"noopener noreferrer"},J=n("ul",null,[n("li",null,"方式一：npm i -S babel-polyfill"),n("li",null,"方式二：npm i -D babel-plugin-transform-runtime 和 npm i -S babel-runtime")],-1),I=n("li",null,"注意：babel-runtime 包中的代码会被打包到你的代码中（-S）",-1),L=p(`<p>区别： polyfill 所有兼容性问题，都可以通过 polyfill 解决（包括：实例方法）、污染全局环境</p><p>runtime 除了实例方法以外，其他兼容新问题都能解决、不污染全局环境</p><ul><li><p>polyfill：如果想要支持全局对象（比如：<code>Promise</code>）、静态方法（比如：<code>Object.assign</code>）或者<strong>实例方法</strong>（比如：<code>String.prototype.padStart</code>）等，那么就需要使用<code>babel-polyfill</code></p></li><li><p>babel-runtime ：提供了兼容旧环境的函数，使用的时候，需要我们自己手动引入 比如： const Promise = require(&#39;babel-runtime/core-js/promise&#39;) 存在的问题：</p><ul><li>1 手动引入太繁琐</li><li>2 多个文件引入同一个 helper（定义），造成代码重复，增加代码体积</li></ul></li><li><p>babel-plugin-transform-runtime：</p><ul><li>1 自动引入 helper（比如，上面引入的 Promise）</li><li>2 babel-runtime 提供 helper 定义，引入这个 helper 即可使用，避免重复</li><li>3 依赖于 babel-runtime 插件</li></ul></li><li><p>transform-runtime 插件的使用： 直接在 .bablerc 文件中，添加一个 plugins 的配置项即可！！！</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;transform-runtime&quot;</span>
  <span class="token punctuation">]</span>

<span class="token comment">/*
  babel-polyfill 的使用步骤：
  1 main.js
*/</span>
<span class="token comment">// 第一行引入</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;babel-polyfill&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>


<span class="token comment">// 2 webpack.config.js 配置</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-polyfill&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./js/main.js&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h5><ul><li>babel-core babel 核心包</li><li>babel-loader 用来解析 js 文件</li><li>babel-preset-* 新 ES 语法的解析和转换</li><li>transform-runtime / babel-polyfill 兼容旧浏览器，到达支持新 API 目的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断浏览器是否兼容 padStart 这个 API</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>padStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果不兼容, 就自己模拟 padStart的功能实现一份</span>
  <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">padStart</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">padStart</span><span class="token punctuation">(</span><span class="token parameter">targetLength<span class="token punctuation">,</span> padString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function W($,M){const a=l("ExternalLinkIcon");return i(),o("div",null,[r,n("h5",u,[d,s(),n("a",k,[s("前端模块系统的演进"),e(a)])]),b,n("p",null,[n("a",v,[s("webpack 中文网"),e(a)]),n("a",m,[s("webpack 1.0"),e(a)]),n("a",h,[s("webpack 2.x+"),e(a)]),n("a",g,[s("入门 Webpack，看这篇就够了"),e(a)])]),y,n("p",null,[n("a",f,[s("webpack - Loaders"),e(a)]),n("a",w,[s("webpack - 管理资源示例"),e(a)])]),j,n("ul",null,[x,n("li",null,[_,n("p",null,[n("a",S,[s("ES6 语法提案的批准流程"),e(a)])])]),q,E,D]),B,n("ul",null,[C,P,n("li",null,[s("方式二 "),n("a",A,[s("transform-runtime"),e(a)]),J]),I]),L])}const F=t(c,[["render",W],["__file","Webpack_babel.html.vue"]]);export{F as default};
