const t=JSON.parse(`{"key":"v-3ca37a80","path":"/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%9F%B3/new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html","title":"new命令原理","lang":"zh-CN","frontmatter":{"title":"new命令原理","date":"2019-12-25T14:27:01.000Z","category":["前端","JavaScript文章"],"tag":["js"],"description":"使用 new 命令时，它后面的函数依次执行下面的步骤： 1. 创建一个空对象，作为将要返回的实例对象。 2. 将这个空对象的原型，指向构造函数的 prototype 属性。 3. 将这个空对象赋值给函数内部的 this 关键字。 4. 开始执行构造函数内部的代码。 5. 如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。","head":[["meta",{"property":"og:url","content":"https://chenDevs.github.io/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%9F%B3/new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"new命令原理"}],["meta",{"property":"og:description","content":"使用 new 命令时，它后面的函数依次执行下面的步骤： 1. 创建一个空对象，作为将要返回的实例对象。 2. 将这个空对象的原型，指向构造函数的 prototype 属性。 3. 将这个空对象赋值给函数内部的 this 关键字。 4. 开始执行构造函数内部的代码。 5. 如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Chen"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2019-12-25T14:27:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"new命令原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-25T14:27:01.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Chen\\",\\"url\\":\\"/logo.png\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"前端开发/前端基石/new命令原理.md","localizedDate":"2019年12月25日","autoDesc":true}`);export{t as data};
