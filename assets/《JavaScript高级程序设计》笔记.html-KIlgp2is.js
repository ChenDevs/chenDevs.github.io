import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-xxrfxtC2.js";const e={},t=p(`<h1 id="《javascript-高级程序设计》笔记" tabindex="-1"><a class="header-anchor" href="#《javascript-高级程序设计》笔记" aria-hidden="true">#</a> 《JavaScript 高级程序设计》笔记</h1><h2 id="第-1-章-javascript-简介" tabindex="-1"><a class="header-anchor" href="#第-1-章-javascript-简介" aria-hidden="true">#</a> 第 1 章 JavaScript 简介</h2><ul><li><p>JavaScript 诞生于<strong>1995</strong>年</p></li><li><p>一个完整的 JavaScript 由这三部分组成：</p><ul><li><strong>ECMAScript</strong> (核心)</li><li><strong>DOM</strong> (文档对象模型)</li><li><strong>BOM</strong> (浏览器对象模型)</li></ul></li><li><p>ECMAScript 的 <strong>宿主环境</strong> 包含 ：</p><ul><li>浏览器</li><li>Node</li><li>flash</li></ul></li><li><p>ECMAScript 大致规定了下列组成部分：</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象</li></ul></li></ul><h2 id="第-2-章-在-html-中使用-javascript" tabindex="-1"><a class="header-anchor" href="#第-2-章-在-html-中使用-javascript" aria-hidden="true">#</a> 第 2 章 在 HTML 中使用 JavaScript</h2><ul><li><code>&lt;script&gt;</code> 标签有下列常见属性： <ul><li>async 表示立即下载脚本，不妨碍页面的其他操作（异步下载） <ul><li>无法保证每个 js 的顺序</li><li>用于互不依赖的 js</li><li>主要目的是不让页面等 js</li></ul></li><li>defer 延迟到文档完全解析和显示之后在执行 <ul><li>在<code>&lt;/html&gt;</code>标签之后执行</li></ul></li><li>src 外部文件链接</li><li>type 表示编写代码使用的脚本语言的内容类型 <ul><li><code>text/javascript</code></li></ul></li></ul></li></ul><h2 id="第-3-章-基本概念" tabindex="-1"><a class="header-anchor" href="#第-3-章-基本概念" aria-hidden="true">#</a> 第 3 章 基本概念</h2><ul><li><p>语法，借鉴了 C 语言</p><ul><li><strong>区分大小写</strong></li><li><strong>标识符</strong>，指的是<strong>变量、函数、属性</strong>的名字 <ul><li>第一个字符必须是 字母、下划线、或美元符号</li><li>其他字符可以是字母、下划线、美元符号或数字</li></ul></li></ul></li><li><p>严格模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据类型</p><ul><li>基本数据类型 <ul><li>Undefined、Null、Boolean、Number、String</li><li><code>typeof</code>操作符，一般用于基本类型的检测，返回相应类型的字符串 <ul><li>“undefined”,&quot;boolean&quot;,&quot;string&quot;,&quot;number&quot;,&quot;object&quot;,&quot;function&quot;</li></ul></li></ul></li><li>复杂数据类型 <ul><li>Object</li></ul></li></ul></li><li><p><code>Null</code>类型</p><ul><li>表示<strong>空对象指针</strong></li><li>只要意在保存对象的变量还没有真正保证对象，则保存<code>null</code></li><li><code>undefined</code>派生自<code>null</code>，因此用<code>==</code>比较返回<code>true</code></li></ul></li><li><p>浮点数，指的是数值中包含一个小数点，并且小数点后面至少有一位数字</p></li><li><p>NaN</p><ul><li>任何涉及 NaN 的操作都返回<code>NaN</code></li><li><code>NaN</code>与任何值都不相等，包括<code>NaN</code>本身</li></ul></li><li><p>数值转换</p><ul><li>有 3 个函数可以把非数值转换为数值 <ul><li>Number() 可以用于任何数据类型</li><li>parseInt() 专门用于字符串转数值，用于解析整数</li><li>parseFloat() 专门用于字符串转数值，用于解析浮点数</li></ul></li></ul></li><li><p>字符串</p><ul><li>数值、布尔值、对象、字符串值本身 都有 toString()方法，用于转为字符串</li><li>undefined 和 null 没有 toString()方法，但可以使用 String()方法</li></ul></li><li><p>Object 类型</p><ul><li><p>对象其实就是一组数据与功能的集合</p></li><li><p>使用 Object()构造函数创建对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 同 obj = {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>每个对象实例都有下列属性和方法</p><ul><li><code>constructor</code> 指向用于创建当前对象的构造函数 。（对于上面例子而言，就是<code>Object()</code>）</li><li><code>hasOwnProperty(propertyName)</code> 用于检查给定属性是否在当前对象实例中</li><li><code>isPrototypeOf(Object)</code> 用于检查传入的对象是否是当前对象的原型</li><li><code>propertyIsEnumerable(propertyName)</code> 用于检查给定的属性是否能够使用<code>for-in</code>来枚举</li><li><code>toLocaleString()</code> 返回对象的字符串表示，该字符串与执行环境的地区对应</li><li><code>toString()</code> 返回对象的字符串表示</li><li><code>valueOf()</code> 返回对象的字符串、数值、布尔值表示。通常与<code>toString()</code>返回值相同</li></ul><p><strong>所有对象都有以上属性和方法</strong></p></li></ul></li><li><p><strong>操作符</strong></p><ul><li>一元操作符 <ul><li>++</li></ul><hr><ul><li>前置与后置的区别是与其他数运算时，前置会先执行递增（减）再与其他数运算，后置会先与其他数运算再对自身执行递增(减)</li></ul></li><li>布尔操作符 <ul><li>与 (&amp;&amp;) <ul><li>短路操作，即如果第一个操作数能决定结果，就不会对第二个操作数求值</li></ul></li><li>或 (||) <ul><li>短路操作，即如果第一个操作数能决定结果，就不会对第二个操作数求值</li></ul></li><li>非 (!) <ul><li>先使用 Boolean()转成布尔值再取反</li></ul></li></ul></li></ul></li><li><p><strong>语句</strong>（也称流控制语句）</p><ul><li><p>if-else</p></li><li><p>do-while</p><ul><li><p>后测试循环语句，在对表达式求值之前，循环体内的代码至少会被执行一次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  i <span class="token operator">+=</span> <span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 只要i小于10就会一直循环</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>while</p><ul><li><p>前测试语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">+=</span> <span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token comment">// 只要i小于10就会一直循环</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>for</p><ul><li><p>使用 while 循环做不到的，使用 for 循环同样做不到。就是说，for 循环只是把与循环有关的代码集合在一个位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 条件<span class="token punctuation">;</span> 循环后执行<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>break 立即退出循环</p></li><li><p>continue 退出当前单次循环</p></li></ul></li><li></li><li><p>for- in 用来枚举对象的属性</p></li></ul></li><li><p>函数</p><ul><li>任何函数都可以在任何时候返回任何值</li><li>未指定返回值的函数会返回一个 undefined</li><li>通过 arguments 访问参数，它是一个类数组</li></ul></li></ul><h2 id="第-4-章-变量、作用域和内存问题" tabindex="-1"><a class="header-anchor" href="#第-4-章-变量、作用域和内存问题" aria-hidden="true">#</a> 第 4 章 变量、作用域和内存问题</h2><ul><li><p>变量包含两种类型的值：</p><ul><li>基本类型值，指的是简单的数据段</li><li>引用类型值，指的是那些可能由多个值构成的<strong>对象</strong></li></ul></li><li><p>复制变量值</p><ul><li>复制基本类型的变量值只是复制了该值的副本</li><li>复制引用类型的变量值时，同样也会将存储在变量对象的值复制一份放到新变量的空间中，不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。两个变量指向同一个对象。</li></ul></li><li><p>传递参数</p><ul><li>所有函数的参数都是按值传递的</li></ul></li><li><p>检测类型</p><ul><li><code>typeof</code> 检测基础类型</li><li><code>instanceof</code>检测引用类型 <ul><li>变量 instanceof 构造函数（例：obj instanceof Object）</li><li>所有引用类型的值都是 Object 的实例</li></ul></li></ul></li><li><p>执行环境</p><ul><li>在浏览器中，全局执行环境是<code>window</code>对象</li><li>每个函数都有自己的<strong>执行环境</strong></li></ul></li><li><p>作用域链</p><ul><li>当代码在一个环境中执行时，会创建变量对象的一个<strong>作用域链</strong></li><li>作用域链的前端，始终是当前执行的代码所在环境的变量对象。</li><li>作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含对象。这样一直延续到全局执行环境。</li><li>全局执行环境的变量对象始终都是作用域链中的最后一个对象。</li></ul></li><li><p>垃圾收集</p><ul><li>JavaScript 具有自动垃圾收集机制 <ul><li>对于不再使用的变量打上标记，被打上标记的变量将在执行回收时被清除，释放内存空间。</li></ul></li></ul></li></ul><h2 id="第-5-章-引用类型" tabindex="-1"><a class="header-anchor" href="#第-5-章-引用类型" aria-hidden="true">#</a> 第 5 章 引用类型</h2><ul><li><p>引用类型的值是引用类型的一个实例</p></li><li><p>引用类型就是一种数据结构，描述了一类对象所具有的属性和方法</p></li><li><p>创建 Object 实例的方式有两种：</p><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 与 new Object() 相同，但实际不会调用Object构造函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>访问对象的属性有两种：</p><ul><li>点表示法 和 方括号表示法</li></ul></li></ul><h3 id="array-类型" tabindex="-1"><a class="header-anchor" href="#array-类型" aria-hidden="true">#</a> Array 类型</h3><ul><li><p>length 属性不是只读的</p></li><li><p>检测数组</p><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>转换方法</p><ul><li>toLocaleString() 与 toString()相同</li><li>toString() 返回数组中每个值的字符串形式用逗号分隔拼接而成的字符串</li><li>valueOf() 返回数组本身</li></ul></li></ul><h4 id="join-转换方法-不改原数组" tabindex="-1"><a class="header-anchor" href="#join-转换方法-不改原数组" aria-hidden="true">#</a> join() 转换方法 (不改原数组)</h4><p>接收一个参数，用作分隔符的字符串，然后返回包含所有数组项的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arrStr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;red|blue|green&quot;</span>

arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;red,blue,green&quot;</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;redbluegreen&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="栈方法-后进先出-push-、pop-改变原数组" tabindex="-1"><a class="header-anchor" href="#栈方法-后进先出-push-、pop-改变原数组" aria-hidden="true">#</a> 栈方法，后进先出 push() 、pop() (改变原数组)</h4><ul><li>push() 向数组末尾添加成员，返回总长</li><li>pop() 移除数组末尾一个成员，返回该成员</li></ul><h4 id="队列方法-先进先出-push-、shift-、unshift-改变原数组" tabindex="-1"><a class="header-anchor" href="#队列方法-先进先出-push-、shift-、unshift-改变原数组" aria-hidden="true">#</a> 队列方法，先进先出 push()、shift() 、unshift() (改变原数组)</h4><ul><li><p>shift() 移除数组首个成员，返回该成员</p></li><li><p>unshift() 在数组前面添加成员，返回总长</p></li></ul><p>push()和 shift() 形成队列方法</p><p>unshift 和 pop() 形成反方向队列方法</p><h4 id="重排序方法-reverse-反转-sort-排序-改变原数组" tabindex="-1"><a class="header-anchor" href="#重排序方法-reverse-反转-sort-排序-改变原数组" aria-hidden="true">#</a> 重排序方法 reverse() 反转 sort() 排序 （改变原数组）</h4><ul><li>reverse() 反转数组项的顺序</li><li>sort() 接收一个函数作为参数，函数接收两个参数。 <ul><li>自定义排序：函数内，如果第一个参数应该位于第二个之前，则手动返回一个负数，如果两个参数相等，手动返回 0，如果第一个参数应该位于第二个参数之后，则手动返回一个正数。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 升序</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        retunr <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token comment">// 升序， b-a 降序</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作方法-concat-拼接-slice-切片-splice-移接" tabindex="-1"><a class="header-anchor" href="#操作方法-concat-拼接-slice-切片-splice-移接" aria-hidden="true">#</a> 操作方法 concat() 拼接，slice() 切片，splice() 移接</h4><ul><li><p>concat() 拼接数组 （<strong>不改原数组</strong>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>slice() 切片（<strong>不改原数组</strong>）</p><ul><li>slice(起始位置 [, 结束位置]) 返回起始位置到结束位置的成员，不包含结束位置。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [2,3]</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>splice() 移接 （<strong>改变原数组</strong>）</p><ul><li>splice(起始位置, 要删除的个数，要插入的项) <ul><li>要插入的项 可以有 0 个或多个</li></ul></li><li>splice() 始终返回一个数组，该数组成员中包含原始数组中被删除的项，如果没有则返回空数组。</li><li>数组最强大的方法，可用于删除、插入、替换操作</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [2]</span>
arr <span class="token comment">// [1,3,4]</span>

arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
arr <span class="token comment">// [1,2,&#39;a&#39;,3,4]</span>

arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [4]</span>
arr <span class="token comment">// [1,2,3,&#39;a&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="位置方法-indexof-、lastindexof" tabindex="-1"><a class="header-anchor" href="#位置方法-indexof-、lastindexof" aria-hidden="true">#</a> 位置方法 indexOf()、lastIndexOf()</h4><ul><li>查找项的位置，没有则返回-1</li><li>indexOf() 从前面开始找，lastIndexOf() 从后面开始找</li></ul><h4 id="迭代方法-every-、some-、filter-、map-、foreach-都不会改变原数组" tabindex="-1"><a class="header-anchor" href="#迭代方法-every-、some-、filter-、map-、foreach-都不会改变原数组" aria-hidden="true">#</a> 迭代方法 every()、some() 、filter()、map() 、forEach() （都不会改变原数组）</h4><ul><li><p>5 个迭代方法，每个方法都接收两个参数：</p><ul><li>在每项上运行的函数</li><li>运行函数的作用域对象</li></ul></li><li><p>函数接收三个参数：</p><ul><li>数组项的值</li><li>该项的索引</li><li>数组本身</li></ul></li><li><p>every() 如果函数对每项都返回 true，则返回 true</p><ul><li><p>例：判断数组每一项是否都大于 2</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
result <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>some() 如果函数对任一项返回 true，则返回 true</p><ul><li><p>例：判断数组是否包含大于 2 的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
result <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>filter() 返回函数会返回 true 的项组成的数组</p><ul><li><p>例：过滤掉数组中小于等于 2 的数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
result <span class="token comment">// [3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>map() 返回每次函数调用的结果组成的数组</p><ul><li><p>例：给数组每一项乘以 2</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
result <span class="token comment">// [2,4,6,8,10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>forEach() 循环数组每一项，没有返回值</p><ul><li><p>例：循环每一项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 做一些操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="归并方法-reduce-reduceright" tabindex="-1"><a class="header-anchor" href="#归并方法-reduce-reduceright" aria-hidden="true">#</a> 归并方法 reduce() reduceRight()</h4><ul><li><p>reduce() 归并为</p></li><li><p>reduceRight() 从右边归并</p></li><li><p>这两个方法都会迭代数组所有项，然后构建一个最终结果并返回</p></li><li><p>方法接收两个参数： 每一项上调用的函数，归并基础的初始值</p></li><li><p>函数接收 4 个参数：前一个的值、当前值、当前值的索引、数组对象</p></li><li><p>例：求数组每一项之和</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> number<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> prev <span class="token operator">+</span> cur
<span class="token punctuation">}</span><span class="token punctuation">)</span>
result <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>reduce()方法，第一次执行函数时，prev 是数组的第一项，cur 是数组的第二项</p></li></ul><h2 id="第-6-章-面向对象的程序设计" tabindex="-1"><a class="header-anchor" href="#第-6-章-面向对象的程序设计" aria-hidden="true">#</a> 第 6 章 面向对象的程序设计</h2><h3 id="_6-1-理解对象" tabindex="-1"><a class="header-anchor" href="#_6-1-理解对象" aria-hidden="true">#</a> 6.1 理解对象</h3><ul><li>对象的定义：无序属性的集合，其属性可以包含基本值、对象或者函数。 <ul><li>一组键值对，其中值可以是数据或函数</li></ul></li></ul><h4 id="_6-1-1-对象的属性" tabindex="-1"><a class="header-anchor" href="#_6-1-1-对象的属性" aria-hidden="true">#</a> 6.1.1 对象的属性</h4><p>​ 包含两种：<strong>数据属性</strong> 和 <strong>访问器属性</strong></p><h5 id="_1-数据属性" tabindex="-1"><a class="header-anchor" href="#_1-数据属性" aria-hidden="true">#</a> 1.数据属性</h5><ul><li>configurable 可配置性（限制 delete 删除属性和<code>Object.defineProperty()</code>方法是否起效。），默认 true</li><li>enumerable 可列举性，默认 true</li><li>writable 可写性，默认 true</li><li>value 值，默认 undefined</li></ul><p>使用<code>Object.defineProperty()</code>方法修改这些默认属性。接收三个值：<strong>属性所在的对象、属性名、描述符对象</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;xu&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// xu</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;gao&#39;</span> <span class="token comment">// 修改无效</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// xu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用此方法定义属性如未指定<code>configurable</code>、<code>enumerable</code>、<code>writable</code> 将默认<code>false</code>。</p><h5 id="_2-访问器属性" tabindex="-1"><a class="header-anchor" href="#_2-访问器属性" aria-hidden="true">#</a> 2.访问器属性</h5><p>包含两个函数：getter 函数和 setter 函数（这两个函数都是非必需）。读取时调用 getter，访问时调用 setter。</p><p>使用<code>Object.defineProperty()</code>方法定义访问器属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">_year</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
  <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2020</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue
      <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2020</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2021</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 getter 函数和 setter 函数只指定其中一个时，另外一个将不能用。</p><h4 id="_6-1-2-定义多个属性" tabindex="-1"><a class="header-anchor" href="#_6-1-2-定义多个属性" aria-hidden="true">#</a> 6.1.2 定义多个属性</h4><p><code>Object.defineProperties()</code>方法定义多个属性。接收两个参数: 要添加或修改属性的对象 、第二个参数是一个对象，其属性与第一个参数中的属性一一对应。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">_year</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据属性</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2004</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据属性</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 访问器属性</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue
        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 定义了三个属性，每个属性有不同的描述符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-3-读取属性的特性-描述符对象" tabindex="-1"><a class="header-anchor" href="#_6-1-3-读取属性的特性-描述符对象" aria-hidden="true">#</a> 6.1.3 读取属性的特性（描述符对象）</h4><p><code>Object.getOwnPropertyDescriptor()</code>方法获取描述符，接收两个参数： 属性所在的对象、属性名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">_year</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据属性</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2004</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据属性</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 访问器属性</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue
        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">&#39;_year&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token comment">// {value: 2020, writable: true, enumerable: false, configurable: false}</span>
<span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token comment">// {enumerable: false, configurable: false, get: ƒ, set: ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-创建对象" tabindex="-1"><a class="header-anchor" href="#_6-2-创建对象" aria-hidden="true">#</a> 6.2 创建对象</h3><p>使用 Object 构造函数或对象字面量方式创建对象。缺点：使用同一个接口创建很多对象时，会产生大量重复代码。解决方案：使用工厂模式的一种变体。</p><h4 id="_6-2-1-工厂模式" tabindex="-1"><a class="header-anchor" href="#_6-2-1-工厂模式" aria-hidden="true">#</a> 6.2.1 工厂模式</h4><p>用函数封装以特定接口创建对象的细节</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//显式创建对象</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  o<span class="token punctuation">.</span>job <span class="token operator">=</span> job
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> o <span class="token comment">//返回对象</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
person1 <span class="token keyword">instanceof</span> <span class="token class-name">createPerson</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工厂模式解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎样知道一个对象的类型）</p><h4 id="_6-2-2-构造函数模式" tabindex="-1"><a class="header-anchor" href="#_6-2-2-构造函数模式" aria-hidden="true">#</a> 6.2.2 构造函数模式</h4><p>类似 Object、Array 原生构造函数，在运行时自动出现在执行环境中。 自定义构造函数可以将它的实例标示为一种特定类型（胜过工厂模式）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment">//将属性赋给this对象</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">//true</span>
person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】a. 构造函数应以大写字母开头，b. 创建 Person 实例需要使用 new 操作符，c. 实例对象包含 constructor 属性（值是该构造函数）</p></blockquote><p>构造实际步骤：</p><ul><li>（1）创建一个新对象</li><li>（2）将构造函数的作用域赋给新对象（this 指向新对象）</li><li>（3）执行构造函数中代码</li><li>（4）返回新对象</li></ul><p>将构造函数当做函数</p><ul><li>a. 当做构造函数，使用 new 调用</li><li>b. 作为普通函数，直接调用。浏览器中，this 为 window（即给 window 添加属性和方法）</li><li>c. 在另一个对象的作用域中调用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">&#39;Nurse&#39;</span><span class="token punctuation">)</span>
o<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//&quot;Jack&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数的问题</p><p>每个方法都要在每个实例上重新创建一遍，即构造出的不同对象 person1、person2，其同名方法（sayName）并不是同一个 Function 实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;console.log(this.name)&#39;</span><span class="token punctuation">)</span> <span class="token comment">//每个person实例都包含一个不同Function实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际并不需要在执行代码前就把函数绑定到特定对象上面。解决：将函数定义转移到构造函数外部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job
  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> sayName
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">&#39;Nurse&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>sayName <span class="token operator">==</span> person2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】person1 和 person2 对象共享了在全局作用域定义的同一个 sayName() 函数；但是这样一来，自定义引用类型就失去了封装性。</p></blockquote><h4 id="_6-2-3-原型模式" tabindex="-1"><a class="header-anchor" href="#_6-2-3-原型模式" aria-hidden="true">#</a> 6.2.3 原型模式</h4><p>prototype：通过构造函数创建的那个对象实例的原型对象 每个函数都有一个 prototype 指针属性，指向一个包含由特定类型的所有实例共享的属性和方法 使用原型对象的好处：让所有对象实例共享它所包含的属性和方法（不必在构造函数中定义对象实例的信息）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span> <span class="token comment">//将属性赋给this对象</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">&#39;Doctor&#39;</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Nicholas</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Nicholas</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>sayName <span class="token operator">==</span> person2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】此时构造函数变成了空函数，person1 和 person2 访问的都是同一组属性和同一个 sayName 函数</p></blockquote><h5 id="_1-理解原型对象" tabindex="-1"><a class="header-anchor" href="#_1-理解原型对象" aria-hidden="true">#</a> 1. 理解原型对象</h5><p>每个函数都有一个 prototype 属性，它指向函数的原型对象。 默认情况下，所有原型对象都会自动获得一个 constructor 属性，其指向 prototype 属性所在函数的指针。前述 Person.prototype.constructor 指向 Person 函数。 每个构造函数创建的新实例都包含一个[[Prototype]]指针属性(浏览器中为<strong>proto</strong>)，指向构造函数的原型对象。指针连接存在于实例与构造函数的原型对象之间（实例对象与构造函数没有直接关系）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>person1
Person {}
  __proto__:
  age:24
  job:&quot;Doctor&quot;
  name:&quot;Nicholas&quot;
  sayName:ƒ ()
  constructor:ƒ Person(name, age, job)
  __proto__:Object
Person
ƒ Person(name, age, job) { Person.prototype.name = &#39;Nicholas&#39;; //将属性赋给this对象 Person.prototype.age = 24;
Person.prototype.job = &#39;Doctor&#39;; Person.prototype.sayName = function() { consol…

Person.prototype
{name: &quot;Nicholas&quot;, age: 24, job: &quot;Doctor&quot;, sayName: ƒ, constructor: ƒ}
age:24
job:&quot;Doctor&quot;
name:&quot;Nicholas&quot;
sayName:ƒ ()
constructor:ƒ Person(name, age, job)
__proto__:Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确定实例对象与原型对象之间的关系：（通过实例对象获取[[Prototype]]指针指向的原型对象）</p><ul><li>1、[[Prototype]]在浏览器中支持的<strong>proto</strong>属性</li><li>2、原型对象的 isPrototypeOf(obj) 方法（若参数的[[Prototype]]指向调用该方法的对象，则返回 true）</li><li>3、Object.getPrototypeOf(obj)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">==</span> person1<span class="token punctuation">.</span>__proto__ <span class="token comment">//true</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token comment">//true</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象实例共享原型属性和方法的基本原理：</p><blockquote><p>调用 person1.sayName()时，会先后执行两次搜索。首先解析器搜索实例 person1 是否有 sayName 属性，结果是没有；然后搜索 person1 的原型是否有 sayName 属性，结果有；于是读取保存在原型对象中的函数。</p></blockquote><p>重定义原型属性：</p><blockquote><p>可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。 在实例中添加的属性与该原型中的属性同名时，该实例属性会被创建，并屏蔽原型中的同名属性。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Greg&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//&quot;Greg&quot; ——来自实例</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//&quot;Nicholas&quot; ——来自原型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 delete 删除实例属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Greg&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//Greg</span>
<span class="token keyword">delete</span> person1<span class="token punctuation">.</span>name
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//Nicholas</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hasOwnProperty(prop)方法检测该属性是否在实例中： 便于知道访问的是实例属性还是原型属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Greg&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token keyword">delete</span> person1<span class="token punctuation">.</span>name
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、原型与-in-操作符" tabindex="-1"><a class="header-anchor" href="#_2、原型与-in-操作符" aria-hidden="true">#</a> 2、原型与 in 操作符</h5><blockquote><p>in 操作符的两种使用场景：单独使用、for-in 循环</p></blockquote><p>（1）单独使用时，in 操作符会在通过对象能够访问给定属性时返回 true，无论该属性存在于实例中还是原型中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">//true</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Greg&#39;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）使用 for-in 循环时，返回是是所有能通过对象访问的、可枚举的属性（既包括实例中的属性，也包括原型中的属性）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//实例无属性</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> person1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//name</span>
<span class="token comment">//age</span>
<span class="token comment">//job</span>
<span class="token comment">//sayName</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.keys(obj) 取得对象所有可枚举属性 //return [props] 参数为原型对象时，返回原型对象属性；参数为实例对象时，返回实例对象属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//[&quot;name&quot;, &quot;age&quot;, &quot;job&quot;, &quot;sayName&quot;]</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Rob&#39;</span>
person1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token comment">//[&quot;name&quot;, &quot;age&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.getOwnPropertyNames(obj) 获取所有实例属性（无论是否可枚举）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token comment">//[]</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//[&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;job&quot;, &quot;sayName&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】constructor 为不可枚举属性。Object.keys(person1), Object.getOwnPropertyNames(person1) 都可以替代 for-in 循环</p></blockquote><h5 id="_3、更简单的原型语法" tabindex="-1"><a class="header-anchor" href="#_3、更简单的原型语法" aria-hidden="true">#</a> 3、更简单的原型语法</h5><p>用一个包含所有属性和方法的对象字面量来重写整个原型对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">//ƒ Object() { [native code] }</span>
<span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person <span class="token comment">//false</span>
<span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】：constructor 属性不在指向 Person。当创建一个函数时，同时会创建其 prototype 对象，该对象自动获得 constructor 属性。而这里本质上是重写了默认的 prototype 对象，因此 constructor 属性指向 Object 构造函数。</p></blockquote><p>设置恢复 constructor：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">//ƒ Person() {}</span>
<span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person <span class="token comment">//true</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token comment">//{constructor: ƒ, name: &quot;Nicholas&quot;, age: 25, sayName: ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】上述添加 constructor 属性，使得 constructor 的 [[Enumerable]] 特性被设置为 true。默认情况下，原生的 constructor 属性是不可枚举的</p></blockquote><p>Object.defineProperty(obj, prop, {descriptor}) 重设构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;consructor&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token comment">//{name: &quot;Nicholas&quot;, age: 25, sayName: ƒ, constructor: ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、原型的动态性" tabindex="-1"><a class="header-anchor" href="#_4、原型的动态性" aria-hidden="true">#</a> 4、原型的动态性</h5><p>由于在原型中查找值是一次搜索，因此对原型所做的修改都可反映出来。允许先创建实例，再为原型对象添加方法，然后实例调用该方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
person1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Hi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是当重写整个原型对象时，等于切断了构造函数与最初原型之间的联系 [[Prototype]] (<strong>proto</strong>) 实例对象的<strong>proto</strong>属性引用的仍是重写前的原型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Uncaught TypeError: person1.sayName is not a function</span>
person1<span class="token punctuation">.</span>__proto__ <span class="token comment">//{constructor: ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、原生对象的原型" tabindex="-1"><a class="header-anchor" href="#_5、原生对象的原型" aria-hidden="true">#</a> 5、原生对象的原型</h5><p>所有原生引用类型都在其构造函数上定义了方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sort <span class="token comment">//function</span>
<span class="token keyword">typeof</span> <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>substring <span class="token comment">//function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过原生对象的原型，还可以定义新方法：</p><p>例：为 String 包装类型添加 startsWith() 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">startsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】不推荐产品化的程序中修改原生对象的原型</p></blockquote><p>6、原型对象的问题</p><p>原型模式的最大问题是由其共享的本性导致的：</p><p>对于包含引用类型的属性来说，实例 1 对原型引用类型属性的修改会同时表现在其他实例中（而无法有属于自己的属性）——所以一般很少单独使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rob&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Van&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//Jack,Rob,Van</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//Jack,Rob,Van</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-4-组合使用构造函数和原型模式-广泛使用" tabindex="-1"><a class="header-anchor" href="#_6-2-4-组合使用构造函数和原型模式-广泛使用" aria-hidden="true">#</a> 6.2.4 组合使用构造函数和原型模式（广泛使用）</h4><p>构造函数用于定义实例属性（支持传参），原型模式用于定义方法和共享属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rob&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;Software Engineer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Van&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//Jack,Rob,Van</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//Jack,Rob</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> person2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-5-动态原型模式" tabindex="-1"><a class="header-anchor" href="#_6-2-5-动态原型模式" aria-hidden="true">#</a> 6.2.5 动态原型模式</h4><p>把所有信息封装在构造函数中，通过在构造函数中初始化原型，检查某个应该存在的方法是否有效，来决定是否需要初始化原型方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//属性</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>
     <span class="token comment">//方法</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">!=</span> <span class="token string">&#39;Function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Greg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】只在 sayName()方法不存在情况下才会将它加到原型中。首次调用构造函数会执行 if 中的原型方法初始化语句，此后不需要在修改了。</p></blockquote><p>使用动态原型模式时，不能使用对象字面量重写原型。（避免在已经创建了实例情况下重写原型，会切断现有实例与新原型之间的联系）</p><h4 id="_6-2-6-寄生构造函数模式" tabindex="-1"><a class="header-anchor" href="#_6-2-6-寄生构造函数模式" aria-hidden="true">#</a> 6.2.6 寄生构造函数模式</h4><p>创建的函数仅仅是包装对象，然后返回新创建的对象，使用 new 操作符实例化（仅这一点区别于工厂模式）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//显式创建对象</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  o<span class="token punctuation">.</span>job <span class="token operator">=</span> job
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> o <span class="token comment">//返回对象</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Greg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】返回对象与构造函数（原型）之间没有关系，函数返回的对象与在构造函数外部创建的对象没什么不同，所以不能依赖 instanceof 操作符确定对象类型</p></blockquote><h4 id="_6-2-7-稳妥构造函数模式" tabindex="-1"><a class="header-anchor" href="#_6-2-7-稳妥构造函数模式" aria-hidden="true">#</a> 6.2.7 稳妥构造函数模式</h4><p>稳妥对象（durable objects）：没有公共属性，新创建对象的实例方法不引用 this，不使用 new 操作符调用构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//显式创建对象</span>
  <span class="token comment">//可定义私有变量和函数</span>
  <span class="token comment">//公共方法</span>
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> o <span class="token comment">//返回对象</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">&#39;Doctor&#39;</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Greg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】除了调用 sayName()方法外，没有别的方法可以访问其数据成员，提供了安全性</p></blockquote><h3 id="_6-3-继承" tabindex="-1"><a class="header-anchor" href="#_6-3-继承" aria-hidden="true">#</a> 6.3 继承</h3><p>面向对象语言支持：接口继承（继承方法签名）、实现继承（继承实际方法）</p><p>ECMAScript 只支持实现继承，依靠原型链来实现</p><h4 id="_6-3-1-原型链" tabindex="-1"><a class="header-anchor" href="#_6-3-1-原型链" aria-hidden="true">#</a> 6.3.1 原型链</h4><p>原型链实现继承的思想：利用原型让一个引用类型继承另一个引用类型的属性和方法 让子类原型对象等于父类的实例，原型对象将包含一个指向另一个原型的指针； 继承：通过创建父类的实例，并将该实例赋给子类的原型实现。本质：重写子类原型对象，代之以一个父类的实例。即原来存在于父类的实例中的所有属性和方法，现在也存在于子类原型对象中了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">//继承了SuperType，子类原型包括父类实例属性和指向父类原型对象的指针</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty
<span class="token punctuation">}</span>
<span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>

<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype
<span class="token punctuation">{</span><span class="token literal-property property">getSuperValue</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ<span class="token punctuation">}</span>

<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype
SuperType <span class="token punctuation">{</span><span class="token literal-property property">property</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">getSubValue</span><span class="token operator">:</span> ƒ<span class="token punctuation">}</span>
  <span class="token literal-property property">getSubValue</span><span class="token operator">:</span><span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">property</span><span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span>
    <span class="token literal-property property">getSuperValue</span><span class="token operator">:</span><span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span>ƒ <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token literal-property property">__proto__</span><span class="token operator">:</span>Object

<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__
<span class="token punctuation">{</span><span class="token literal-property property">getSuperValue</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ<span class="token punctuation">}</span>

<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor
ƒ <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

instance<span class="token punctuation">.</span>__proto__
SuperType <span class="token punctuation">{</span><span class="token literal-property property">property</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">getSubValue</span><span class="token operator">:</span> ƒ<span class="token punctuation">}</span>

instance<span class="token punctuation">.</span>constructor
ƒ <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】a. 子类原型不仅具有父类实例所拥有的全部属性和方法，还有一个指针，指向父类的原型。 b.子类实例的 constructor 属性等于子类原型的 constructor 属性。而子类原型又指向父类原型，而父类原型有 constructor 属性，于是子类实例的 constructor 属性等于父类原型的 constructor 属性。</p></blockquote><h5 id="_1、别忘记默认的原型" tabindex="-1"><a class="header-anchor" href="#_1、别忘记默认的原型" aria-hidden="true">#</a> 1、别忘记默认的原型</h5><p>所有引用类型默认都继承了 Object，所有函数的默认原型都是 Object 的实例，因此默认原型都会有一个内部指针，指向 Object.prototype。（所有自定义类型都会继承 toString()、valueOf()等默认方法）完整的原型链如图：</p><h5 id="_2、确定原型和实例的关系" tabindex="-1"><a class="header-anchor" href="#_2、确定原型和实例的关系" aria-hidden="true">#</a> 2、确定原型和实例的关系</h5><p>（1）instanceof 操作符测试实例与原型链中出现过的构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SuperType</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SubType</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）isPrototypeof() 方法，只要是原型链中出现过的原型，都可以说是该原型链所派生出的实例的原型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、先替换原型再添方法" tabindex="-1"><a class="header-anchor" href="#_3、先替换原型再添方法" aria-hidden="true">#</a> 3、先替换原型再添方法</h5><p>子类覆盖（重定义）父类方法或添加父类没有的方法，需要在替换原型之后进行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">//继承了SuperType</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//添加新方法</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty
<span class="token punctuation">}</span>
<span class="token comment">//重写父类的方法</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】在通过原型链实现继承时，不能使用对象字面量(Object 实例)创建原型方法（会重写原型链）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//使用对象字面量添加新方法，会导致上一行代码无效</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">getSubType</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Uncaught TypeError: instance.getSuperValue is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、原型链的问题" tabindex="-1"><a class="header-anchor" href="#_4、原型链的问题" aria-hidden="true">#</a> 4、原型链的问题</h5><p>（1）最主要问题来自包含引用类型的原型：在构造函数中定义引用类型属性，并通过原型实现继承，父类实例的引用类型属性变成了子类原型的引用类型属性。相当于为子类原型创建引用类型属性一样：SubType.prototype.colors = [xxx]，所有子类实例都会共享这一引用属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//继承了SuperType</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//red,blue,green,black</span>
<span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//red,blue,green,black</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在创建子类实例时，不能向父类构造函数中传递参数（实践中很少单独使用原型链）</p><h4 id="_6-3-2-借用构造函数" tabindex="-1"><a class="header-anchor" href="#_6-3-2-借用构造函数" aria-hidden="true">#</a> 6.3.2 借用构造函数</h4><p>借用构造函数(constructor stealing)（伪造对象或经典继承）：在子类构造函数的内部使用父类构造函数。</p><blockquote><p>函数是：在特定环境中执行代码的对象</p></blockquote><h5 id="_1、向父类构造函数传递参数" tabindex="-1"><a class="header-anchor" href="#_1、向父类构造函数传递参数" aria-hidden="true">#</a> 1、向父类构造函数传递参数</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//继承了SuperType,同时传递参数</span>
  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">//实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>name<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">//Nicholas 29</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】为避免父类构造函数重写子类属性，可在调用父类构造函数后，添加子类自己的属性</p></blockquote><h5 id="_2、借用构造函数的问题" tabindex="-1"><a class="header-anchor" href="#_2、借用构造函数的问题" aria-hidden="true">#</a> 2、借用构造函数的问题</h5><p>方法都在构造函数中定义，函数复用无从谈起；父类原型中的方法对子类不可见。(?)</p><h4 id="_6-3-3-组合继承-combination-inheritance-——最常用继承" tabindex="-1"><a class="header-anchor" href="#_6-3-3-组合继承-combination-inheritance-——最常用继承" aria-hidden="true">#</a> 6.3.3 组合继承(combination inheritance)——最常用继承</h4><p>又称伪经典继承：将原型链和借用构造函数组合到一块</p><p>思路：使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//继承属性</span>
  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
  <span class="token comment">//实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token comment">//继承方法</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType <span class="token comment">//重写子类构造函数以便实例化传参</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span>
instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Nicholas</span>
instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//29</span>

<span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span>
instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Greg</span>
instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】组合继承最大问题：必须调用两次父类构造函数，一次是创建子类原型时，另一次是在子类构造函数内部。 即子类最终包含父类对象的全部实例属性，我们不得不在调用子类构造函数时重写这些属性。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>instance1
SubType <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">}</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">29</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">]</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Nicholas&quot;</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span>SuperType
    <span class="token literal-property property">colors</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">]</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span>ƒ <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token keyword">undefined</span>
    <span class="token literal-property property">sayAge</span><span class="token operator">:</span><span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token literal-property property">__proto__</span><span class="token operator">:</span>Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-4-原型式继承" tabindex="-1"><a class="header-anchor" href="#_6-3-4-原型式继承" aria-hidden="true">#</a> 6.3.4 原型式继承</h4><p>借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//临时构造函数</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o <span class="token comment">//将传入对象作为此构造函数的原型</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回临时构造函数新实例</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质：object() 对传入其中的对象执行一次浅复制</p><p>原型式继承要求必须有一个对象可以作为新对象的基础（原型），原型属性会被其他新对象所共享（相当于创建了初始对象的副本）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//临时构造函数</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o <span class="token comment">//将传入对象作为此构造函数的原型</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回临时构造函数新实例</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Shelby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Court&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Van&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Greg&#39;</span>
person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Rob&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
person2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Linda&#39;</span>
person2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//Shelby,Court,Van,Rob,Jack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ECMAScript 5 新增了 Object.create(protoObj, [propObj]) 方法规范了原型式继承 方法接收两参数：用作新对象原型的对象、为新对象定义额外属性的对象（可选） 传入一个参数时，Object.create(protoObj) 等于 Object(protoObj)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Shelby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Court&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Van&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Greg&#39;</span>
person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Rob&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
person2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Linda&#39;</span>
person2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">//Shelby,Court,Van,Rob,Jack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.create() 方法的第二个参数与 Object.defineProperties() 方法的第二个参数格式相同：每个属性都通过自己的描述符定义 （会覆盖原型对象上的同名属性）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Shelby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Court&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Van&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Greg&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//Greg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-5-寄生式继承" tabindex="-1"><a class="header-anchor" href="#_6-3-5-寄生式继承" aria-hidden="true">#</a> 6.3.5 寄生式继承</h4><p>寄生式继承与原型式继承紧密相关，与寄生构造函数和工厂模式相似：即创建一个仅用于封装继承过程的函数，函数内部增强对象，最后返回对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//临时构造函数</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o <span class="token comment">//将传入对象作为此构造函数的原型</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回临时构造函数新实例</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token comment">//调用构造函数创建新对象</span>
  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//增强对象</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> clone
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Shelby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Court&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Van&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//hi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【注】使用寄生式继承为对象添加函数，不能做到函数复用，与构造函数模式类似</p></blockquote><h4 id="_6-3-6-寄生组合式继承-最理想的继承范式" tabindex="-1"><a class="header-anchor" href="#_6-3-6-寄生组合式继承-最理想的继承范式" aria-hidden="true">#</a> 6.3.6 寄生组合式继承（最理想的继承范式）</h4><p>组合继承最大问题：必须调用两次父类构造函数，一次是创建子类原型时（子类原型得到两属性），另一次是在子类构造函数内部（在新对象上创建两实例属性）。新对象创建的实例属性屏蔽了原型中的两同名属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>instance1
SubType <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">}</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">29</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">]</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Nicholas&quot;</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span>SuperType
    <span class="token literal-property property">colors</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">]</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span>ƒ <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token keyword">undefined</span>
    <span class="token literal-property property">sayAge</span><span class="token operator">:</span><span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token literal-property property">__proto__</span><span class="token operator">:</span>Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>寄生式组合继承：通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</p><p>思路：不必为了指定子类的原型而调用父类的构造函数（避免了父类构造实例属性）。本质上，就是使用寄生式继承父类原型，再将结果指定给子类原型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//临时构造函数</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o <span class="token comment">//将传入的原型对象作为此构造函数的原型</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回临时构造函数新实例</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//创建子类原型对象，其原型为父类原型</span>
  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType <span class="token comment">//增强原型对象</span>
  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype <span class="token comment">//指定原型对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改写前面组合继承的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">//调用一次父类构造函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span>
instance1
SubType <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">}</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">33</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">]</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Jack&quot;</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span>SuperType
    <span class="token literal-property property">constructor</span><span class="token operator">:</span>ƒ <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token literal-property property">sayAge</span><span class="token operator">:</span><span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token literal-property property">__proto__</span><span class="token operator">:</span>
      <span class="token literal-property property">sayName</span><span class="token operator">:</span><span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token literal-property property">constructor</span><span class="token operator">:</span>ƒ <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
      <span class="token literal-property property">__proto__</span><span class="token operator">:</span>Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-小结" tabindex="-1"><a class="header-anchor" href="#_6-4-小结" aria-hidden="true">#</a> 6.4 小结</h3><h4 id="创建对象的模式" tabindex="-1"><a class="header-anchor" href="#创建对象的模式" aria-hidden="true">#</a> 创建对象的模式</h4><ul><li>工厂模式：使用简单的函数创建对象，为对象添加属性和方法，然后返回对象。被构造函数模式所取代。</li><li>构造函数模式：可以使用 new 操作符，但其成员无法复用（包括函数）</li><li>原型模式：使用构造函数的 prototype 属性来指定哪些应该共享的属性和方法。组合使用构造函数模式和原型模式时，使用构造函数定义实例属性，使用原型定义共享的属性和方法。</li></ul><h4 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h4><ul><li>原型链继承：通过将一个父类实例赋给子类原型实现，子类就能访问父类的所有属性和方法。 原型链的问题：对象实例共享所有继承的属性和方法（不宜单独使用） 解决原型链问题：借用构造函数。即在子类构造函数内部调用父类构造函数(call)，每个实例都具有自己的属性，只使用构造函数模式来定义类型。组合继承用的最多，其使用原型链继承共享的属性和方法，通过借用构造函数继承实例属性。</li><li>原型式继承：在不必预先定义构造函数情况下实现继承，本质是执行对给定对象的浅复制 Object.create()。而复制得到的副本可再改造。</li><li>寄生式继承：与原型式继承相似，结合了原型式继承和工厂模式，但对象函数无法复用。</li><li>寄生组合式继承：集寄生式继承和组合继承的优点，最有效。</li></ul><h2 id="第-7-章-函数表达式" tabindex="-1"><a class="header-anchor" href="#第-7-章-函数表达式" aria-hidden="true">#</a> 第 7 章 函数表达式</h2><p>定义函数的方式有两种：</p><ul><li>函数声明： 重要的是函数声明提升，函数表达式不会提升。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">funName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">funName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，funName() 可以正常调用，不会报错。因为在代码执行之前，解析器会率先读取函数声明，并使其在执行任何代码之前可用。</p><ul><li>函数表达式：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">funName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> <span class="token function-variable function">funName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子中，funName() 会报错，因为解析器会率先读取函数表达式，发现这是一个变量声明，因此会在任何代码执行之前就尝试获取 funName 的值。但这时候 funName 还没有被赋值，因此会导致错误。</p><h3 id="_7-1-递归" tabindex="-1"><a class="header-anchor" href="#_7-1-递归" aria-hidden="true">#</a> 7.1 递归</h3><p>递归函数是在一个函数通过名字调用自身的情况下构成的，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个经典的递归函数，它执行了 num 和 factorial(num-1) 之间的乘法操作，而 factorial(num-1) 又执行了 num 和 factorial(num-2) 之间的乘法操作，以此类推，直到 num 等于 1。</p><h3 id="_7-2-闭包" tabindex="-1"><a class="header-anchor" href="#_7-2-闭包" aria-hidden="true">#</a> 7.2 闭包</h3><p>有不少开发人员总是搞不清匿名函数和闭包之间的区别。闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createComparisonFunction</span><span class="token punctuation">(</span><span class="token parameter">propertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> value1 <span class="token operator">=</span> object1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span>
    <span class="token keyword">var</span> value2 <span class="token operator">=</span> object2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&gt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个函数，该函数接受一个参数（propertyName），然后返回一个函数。返回的函数在执行时，会根据给定的对象（object1 和 object2）的 propertyName 属性值进行比较。 使用闭包的场景：</p><ul><li>封装变量：保护变量不被外部访问</li><li>实现公有变量：可以通过闭包来创建可以访问私有变量的公有方法</li></ul><p>闭包的优缺点 　　优点：</p><ul><li>① 保护函数内的变量安全 ，实现封装，防止变量流入其他环境发生命名冲突</li><li>② 在内存中维持一个变量，可以做缓存（但使用多了同时也是一项缺点，消耗内存）</li><li>③ 匿名自执行函数可以减少内存消耗</li></ul><p>缺点：</p><ul><li>① 其中一点上面已经有体现了，就是被引用的私有变量不能被销毁，增大了内存消耗，造成内存泄漏，解决方法是可以在使用完变量后手动为它赋值为 null；</li><li>② 其次由于闭包涉及跨域访问，所以会导致性能损失，我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响。</li></ul><p>下面是一个闭包,不会在函数调用结束后被垃圾回收机制回收的例子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">assignHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;someElement&#39;</span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用闭包注意点：</p><ul><li>闭包会增加内存消耗，因为闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 以上示例优化如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">assignHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;someElement&#39;</span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  element <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-模仿块级作用域" tabindex="-1"><a class="header-anchor" href="#_7-3-模仿块级作用域" aria-hidden="true">#</a> 7.3 模仿块级作用域</h3><p>匿名函数可以用来模仿块级作用域，因为块级作用域可以避免变量污染。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里是块级作用域</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-私有变量" tabindex="-1"><a class="header-anchor" href="#_7-4-私有变量" aria-hidden="true">#</a> 7.4 私有变量</h3><p>私有变量包括函数的局部变量和对象的私有属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量</span>
  <span class="token keyword">var</span> privateVariable <span class="token operator">=</span> <span class="token string">&#39;private&#39;</span>
  <span class="token comment">// 私有函数</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;privateFunction&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 公有属性和方法</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-1-静态私有变量" tabindex="-1"><a class="header-anchor" href="#_7-4-1-静态私有变量" aria-hidden="true">#</a> 7.4.1 静态私有变量</h4><p>通过在私有作用域中定义私有变量和函数，同样也可以创建特权方法，特权方法是指有权访问私有变量和私有函数的公有方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量</span>
  <span class="token keyword">var</span> privateVariable <span class="token operator">=</span> <span class="token string">&#39;private&#39;</span>
  <span class="token comment">// 私有函数</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;privateFunction&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 特权方法</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable <span class="token operator">=</span> <span class="token string">&#39;public&#39;</span>
    <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-2-模块模式" tabindex="-1"><a class="header-anchor" href="#_7-4-2-模块模式" aria-hidden="true">#</a> 7.4.2 模块模式</h4><p>模块模式是为单例创建私有变量和特权方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量</span>
  <span class="token keyword">var</span> privateVariable <span class="token operator">=</span> <span class="token string">&#39;private&#39;</span>
  <span class="token comment">// 私有函数</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;privateFunction&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回公有方法</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">publicMethod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      privateVariable <span class="token operator">=</span> <span class="token string">&#39;public&#39;</span>
      <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们创建了一个名为 singleton 的对象，它包含一个公有方法 publicMethod，该方法可以访问私有变量 privateVariable 和私有函数 privateFunction。</p><h4 id="_7-4-3-增强的模块模式" tabindex="-1"><a class="header-anchor" href="#_7-4-3-增强的模块模式" aria-hidden="true">#</a> 7.4.3 增强的模块模式</h4><p>增强的模块模式是在增强的模块模式基础上，创建一个自定义的对象。增强的模块模式适合那些单例必须是某种类型的实例，同时还必须添加额外的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myNamespace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">my</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> privateVariable <span class="token operator">=</span> <span class="token string">&#39;private&#39;</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;privateFunction&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  my<span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable <span class="token operator">=</span> <span class="token string">&#39;public&#39;</span>
    <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> my
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>myNamespace <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5-小结" tabindex="-1"><a class="header-anchor" href="#_7-5-小结" aria-hidden="true">#</a> 7.5 小结</h3><p>匿名函数又称为拉姆达函数，它没有函数名，也没有函数声明。匿名函数通常被用作回调函数，或者作为立即执行函数表达式（IIFE）。有以下特点</p><ul><li>函数表达式不同于函数声明，函数声明要求有一个函数名，而函数表达式则可以省略函数名。</li><li>在无法确定如何引用函数的情况下，递归函数就会变得比较复杂</li><li>递归函数应该始终有一个退出条件，否则会导致无限递归</li><li>在后台执行环境中，闭包的作用域链包含着它自己的作用域，函数的作用域以及全局作用域</li><li>通常，函数的作用域及其所有变量都会在函数执行结束后被销毁</li><li>函数返回了一个闭包，这个函数的作用域会在内存中保存到闭包不存在为止</li><li>创建并立即调用一个函数，这样既可以执行其中的代码，又不会在内存中留下该函数的引用，结果就是函数内部的所有变量都会被立即销毁--除非某些变量赋值给了包含作用域（即外部作用域）中的变量</li></ul><p>闭包还可以用于对象中创建私有变量，相关概念和要点如下：</p><ul><li>即使 Javascript 中没有私有变量的概念，但可以利用闭包来实现私有变量，通过访问闭包可以访问函数内部的变量，从而实现私有变量的概念。</li><li>闭包可以用于创建私有变量和特权方法，特权方法是指有权访问私有变量和私有函数的公有方法。</li><li>模块模式是为单例创建私有变量和特权方法。</li><li>增强的模块模式是在增强的模块模式基础上，创建一个自定义的对象。增强的模块模式适合那些单例必须是某种类型的实例，同时还必须添加额外的属性和方法。</li><li>可以使用函数构造函数来创建自定义对象，从而实现私有变量和特权方法。</li></ul><h2 id="第-8-章-bom" tabindex="-1"><a class="header-anchor" href="#第-8-章-bom" aria-hidden="true">#</a> 第 8 章 BOM</h2><p>BOM 是浏览器对象模型（Browser Object Model）的缩写，它提供了独立于内容和浏览器窗口的对象，用于访问和操作浏览器的窗口和文档。</p><h3 id="_8-1-window-对象" tabindex="-1"><a class="header-anchor" href="#_8-1-window-对象" aria-hidden="true">#</a> 8.1 window 对象</h3><p>BOM 的核心对象是 window，它表示浏览器的一个实例。在浏览器中，window 对象有双重角色：它既是通过 JavaScript 访问浏览器窗口的一个接口，又是 ECMAScript 规定的 Global 对象。</p><h4 id="_8-1-1-全局作用域" tabindex="-1"><a class="header-anchor" href="#_8-1-1-全局作用域" aria-hidden="true">#</a> 8.1.1 全局作用域</h4><p>由于 JavaScript 是 ECMAScript 的实现，所以所有全局变量和函数都是作为 window 对象的属性和方法创建的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// function b() {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-1-2-窗口关系及框架" tabindex="-1"><a class="header-anchor" href="#_8-1-2-窗口关系及框架" aria-hidden="true">#</a> 8.1.2 窗口关系及框架</h4><p>如果在一个 HTML 页面中包含多个框架，那么每个框架都有自己的 window 对象，而且它们之间没有关系。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>URL_ADDRESS<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-1-3-窗口位置" tabindex="-1"><a class="header-anchor" href="#_8-1-3-窗口位置" aria-hidden="true">#</a> 8.1.3 窗口位置</h4><p>用来确定和修改 window 对象位置的属性和方法有很多。IE、Safari、Opera 和 Chrome 都提供了 scrollLeft、scrollTop 属性分别表示窗口相对于屏幕左边和上边的位置。Firefox 则在 scrrenX 和 screenY 属性中提供了同样的信息。Safari、Chrome 同时支持这两个属性。Opera 虽然支持 screenX 和 screenY 属性，但与 scrollLeft 和 scrollTop 属性并不对应，因此建议不要在 Opera 中使用这些属性。使用下列代码兼容跨浏览器取得窗口左边和上边的位置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> leftPos <span class="token operator">=</span>
  <span class="token keyword">typeof</span> window<span class="token punctuation">.</span>screenLeft <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> window<span class="token punctuation">.</span>screenLeft <span class="token operator">:</span> window<span class="token punctuation">.</span>screenX
<span class="token keyword">var</span> topPos <span class="token operator">=</span>
  <span class="token keyword">typeof</span> window<span class="token punctuation">.</span>screenTop <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> window<span class="token punctuation">.</span>screenTop <span class="token operator">:</span> window<span class="token punctuation">.</span>screenY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们首先检查 window.screenLeft 属性是否是一个数字，如果是，就返回它的值，否则返回 window.screenX 属性的值。然后，我们检查 window.screenTop 属性是否是一个数字，如果是，就返回它的值，否则返回 window.screenY 属性的值。</p><h4 id="_8-1-4-窗口大小" tabindex="-1"><a class="header-anchor" href="#_8-1-4-窗口大小" aria-hidden="true">#</a> 8.1.4 窗口大小</h4><p>跨浏览器获得窗口大小不是一件容易的事，因为每个浏览器都有自己的实现方式。IE9、Safari、Opera 和 Chrome 都提供了 4 个属性：innerWidth、innerHeight、outerWidth 和 outerHeight。</p><p>在 IE9+、Safari 和 Firefox 中，outerWidth 和 outerHeight 属性返回浏览器窗口本身的尺寸，而 innerWidth 和 innerHeight 属性返回页面视口的尺寸。</p><p>在 Opera 中，outerWidth 和 outerHeight 属性表示页面视图容器的大小，而 innerWidth 和 innerHeight 表示该容器中页面视图区的大小（减去边框宽度）</p><p>在 Chrome 中，outerWidth、outerHeight 与 innerWidth 、 innerHeight 返回的是相同的值。即视口大小而非浏览器窗口本身的尺寸。</p><p>IE8 及更早版本的浏览器中，没有提供 innerWidth 和 innerHeight 属性，因此需要使用 document.documentElement.clientWidth 和 document.documentElement.clientHeight 属性来获取视口大小。</p><p>在 IE、Firefox、Safari、Opera 和 Chrome 中，document.documentElement.clientWidth 和 document.documentElement.clientHeight 保存了页面视口的信息。</p><p>在 IE6 中，这些属性必须在标准模式下才能使用，因此需要在文档中包含一个 doctype 声明。如果是混杂模式，就必须通过 document.body.clientWidth 和 document.body.clientHeight 来取得相同的信息。</p><p>而对于混杂模式的 Chrome，document.documentElement.clientWidth 和 document.documentElement.clientHeight 返回的是 0，因此需要使用 document.body.clientWidth 和 document.body.clientHeight。</p><p>虽然最终无法确定浏览器窗口本身的大小，但是却可以取得页面视口的大小。如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pageWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
  pageHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pageWidth <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> <span class="token string">&#39;CSS1Compat&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
    pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
    pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上代码中，我们首先检查 window.innerWidth 属性是否是一个数字，如果是，就返回它的值，否则返回 document.documentElement.clientWidth 属性的值。然后，我们检查 window.innerHeight 属性是否是一个数字，如果是，就返回它的值，否则返回 document.documentElement.clientHeight 属性的值。</p><p>对于移动设备，window.innerWidth 和 window.innerHeight 保存着可见视口，也就是屏幕上可见页面的区域大小。移动 IE 浏览器不支持这两个属性，因此需要使用 document.documentElement.clientWidth 和 document.documentElement.clientHeight 属性来获取视口大小。</p><p>在其他移动浏览器中，document.documentElement 度量的是布局视口，即渲染后页面的实际大小（与可见视口不同，可见视口是实际页面大小的一小部分）。移动 IE 浏览器把布局信息保存在 document.body.clientWidth 和 document.body.clientHeight 中。这些值不会随着页面缩放而变化。</p><p>由于与桌面浏览器存在这些差异，最好先检测一下用户是否在使用移动浏览器，再决定使用哪个属性 下面是兼容性代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 检测一下用户是否在使用移动浏览器</span>
<span class="token keyword">var</span> isMobile <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">Android</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Android</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">BlackBerry</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">BlackBerry</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">iOS</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">iPhone|iPad|iPod</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">Opera</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Opera Mini</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">Windows</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">IEMobile</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">any</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      isMobile<span class="token punctuation">.</span><span class="token function">Android</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      isMobile<span class="token punctuation">.</span><span class="token function">BlackBerry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      isMobile<span class="token punctuation">.</span><span class="token function">iOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      isMobile<span class="token punctuation">.</span><span class="token function">Opera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      isMobile<span class="token punctuation">.</span><span class="token function">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> pageWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
  pageHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight
<span class="token comment">// 判断是移动 IE 浏览器 需要使用 document.documentElement.clientWidth 和 document.documentElement.clientHeight 属性来获取视口大小</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isMobile<span class="token punctuation">.</span><span class="token function">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
  pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pageWidth <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> <span class="token string">&#39;CSS1Compat&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
    pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
    pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，resizeTo 和 resizeBy 方法可以调整浏览器窗口的大小。这两个方法都接受两个参数：新的宽度和新的高度。这两个方法都只能在浏览器窗口中使用，不能在框架中使用。resizeTo 方法会立即调整浏览器窗口的大小，而 resizeBy 方法会调整浏览器窗口的大小，使浏览器窗口的宽度和高度分别增加或减少指定的像素数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//调整窗口大小为100x100</span>
window<span class="token punctuation">.</span><span class="token function">resizeBy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//调整窗口大小为200x200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>moveTo 和 moveBy 方法可以移动浏览器窗口的位置。这两个方法都接受两个参数：新的 x 坐标和新的 y 坐标。这两个方法都只能在浏览器窗口中使用，不能在框架中使用。moveTo 方法会立即移动浏览器窗口的位置，而 moveBy 方法会移动浏览器窗口的位置，使浏览器窗口的 x 坐标和 y 坐标分别增加或减少指定的像素数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//移动窗口位置为100,100</span>
window<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//移动窗口位置为200,200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-1-5-导航和打开窗口" tabindex="-1"><a class="header-anchor" href="#_8-1-5-导航和打开窗口" aria-hidden="true">#</a> 8.1.5 导航和打开窗口</h4><p>1.弹出窗口</p><p>window.open() 方法可以打开一个新的浏览器窗口。这个方法接受三个参数：要加载的 URL、窗口目标和一个特性字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=100,height=100&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于浏览器的主窗口，没有用户的允许是不能关闭它的。弹出窗口可以通过调用 top.close()方法在不经过用户同意的情况下关闭自己。弹出窗口关闭后，窗口的引用仍然存在，除了检测其 closed 属性外，没有其他的作用。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=100,height=100&#39;</span><span class="token punctuation">)</span>
popup<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>popup<span class="token punctuation">.</span>closed<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新创建的 window 对象有一个 opener 属性，其中保存打开它的原始窗口对象。这个属性只在弹出窗口的最外层 window 对象（top）中有定义，而且指向调用 window.open 方法的窗口或框架。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=100,height=100&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>popup<span class="token punctuation">.</span>opener <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>
popup<span class="token punctuation">.</span>opener <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 opener 属性设置为 null 就是告诉浏览器新创建的标签页不需要与打开它的标签页通信，因此可以在独立的进程中运行，从而提高了安全性。标签页之间联系一旦断开，将没有办法恢复。</p><p>2.安全限制</p><p>浏览器对弹出窗口配置方面添加了限制。</p><ul><li><p>弹出窗口不能访问 opener 窗口的私有变量和函数。</p></li><li><p>IE6 不允许在屏幕以外的位置创建窗口，不允许将弹框窗口的位置移动到屏幕以外，不允许关闭状态栏。IE7 不允许关闭地址栏，不允许移动弹框窗口位置及调整大小。</p></li><li><p>Firefox1 从一开始就不允许修改地址栏，因此无论给 window.open 传递什么样的特性字符串，弹框的窗口也会显示状态栏。Firefox3 强制始终在弹出的窗口中显示地址栏。</p></li><li><p>Opera 只允许在主浏览器窗口中打开弹出窗口。但不允许他们出现在与系统弹框窗口重叠的区域。</p></li><li><p>有些浏览器只能通过用户单击“打开”按钮才能打开弹出窗口。</p></li><li><p>对于那些用户无意打开的弹框，Chrome 不会像其他浏览器屏蔽弹框，而是只显示他们的标题栏，并把他们放在浏览器的右下角。</p><p>3.弹出窗口屏蔽程序</p></li></ul><p>大多数浏览器都内置弹出窗口屏蔽程序。如果屏蔽程序检测到弹出窗口，就会阻止它的显示。</p><p>弹出窗口被屏蔽有两种可能：</p><ul><li>如果是浏览器内置的屏蔽程序阻止的弹出窗口，那么 window.open()返回的是 null。例如:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=100,height=100&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>popup <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;弹出窗口被屏蔽&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果是浏览器扩展或者其他程序阻止的弹出窗口，那么 window.open()通常会抛出一个错误。例如:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> block <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=100,height=100&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>popup <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    block <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  block <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;弹出窗口被屏蔽&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在任何情况，以上代码都可以检测出调用 window.open()方法打开的窗口是否被屏蔽。但是需要注意，检测弹出窗口是否被屏幕是一回事，它并不会阻止浏览器显示与被屏蔽窗口的有关信息。</p><h4 id="_8-1-6-间歇调用和超时调用" tabindex="-1"><a class="header-anchor" href="#_8-1-6-间歇调用和超时调用" aria-hidden="true">#</a> 8.1.6 间歇调用和超时调用</h4><ul><li>间歇调用 setInterval(),调用方式：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 要执行的代码</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token comment">// 停止间歇调用</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>超时调用 setTimeout()，调用方式：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 要执行的代码</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token comment">// 停止超时调用</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-1-7-系统对话框" tabindex="-1"><a class="header-anchor" href="#_8-1-7-系统对话框" aria-hidden="true">#</a> 8.1.7 系统对话框</h4><p>浏览器通过 alert、confirm、prompt 等方法来显示系统对话框。这些方法都接受一个字符串作为参数，这个字符串就是对话框中显示的文本。</p><ul><li>alert() 方法 参数：要显示的文本 无返回值 显示一个带有一个按钮的对话框，点击按钮后对话框会消失。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>confirm() 方法 参数：要显示的文本 返回值：true 或 false 显示一个带有两个按钮的对话框，点击按钮后对话框会消失。例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;您是否要进入？&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 进入</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>prompt(？，？):用于显示可提示用户进行输入的对话框 <ul><li>第一个问是显示的文本，</li><li>第二个问是输入框中的默认值（可不写）</li><li>点击确认返回输入框中的内容，取消返回 null</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入您的姓名&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;取消了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;您的姓名是：&#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查找对话框 window.find()，打印对话框 window.print() 这两个方法不会就用户操作给出任何信息，</li></ul><h3 id="_8-2-location-对象" tabindex="-1"><a class="header-anchor" href="#_8-2-location-对象" aria-hidden="true">#</a> 8.2 location 对象</h3><blockquote><p>location 对象是 BOM 的一个部分，它既是 window 对象的属性，也是 document 对象的属性。它提供了与当前窗口加载的文档的有关信息，还提供了一些导航功能。</p></blockquote><table><thead><tr><th><div style="width:80px;">属性名</div></th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>hash</td><td>&quot;#contents&quot;</td><td>返回 URl 中的 hash（#跟零或多个字符串），如果字符串不包含散列，则返回空字符串</td></tr><tr><td>host</td><td>&quot;www.wrox.com:80&quot;</td><td>返回服务名称和端口号（如果有，http 默认 8080,https 默认 443）</td></tr><tr><td>hostname</td><td>&quot;www.wrox.com&quot;</td><td>返回不带端口号的服务器名称</td></tr><tr><td>href</td><td>&quot;http://www.wrox.com&quot;</td><td>返回当前加载页面的完整 URL。location 对象的 toString（）方法也返回这个值</td></tr><tr><td>pathname</td><td>&quot;/books/dom3/&quot;</td><td>返回 URL 中的路径部分</td></tr><tr><td>port</td><td>&quot;8080&quot;</td><td>返回 url 中指定的端口号，如果没有指定端口号，则返回空字符串</td></tr><tr><td>protocol</td><td>&quot;http:&quot;</td><td>返回页面使用的协议。通常是 http 或 https</td></tr><tr><td>search</td><td>&quot;?q=javascript&quot;</td><td>返回 url 的查询字符串。这个字符串以?开头</td></tr></tbody></table><h4 id="_8-2-1-查询字符串" tabindex="-1"><a class="header-anchor" href="#_8-2-1-查询字符串" aria-hidden="true">#</a> 8.2.1 查询字符串</h4><p>解析 url 的查询字符串。示例如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getQueryStringArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 取得查询字符串并去掉开头的问号</span>
  <span class="token keyword">var</span> qs <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// 保存数据的对象</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 取得每一项</span>
  <span class="token keyword">var</span> items <span class="token operator">=</span> qs<span class="token punctuation">.</span>length <span class="token operator">?</span> qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// 逐个将每一项添加到 args 对象中</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      args<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> args
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-2-2-位置操作" tabindex="-1"><a class="header-anchor" href="#_8-2-2-位置操作" aria-hidden="true">#</a> 8.2.2 位置操作</h4><p>改变浏览器的位置。示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导航到新的页面并追加历史记录</span>
location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">)</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;URL_ADDRESS&#39;</span>
window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">&#39;URL_ADDRESS&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 search,hash,pathname,port,protocol,host,hostname 可以改变当前 url。示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 改变当前 url</span>
location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">&#39;?q=javascript&#39;</span>
location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">&#39;#contents&#39;</span>
location<span class="token punctuation">.</span>pathname <span class="token operator">=</span> <span class="token string">&#39;/books/dom3/&#39;</span>
location<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token string">&#39;8080&#39;</span>
location<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token string">&#39;http:&#39;</span>
location<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token string">&#39;www.wrox.com:80&#39;</span>
location<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string">&#39;www.wrox.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 replace()方法可以在不添加历史记录的情况下导航到新的页面。不能返回前一个页面，示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;URL_ADDRESS&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-3-navigator-对象" tabindex="-1"><a class="header-anchor" href="#_8-3-navigator-对象" aria-hidden="true">#</a> 8.3 navigator 对象</h3><p>每一个浏览器的 navigator 对象都有自己的一套属性。下表列出了存在于所有浏览器的属性和方法，以及支持他们的浏览器版本。</p><h2 id="第-9-章-客户端检测" tabindex="-1"><a class="header-anchor" href="#第-9-章-客户端检测" aria-hidden="true">#</a> 第 9 章 客户端检测</h2><h2 id="第-10-章-dom" tabindex="-1"><a class="header-anchor" href="#第-10-章-dom" aria-hidden="true">#</a> 第 10 章 DOM</h2><h2 id="第-11-章-dom-扩展" tabindex="-1"><a class="header-anchor" href="#第-11-章-dom-扩展" aria-hidden="true">#</a> 第 11 章 DOM 扩展</h2><h2 id="第-12-章-dom2-和-dom3" tabindex="-1"><a class="header-anchor" href="#第-12-章-dom2-和-dom3" aria-hidden="true">#</a> 第 12 章 DOM2 和 DOM3</h2><h2 id="第-13-章-事件" tabindex="-1"><a class="header-anchor" href="#第-13-章-事件" aria-hidden="true">#</a> 第 13 章 事件</h2><h2 id="第-14-章-表单脚本" tabindex="-1"><a class="header-anchor" href="#第-14-章-表单脚本" aria-hidden="true">#</a> 第 14 章 表单脚本</h2><h2 id="第-15-章-使用-canvas-绘图" tabindex="-1"><a class="header-anchor" href="#第-15-章-使用-canvas-绘图" aria-hidden="true">#</a> 第 15 章 使用 Canvas 绘图</h2><h2 id="第-16-章-html5-脚本编程" tabindex="-1"><a class="header-anchor" href="#第-16-章-html5-脚本编程" aria-hidden="true">#</a> 第 16 章 HTML5 脚本编程</h2><h2 id="第-17-章-错误处理与调试" tabindex="-1"><a class="header-anchor" href="#第-17-章-错误处理与调试" aria-hidden="true">#</a> 第 17 章 错误处理与调试</h2><h2 id="第-18-章-javascript-与-xml" tabindex="-1"><a class="header-anchor" href="#第-18-章-javascript-与-xml" aria-hidden="true">#</a> 第 18 章 JavaScript 与 XML</h2><h2 id="第-19-章-e4x" tabindex="-1"><a class="header-anchor" href="#第-19-章-e4x" aria-hidden="true">#</a> 第 19 章 E4X</h2><h2 id="第-20-章-json" tabindex="-1"><a class="header-anchor" href="#第-20-章-json" aria-hidden="true">#</a> 第 20 章 JSON</h2><h2 id="第-21-章-ajax-与-comet" tabindex="-1"><a class="header-anchor" href="#第-21-章-ajax-与-comet" aria-hidden="true">#</a> 第 21 章 Ajax 与 Comet</h2><h2 id="第-22-章-高级技巧" tabindex="-1"><a class="header-anchor" href="#第-22-章-高级技巧" aria-hidden="true">#</a> 第 22 章 高级技巧</h2><h2 id="第-23-章-离线应用与客户端存储" tabindex="-1"><a class="header-anchor" href="#第-23-章-离线应用与客户端存储" aria-hidden="true">#</a> 第 23 章 离线应用与客户端存储</h2><h2 id="第-24-章-最佳实践" tabindex="-1"><a class="header-anchor" href="#第-24-章-最佳实践" aria-hidden="true">#</a> 第 24 章 最佳实践</h2><h2 id="第-25-章-新兴的-api" tabindex="-1"><a class="header-anchor" href="#第-25-章-新兴的-api" aria-hidden="true">#</a> 第 25 章 新兴的 API</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,360),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","《JavaScript高级程序设计》笔记.html.vue"]]);export{k as default};
