import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,e}from"./app-ZyR8DK8y.js";const t={},i=e(`<h3 id="_1-windows-bug-启动不成功-清除-andriod-残余文件" tabindex="-1"><a class="header-anchor" href="#_1-windows-bug-启动不成功-清除-andriod-残余文件" aria-hidden="true">#</a> 1.windows-bug 启动不成功--清除 andriod 残余文件</h3><ul><li>cd android</li><li>gradlew clean</li></ul><h3 id="_2-view-style" tabindex="-1"><a class="header-anchor" href="#_2-view-style" aria-hidden="true">#</a> 2.View Style</h3><h4 id="支持-flexbox、shadowproptypesios、transforms-属性。" tabindex="-1"><a class="header-anchor" href="#支持-flexbox、shadowproptypesios、transforms-属性。" aria-hidden="true">#</a> 支持 Flexbox、ShadowPropTypesIOS、Transforms 属性。</h4><h4 id="背面可见性" tabindex="-1"><a class="header-anchor" href="#背面可见性" aria-hidden="true">#</a> 背面可见性</h4><ul><li>backfaceVisibility enum(&#39;visible&#39;, &#39;hidden&#39;)</li></ul><h4 id="背景颜色" tabindex="-1"><a class="header-anchor" href="#背景颜色" aria-hidden="true">#</a> 背景颜色</h4><ul><li>backgroundColor string</li></ul><h4 id="边框颜色" tabindex="-1"><a class="header-anchor" href="#边框颜色" aria-hidden="true">#</a> 边框颜色</h4><ul><li>borderColor string</li><li>borderTopColor string</li><li>borderRightColor string</li><li>borderBottomColor string</li><li>borderLeftColor string</li></ul><h4 id="边框圆角半径" tabindex="-1"><a class="header-anchor" href="#边框圆角半径" aria-hidden="true">#</a> 边框圆角半径</h4><ul><li>borderRadius number</li><li>borderTopLeftRadius number</li><li>borderTopRightRadius number</li><li>borderBottomLeftRadius number</li><li>borderBottomRightRadius number</li></ul><h4 id="边框样式" tabindex="-1"><a class="header-anchor" href="#边框样式" aria-hidden="true">#</a> 边框样式</h4><ul><li>borderStyle enum(&#39;solid&#39;, &#39;dotted&#39;, &#39;dashed&#39;)</li></ul><h4 id="边框宽度" tabindex="-1"><a class="header-anchor" href="#边框宽度" aria-hidden="true">#</a> 边框宽度</h4><ul><li>borderWidth number</li><li>borderTopWidth number</li><li>borderRightWidth number</li><li>borderBottomWidth number</li><li>borderLeftWidth number</li></ul><h4 id="不透明度" tabindex="-1"><a class="header-anchor" href="#不透明度" aria-hidden="true">#</a> 不透明度</h4><ul><li>opacity number</li></ul><h4 id="填充" tabindex="-1"><a class="header-anchor" href="#填充" aria-hidden="true">#</a> 填充</h4><ul><li>overflow enum(&#39;visible&#39;, &#39;hidden&#39;)</li></ul><h4 id="测试-id-用来定位视图" tabindex="-1"><a class="header-anchor" href="#测试-id-用来定位视图" aria-hidden="true">#</a> 测试 ID（用来定位视图）</h4><ul><li>testID string</li></ul><h3 id="image-style" tabindex="-1"><a class="header-anchor" href="#image-style" aria-hidden="true">#</a> Image Style</h3><h4 id="支持-flexbox-和-transforms" tabindex="-1"><a class="header-anchor" href="#支持-flexbox-和-transforms" aria-hidden="true">#</a> 支持 Flexbox 和 Transforms</h4><h4 id="调整大小模式" tabindex="-1"><a class="header-anchor" href="#调整大小模式" aria-hidden="true">#</a> 调整大小模式</h4><ul><li>resizeMode Object.keys(ImageResizeMode)</li></ul><h4 id="背景颜色-1" tabindex="-1"><a class="header-anchor" href="#背景颜色-1" aria-hidden="true">#</a> 背景颜色</h4><ul><li>backgroundColor string</li></ul><h4 id="边框属性" tabindex="-1"><a class="header-anchor" href="#边框属性" aria-hidden="true">#</a> 边框属性</h4><ul><li>borderColor string</li><li>borderWidth number</li><li>borderRadius number</li></ul><h4 id="填充-1" tabindex="-1"><a class="header-anchor" href="#填充-1" aria-hidden="true">#</a> 填充</h4><ul><li>overflow enum(&#39;visible&#39;, &#39;hidden&#39;)</li></ul><h4 id="色彩颜色" tabindex="-1"><a class="header-anchor" href="#色彩颜色" aria-hidden="true">#</a> 色彩颜色</h4><ul><li>tintColor string</li></ul><h4 id="不透明度-1" tabindex="-1"><a class="header-anchor" href="#不透明度-1" aria-hidden="true">#</a> 不透明度</h4><ul><li>opacity number</li></ul><h3 id="text-style" tabindex="-1"><a class="header-anchor" href="#text-style" aria-hidden="true">#</a> Text Style</h3><h4 id="支持-view-的样式" tabindex="-1"><a class="header-anchor" href="#支持-view-的样式" aria-hidden="true">#</a> 支持 View 的样式</h4><h4 id="字体颜色" tabindex="-1"><a class="header-anchor" href="#字体颜色" aria-hidden="true">#</a> 字体颜色</h4><ul><li>color string</li></ul><h4 id="字体" tabindex="-1"><a class="header-anchor" href="#字体" aria-hidden="true">#</a> 字体</h4><ul><li>fontFamily string</li></ul><h4 id="一行省略" tabindex="-1"><a class="header-anchor" href="#一行省略" aria-hidden="true">#</a> 一行省略</h4><ul><li>numberOfLines number</li></ul><h4 id="字体大小" tabindex="-1"><a class="header-anchor" href="#字体大小" aria-hidden="true">#</a> 字体大小</h4><ul><li>fontSize number</li></ul><h4 id="字体样式" tabindex="-1"><a class="header-anchor" href="#字体样式" aria-hidden="true">#</a> 字体样式</h4><p>fontStyle enum(&#39;normal&#39;, &#39;italic&#39;) 字体粗细（指定字体的粗细。大多数字体都支持’normal’和’bold’值。并非所有字体都支持所有的数字值。如果某个值不支持，则会自动选择最接近的值。）</p><ul><li>fontWeight enum(&quot;normal&quot;, &#39;bold&#39;, &#39;100&#39;, &#39;200&#39;, &#39;300&#39;, &#39;400&#39;, &#39;500&#39;, &#39;600&#39;, &#39;700&#39;, &#39;800&#39;, &#39;900&#39;)</li></ul><h4 id="字间距" tabindex="-1"><a class="header-anchor" href="#字间距" aria-hidden="true">#</a> 字间距</h4><ul><li>letterSpacing number</li></ul><h4 id="行间距" tabindex="-1"><a class="header-anchor" href="#行间距" aria-hidden="true">#</a> 行间距</h4><ul><li>lineHeight number</li></ul><h4 id="字体对齐方式-指定文本的对齐方式。其中-justify-值仅-ios-支持。" tabindex="-1"><a class="header-anchor" href="#字体对齐方式-指定文本的对齐方式。其中-justify-值仅-ios-支持。" aria-hidden="true">#</a> 字体对齐方式（指定文本的对齐方式。其中’justify’值仅 iOS 支持。）</h4><ul><li>textAlign enum(&quot;auto&quot;, &#39;left&#39;, &#39;right&#39;, &#39;center&#39;, &#39;justify&#39;)</li></ul><p>Flexbox Style</p><h4 id="宽高" tabindex="-1"><a class="header-anchor" href="#宽高" aria-hidden="true">#</a> 宽高</h4><ul><li>width number</li><li>height number</li></ul><h4 id="项目对齐" tabindex="-1"><a class="header-anchor" href="#项目对齐" aria-hidden="true">#</a> 项目对齐</h4><ul><li>alignItems enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</li></ul><h4 id="自身对齐" tabindex="-1"><a class="header-anchor" href="#自身对齐" aria-hidden="true">#</a> 自身对齐</h4><ul><li>alignSelf enum(&#39;auto&#39;, &#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</li></ul><h4 id="边框宽度-1" tabindex="-1"><a class="header-anchor" href="#边框宽度-1" aria-hidden="true">#</a> 边框宽度</h4><ul><li>borderBottomWidth number</li><li>borderLeftWidth number</li><li>borderRightWidth number</li><li>borderTopWidth number</li><li>borderWidth number</li></ul><h4 id="弹性伸缩" tabindex="-1"><a class="header-anchor" href="#弹性伸缩" aria-hidden="true">#</a> 弹性伸缩</h4><ul><li>flex number</li></ul><h4 id="弹性伸缩方向" tabindex="-1"><a class="header-anchor" href="#弹性伸缩方向" aria-hidden="true">#</a> 弹性伸缩方向</h4><ul><li>flexDirection enum(&#39;row&#39;, &#39;column&#39;)</li></ul><h4 id="弹性伸缩包裹" tabindex="-1"><a class="header-anchor" href="#弹性伸缩包裹" aria-hidden="true">#</a> 弹性伸缩包裹</h4><ul><li>flexWrap enum(&#39;row&#39;, &#39;row-reverse&#39;, &#39;column&#39;, &#39;column-reverse)</li></ul><h5 id="属性内容" tabindex="-1"><a class="header-anchor" href="#属性内容" aria-hidden="true">#</a> 属性内容</h5><ul><li>justifyContent enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;space-between&#39;, &#39;space-around&#39;)</li></ul><h4 id="外边距" tabindex="-1"><a class="header-anchor" href="#外边距" aria-hidden="true">#</a> 外边距</h4><ul><li>margin number</li><li>marginBottom number</li><li>marginLeft number</li><li>marginRight number</li><li>marginTop number</li><li>marginHorizontal number</li><li>marginVertical number</li></ul><h4 id="内边距" tabindex="-1"><a class="header-anchor" href="#内边距" aria-hidden="true">#</a> 内边距</h4><ul><li>padding number</li><li>paddingBottom number</li><li>paddingLeft number</li><li>paddingRight number</li><li>paddingTop number</li><li>paddingHorizontal number</li><li>paddingVertical number</li></ul><h4 id="位置-绝对、相对" tabindex="-1"><a class="header-anchor" href="#位置-绝对、相对" aria-hidden="true">#</a> 位置（绝对、相对）</h4><ul><li>position enum(&#39;absolute&#39;, &#39;relative&#39;)</li></ul><h4 id="上下左右" tabindex="-1"><a class="header-anchor" href="#上下左右" aria-hidden="true">#</a> 上下左右</h4><ul><li>right number</li><li>top number</li><li>left number</li><li>bottom number</li></ul><h4 id="transform-属性变化" tabindex="-1"><a class="header-anchor" href="#transform-属性变化" aria-hidden="true">#</a> Transform 属性变化</h4><ul><li>transform [ <ul><li>{perspective: number},</li><li>{rotate: string},</li><li>{rotateX: string},</li><li>{rotateY: string},</li><li>{rotateZ: string},</li><li>{scale: number},</li><li>{scaleX: number},</li><li>{scaleY: number},</li><li>{translateX: number},</li><li>{translateY: number},</li><li>{skewX: string},</li><li>{skewY: string} ]</li></ul></li></ul><h4 id="属性矩阵" tabindex="-1"><a class="header-anchor" href="#属性矩阵" aria-hidden="true">#</a> 属性矩阵</h4><ul><li>transformMatrix TransformMatrixPropType</li></ul><h3 id="_3-adb-server-version-39-doesn-t-match-this-client-40" tabindex="-1"><a class="header-anchor" href="#_3-adb-server-version-39-doesn-t-match-this-client-40" aria-hidden="true">#</a> 3.adb server version (39) doesn&#39;t match this client (40)</h3><h4 id="genymotion-设置-adb-use-custom-android-sdk-tools-选择安卓-adk-目录-然后-cmd-输入" tabindex="-1"><a class="header-anchor" href="#genymotion-设置-adb-use-custom-android-sdk-tools-选择安卓-adk-目录-然后-cmd-输入" aria-hidden="true">#</a> Genymotion==&gt;设置==&gt;ADB=&gt;Use custom Android SDK Tools=&gt;选择安卓 adk 目录，然后 cmd 输入</h4><ul><li><p>adb kill-server</p></li><li><p>adb start-server</p></li></ul><h3 id="_4-genymotion-不能安装-apk-的解决方法" tabindex="-1"><a class="header-anchor" href="#_4-genymotion-不能安装-apk-的解决方法" aria-hidden="true">#</a> 4.Genymotion 不能安装 APK 的解决方法</h3><ul><li><p>1、下载 Genymotion-ARM-Translation-Librarities 工具转换包；下载路径:https://pan.baidu.com/s/1sWe36TSZHPxqiaLn1TGPig</p></li><li><p>2、将下载号的工具包直接拖拽到 Genymotion 中，</p></li><li><p>3、进行操作</p><ul><li><p>1.adb shell</p></li><li><p>2.cd /sdcard/Download/</p></li><li><p>3.sh /system/bin/flash-archive.sh /sdcard/Download/Genymotion-ARM-Translation.zip</p></li><li><p>4.重启模拟器。</p></li></ul></li></ul><h3 id="_5-运行-react-native-init-hello-之后报错-import-type-commandt-from-commands" tabindex="-1"><a class="header-anchor" href="#_5-运行-react-native-init-hello-之后报错-import-type-commandt-from-commands" aria-hidden="true">#</a> 5.运行 react-native init Hello 之后报错 &quot;import type {CommandT} from &#39;./commands&#39;;&quot;</h3><ul><li><p>更新的 react-native 0.56 版本在 Windows 上有 bug 不能正常运行，所以才会一直报错，然后我试了一下 react-native init xxx --version 0.55.4，即初始化时指定版本</p></li><li><p>可以进入项目的文件夹，然后</p><ul><li>C:\\Users\\13708\\Desktop\\aaa\\Hello&gt;react-native -v</li><li>react-native-cli: 2.0.1</li><li>react-native: 0.56.0</li><li>就可以看到自己项目的版本了</li></ul></li></ul><h3 id="_6-正确地引入-antd-mobile-的步骤" tabindex="-1"><a class="header-anchor" href="#_6-正确地引入-antd-mobile-的步骤" aria-hidden="true">#</a> 6.正确地引入 antd-mobile 的步骤：</h3><ul><li>(1)npm intall react-dom --save</li><li>(2)npm install antd-mobile --save</li><li>(3)npm install babel-plugin-import --save-dev</li><li>(4).babelrc 中为</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>

“plugins”：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;import&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;libraryName&quot;</span><span class="token operator">:</span><span class="token string">&quot;antd-mobile&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>，

<span class="token property">&quot;presets&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;react-native&quot;</span><span class="token punctuation">]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>(5)在代码中引入 antd-mobile，然后正确的运行</li></ul><h3 id="_7-指定端口启动项目" tabindex="-1"><a class="header-anchor" href="#_7-指定端口启动项目" aria-hidden="true">#</a> 7.指定端口启动项目</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>react<span class="token operator">-</span>native run<span class="token operator">-</span>android <span class="token operator">--</span>port <span class="token number">5000</span>
react<span class="token operator">-</span>native run<span class="token operator">-</span>android<span class="token operator">=</span><span class="token number">8082</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-touchouable-的区别" tabindex="-1"><a class="header-anchor" href="#_7-touchouable-的区别" aria-hidden="true">#</a> 7.touchouable 的区别</h3><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// TouchableWithoutFeedback</span>
<span class="token operator">&lt;</span>TouchableWithoutFeedback
  onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;触摸效果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
  onLongPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;长按效果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
  disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token comment">//默认是false，如果是true表示关闭该组件的触摸功能</span>
  onPressIn<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;触摸开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
  onPressOut<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;触摸结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>TouchableWithoutFeedback的测试<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>TouchableWithoutFeedback<span class="token operator">&gt;</span>

<span class="token comment">// TouchableHighlight</span>
<span class="token operator">&lt;</span>TouchableHighlight
  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
  activeOpacity<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0.6</span><span class="token punctuation">}</span>
  underlayColor<span class="token operator">=</span><span class="token string">&quot;red&quot;</span>
  onHideUnderlay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;衬底被隐藏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
  onShowUnderlay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;衬底显示&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>TouchableHighlight的测试<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>TouchableHighlight<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="提示" tabindex="-1"><a class="header-anchor" href="#提示" aria-hidden="true">#</a> 提示</h4><p>提示一：无论是 TouchableWithoutFeedback 还是其他三种 Touchable 组件，都是在根节点都是只支持一个组件，如果你需要多个组件同时响应单击事件，可以用一个 View 将它们包裹着，它的这种根节点只支持一个组件的特性和 ScrollView 很类似。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//错误示范：其他的Touchable系列同样</span>
<span class="token operator">&lt;</span>TouchableHighlight
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
   onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>TouchableHighlight的测试<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>这是错误的，TouchableHighlight中只能有一个总节点包裹<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>TouchableHighlight<span class="token operator">&gt;</span>

<span class="token comment">//正确</span>
<span class="token operator">&lt;</span>TouchableHighlight
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
   onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>TouchableHighlight的测试<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>这是错误的，TouchableHighlight中只能有一个总节点包裹<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>TouchableHighlight<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示二： <code>&lt;Text&gt;</code>组件也有点击功能 可通过 onPress 实现触摸回调</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Text也可以实现点击功能</span>
<span class="token operator">&lt;</span>Text
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Text组件的点击功能&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>Text的点击功能
<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react-native-ios14-图片不显示的解决方法" tabindex="-1"><a class="header-anchor" href="#react-native-ios14-图片不显示的解决方法" aria-hidden="true">#</a> React-Native iOS14 图片不显示的解决方法</h3><ol><li><p>在依赖包中找到文件：<code>RCTUIImageViewAnimated.m</code><br> 　 路径：<code>/node_modules/react-native/Libraries/Image</code></p></li><li><p>将<code>RCTUIImageViewAnimated.m</code>中的下面代码添加<code>[super displayLayer:layer];</code></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>displayLayer<span class="token operator">:</span><span class="token punctuation">(</span>CALayer <span class="token operator">*</span><span class="token punctuation">)</span>layer
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    layer<span class="token punctuation">.</span>contentsScale <span class="token operator">=</span> self<span class="token punctuation">.</span>animatedImageScale<span class="token punctuation">;</span>
    layer<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token punctuation">(</span>__bridge id<span class="token punctuation">)</span>_currentFrame<span class="token punctuation">.</span>CGImage<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改为如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>displayLayer<span class="token operator">:</span><span class="token punctuation">(</span>CALayer <span class="token operator">*</span><span class="token punctuation">)</span>layer
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    layer<span class="token punctuation">.</span>contentsScale <span class="token operator">=</span> self<span class="token punctuation">.</span>animatedImageScale<span class="token punctuation">;</span>
    layer<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token punctuation">(</span>__bridge id<span class="token punctuation">)</span>_currentFrame<span class="token punctuation">.</span>CGImage<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> <span class="token literal-property property">displayLayer</span><span class="token operator">:</span>layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,110),o=[i];function l(p,r){return n(),s("div",null,o)}const d=a(t,[["render",l],["__file","React-Native总结.html.vue"]]);export{d as default};
