const t=JSON.parse(`{"key":"v-5f49510e","path":"/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/JS/%E7%90%86%E8%A7%A3js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html","title":"理解js事件循环","lang":"zh-CN","frontmatter":{"title":"理解js事件循环","category":["开发笔记","JS"],"description":"这一次，彻底弄懂 JavaScript 执行机制 一次搞懂- JS 事件循环之宏任务和微任务 10 分钟理解 JS 引擎的执行机制 浏览器完整流程图 任务队列的执行过程是：先执行一个宏任务，执行过程中如果产出新的宏/微任务，就将他们推入相应的任务队列，之后在执行一队微任务，之后再执行宏任务，如此循环。以上不断重复的过程就叫做 Event Loop(事件...","head":[["meta",{"property":"og:url","content":"https://chenDevs.github.io/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/JS/%E7%90%86%E8%A7%A3js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html"}],["meta",{"property":"og:site_name","content":"Mr Chen's Blog"}],["meta",{"property":"og:title","content":"理解js事件循环"}],["meta",{"property":"og:description","content":"这一次，彻底弄懂 JavaScript 执行机制 一次搞懂- JS 事件循环之宏任务和微任务 10 分钟理解 JS 引擎的执行机制 浏览器完整流程图 任务队列的执行过程是：先执行一个宏任务，执行过程中如果产出新的宏/微任务，就将他们推入相应的任务队列，之后在执行一队微任务，之后再执行宏任务，如此循环。以上不断重复的过程就叫做 Event Loop(事件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Chen"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"理解js事件循环\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Chen\\",\\"url\\":\\"/logo.png\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":0.86,"words":257},"filePathRelative":"开发日志/JS/理解js事件循环.md","autoDesc":true}`);export{t as data};
