import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as o,a as n,b as a,d as e,e as t}from"./app-cef5cfc8.js";const c={},u=t(`<h3 id="过渡" tabindex="-1"><a class="header-anchor" href="#过渡" aria-hidden="true">#</a> 过渡</h3><p>特点：当前元素只要有“属性”发生变化时，可以平滑的进行过渡，并不仅仅局限于 hover 状态。</p><p>transition-property 设置过渡属性</p><p>transition-duration 设置过渡时间</p><p>transition-timing-function 设置过渡动画效果</p><p>transition-delay 设置过渡延时</p><p>以上四属性重在理解</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 连写顺序要求: 执行时间 必须在 延迟时间前面  */</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease 2s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="伸缩布局-flex" tabindex="-1"><a class="header-anchor" href="#伸缩布局-flex" aria-hidden="true">#</a> 伸缩布局 flex</h3><ul><li><ol><li>父盒子指定 display:flex 水平排列布局</li></ol></li><li><ol start="2"><li>分配子盒子空间</li></ol><ul><li>flex-basis 指定固定宽度, 剩下来的让其他人分</li><li>flex: 1 指定份数</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">*</span> <span class="token punctuation">{</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">ul</span> <span class="token punctuation">{</span>
      <span class="token comment">/*width: 800px;*/</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">li</span> <span class="token punctuation">{</span>
      <span class="token comment">/* flex 可以给子盒子设置所占份数 */</span>
      <span class="token comment">/* flex: 1; 可以设置子盒子在父容器中所占的分数, 父容器最终通过总份数进行分配*/</span>
      <span class="token comment">/* 每个 li 都是 1 份, 相当于平均分配 */</span>
      <span class="token comment">/*flex: 1;*/</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #000<span class="token punctuation">;</span>
      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">li:nth-child(1)</span> <span class="token punctuation">{</span>
      <span class="token comment">/*flex: 3;*/</span>
      <span class="token comment">/* flex-basis 用于指定固定宽度, 父盒子在先分配完固定宽度后, 再按份数分配*/</span>
      <span class="token property">flex-basis</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">li:nth-child(2)</span> <span class="token punctuation">{</span>
      <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">li:nth-child(3)</span> <span class="token punctuation">{</span>
      <span class="token property">flex</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
       <span class="token comment">/* 伸缩布局:
    1. 指定 display:flex 水平排列布局
    2. 分配子盒子空间
        flex-basis  指定固定宽度, 剩下来的让其他人分
        flex: 1     指定份数*/</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>老大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>老二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>老三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>



<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-设置水平方向对齐方式-justify-content" tabindex="-1"><a class="header-anchor" href="#_1-设置水平方向对齐方式-justify-content" aria-hidden="true">#</a> 1.设置水平方向对齐方式 justify-content</h4><ul><li>justify-content: flex-start; 居左对齐</li><li>justify-content: flex-end; 居右对齐</li><li>justify-content: center; 居中</li><li>justify-content: space-around; 空白环绕分布，均匀排列每个元素， 每个元素周围分配相同的空间</li><li>justify-content: space-between;均匀排列每个元素， 首个元素放置于起点，末尾元素放置于终点<br><strong>最常用的是 space-around, center 因为 space-around 在单行的情况, 视觉体验很好</strong><br><strong>在多行时, 一般用 flex-start</strong></li></ul><h4 id="_2-换行" tabindex="-1"><a class="header-anchor" href="#_2-换行" aria-hidden="true">#</a> 2.换行</h4><ul><li>压缩空间太丑了, flex 提供了换行<br><strong>flex-wrap: nowrap; 默认不换行</strong><br><strong>flex-wrap: wrap;换行</strong></li></ul><h4 id="_3-用于设置单行中-盒子的垂直对齐方式-align-items" tabindex="-1"><a class="header-anchor" href="#_3-用于设置单行中-盒子的垂直对齐方式-align-items" aria-hidden="true">#</a> 3.用于设置单行中, 盒子的垂直对齐方式 align-items</h4><ul><li>align-items: stretch; 默认, 没设高度, 会拉伸 (拉伸, 当盒子没有高度的时候, 将盒子拉伸到最大)</li><li>align-items: flex-start; 在单行中, 垂直方向上顶部对齐</li><li>align-items: center; 在单行中, 垂直方向上居中对齐</li><li>align-items: flex-end; 在单行中, 垂直方向上底部对齐</li></ul><h5 id="子盒子不听话-想有自己的垂直对齐方式" tabindex="-1"><a class="header-anchor" href="#子盒子不听话-想有自己的垂直对齐方式" aria-hidden="true">#</a> 子盒子不听话, 想有自己的垂直对齐方式</h5><p>align-self: center;</p><h4 id="_4-弹性盒子的纵向排列" tabindex="-1"><a class="header-anchor" href="#_4-弹性盒子的纵向排列" aria-hidden="true">#</a> 4.弹性盒子的纵向排列</h4><ul><li>flex-direction: column; 可以改变主轴方向, 将主轴侧轴翻转了, 主轴垂直往下了</li></ul><p><strong>align-content 设置侧轴多行内容对齐方式</strong></p><ul><li>align-content: flex-start;侧轴，垂直方向上顶部对齐</li><li>align-content: center; 侧轴，垂直方向上居中对齐</li><li>align-content: flex-end; 侧轴，垂直方向上底部对齐</li><li>align-content: space-around;</li><li>align-content: space-between;</li></ul><h4 id="_5-align-items、align-content、justify-content-的区别" tabindex="-1"><a class="header-anchor" href="#_5-align-items、align-content、justify-content-的区别" aria-hidden="true">#</a> 5.align-items、align-content、justify-content 的区别</h4><ul><li>align-items 属性适用于所有的 flex 容器，它是用来设置每个 flex 元素在侧轴上的默认对齐方式。</li><li>align-items 和 align-content 有相同的功能，不过不同点是它是用来让每一个单行的容器居中而不是让整个容器居中。</li></ul><h3 id="渐变" tabindex="-1"><a class="header-anchor" href="#渐变" aria-hidden="true">#</a> 渐变</h3><h4 id="线性渐变" tabindex="-1"><a class="header-anchor" href="#线性渐变" aria-hidden="true">#</a> 线性渐变</h4><p>linear-gradient 线性渐变指沿着某条直线朝一个方向产生渐变效果。</p><p>必要的元素：方向, 颜色, 渐变范围</p><ol><li>渐变的方向, 0deg 是向上渐变, 旋转方向顺时针, 记忆: 时钟方向. (当然也可以 to right, to top...)</li><li>渐变的颜色和范围(常用百分比,px 也可以), 如果不设置范围, 颜色平均分布</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/**由于本身渐变的存在, 就是为了替换掉渐变的背景图片的, 所以是 background-image: linear-gradient(方向, 颜色 范围, 颜色 范围, ....) **/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="径向渐变" tabindex="-1"><a class="header-anchor" href="#径向渐变" aria-hidden="true">#</a> 径向渐变</h4><p>最常见用法 :</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>/**<span class="token property">径向渐变</span><span class="token punctuation">:</span> 半径<span class="token punctuation">(</span>渐变范围<span class="token punctuation">)</span> at 圆心位置<span class="token punctuation">,</span> 颜色<span class="token punctuation">,</span> 颜色<span class="token punctuation">,</span> 颜色...
<span class="token function">radial-gradient</span><span class="token punctuation">(</span> 100px at 100px 100px<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> green <span class="token punctuation">)</span>
超出半径区域的用最外面的颜色来填充88?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2d-转换" tabindex="-1"><a class="header-anchor" href="#_2d-转换" aria-hidden="true">#</a> 2D 转换</h3><p>转换是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放，配合过渡和动画知识，可以取代大量之前只能靠 Flash 才可以实现的效果。</p><h4 id="平移-translate" tabindex="-1"><a class="header-anchor" href="#平移-translate" aria-hidden="true">#</a> 平移 translate</h4><p>移动 translate(x, y) 可以改变元素的位置，x、y 可为负值；</p><ul><li><p>(1) 移动位置相当于自身原来位置</p></li><li><p>(2) y 轴正方向朝下</p></li><li><p>(3) 除了可以像素值，也可以是百分比，相对于自身的宽度或高度</p><p>​</p></li></ul><h4 id="缩放-scale" tabindex="-1"><a class="header-anchor" href="#缩放-scale" aria-hidden="true">#</a> 缩放 scale</h4><p>缩放 scale(x, y) 可以对元素进行水平和垂直方向的缩放，x、y 的取值可为小数；</p><h4 id="旋转-rotate" tabindex="-1"><a class="header-anchor" href="#旋转-rotate" aria-hidden="true">#</a> 旋转 rotate</h4><p>旋转 rotate(deg) 可以对元素进行旋转，正值为顺时针，负值为逆时针；</p><ul><li>(1) 当元素旋转以后，坐标轴也跟着发生的转变</li><li>(2) 调整顺序可以解决，把旋转放到最后</li></ul><h4 id="斜切-skew" tabindex="-1"><a class="header-anchor" href="#斜切-skew" aria-hidden="true">#</a> 斜切 skew</h4><p>斜切 skew(x, y) 传角度, 可以让盒子变倾斜, skewX 是纵向拍扁的效果, skewY 是横向拍扁的效果</p><h3 id="_3d-转换" tabindex="-1"><a class="header-anchor" href="#_3d-转换" aria-hidden="true">#</a> 3D 转换</h3><blockquote><p>transform:不仅可以 2D 转换，还可以进行 3D 转换。</p></blockquote><p>思考 2d 和 3d 的区别 ? 2d 游戏</p><h4 id="坐标轴" tabindex="-1"><a class="header-anchor" href="#坐标轴" aria-hidden="true">#</a> 坐标轴</h4><blockquote><p>用 X、Y、Z 分别表示空间的 3 个维度，三条轴互相垂直。<strong><em>注意+Y 是向下的。</em></strong></p></blockquote><h4 id="rotate-旋转" tabindex="-1"><a class="header-anchor" href="#rotate-旋转" aria-hidden="true">#</a> rotate 旋转</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 让元素在平面2D中旋转 */</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 让元素沿着X轴转45度 */</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 让元素沿着Y轴转45度 */</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 让元素沿着Z轴转45度 */</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：看不出来怎么转的，为什么现实生活中能够看出来？</p><h4 id="translate-平移" tabindex="-1"><a class="header-anchor" href="#translate-平移" aria-hidden="true">#</a> translate 平移</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token comment">/*沿着X轴的正方向移动45px*/</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>45px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*沿着Y轴的正方向移动45px*/</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>45px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*沿着Y轴的正方向移动45px*/</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>45px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="perspective-透视" tabindex="-1"><a class="header-anchor" href="#perspective-透视" aria-hidden="true">#</a> perspective 透视</h4><blockquote><p>电脑显示屏是一个 2D 的平面，因为我们看不出来旋转的方向，通过 perspective 属性，<strong>指定观察者与「z=0」平面的距离，使具有三维位置变换的元素产生透视效果</strong>，单位是 px。</p><p>说白了，设置了 perspective 属性后，就有了近大远小的效果了，在视觉上，有 3d 透视的效果。</p></blockquote><p>注意：当为元素定义 perspective 属性时，其子元素会获得透视效果。(给父元素加)</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span>
  perspective：500px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于近大远小</p><p>对于我们眼睛来说，离我们越近的房子，我们会感觉到这个房子越大，离我们越远的房子，就会感觉越小，其实房子的大小都是一样的，只是在视觉上的一种不同。</p><h4 id="transform-style" tabindex="-1"><a class="header-anchor" href="#transform-style" aria-hidden="true">#</a> transform-style</h4><blockquote><p>transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。注意这个属性也是给父元素添加。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// flat:默认值，2d显示</span>
<span class="token comment">// preserve-3d: 3d显示</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>transform-style 与 perspective 的区别</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*透视：透视只是相当于设置了一个距离，实现了近大远小的效果, 辅助我们查看3D效果的工具，*/</span>
<span class="token comment">/*preserve-3d:给父盒子添加，让子元素3D的空间布局，说白了，只有设置了preserve-3d，这个元素才能被称之为3d元素。 */</span>

<span class="token comment">//一个3d元素可以没有perspective，但是不能没有transform-style</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h3><blockquote><p>动画也是 CSS3 中具有颠覆性的特征之一，可以通过设置多个节点来精确控制一个或者一组动画，常用来实现复杂的动画效果。</p></blockquote><p>动画与过渡的区别：</p><pre><code>1. 过渡必须触发，需要两个状态的改变。
2. 动画可以一直运行下去，不需要触发。实现效果与过渡差不多
</code></pre><p>使用一个动画的基本步骤：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.通过@keyframes指定动画序列</span>
<span class="token comment">//2.通过百分比或者from/to将动画分割成多个节点</span>
<span class="token comment">//3.在各个节点中分别定义动画属性</span>
<span class="token comment">//4.通过animation将动画应用于相应的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="animation-详解" tabindex="-1"><a class="header-anchor" href="#animation-详解" aria-hidden="true">#</a> animation 详解</h4><blockquote><p>animation 是一个复合属性，一共有 8 个参数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// animation-name:动画名称，由@keyframes定义的</span>
<span class="token comment">// animation-duration：动画的持续时间</span>
<span class="token comment">// animation-timing-function：动画的过渡类型</span>
<span class="token comment">// animation-delay：动画的延迟时间</span>
<span class="token comment">// animation-iteration-count：动画的循环次数</span>
<span class="token comment">// animation-direction：设置动画在循环中是否反向运动</span>
<span class="token comment">// animation-fill-mode：设置动画时间之外的状态</span>
<span class="token comment">// animattion-play-state:设置动画的状态。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动画库的使用" tabindex="-1"><a class="header-anchor" href="#动画库的使用" aria-hidden="true">#</a> 动画库的使用</h4>`,77),r={href:"https://isux.tencent.com/css3/index.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://daneden.github.io/animate.css/",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="html5-语义化兼容性问题" tabindex="-1"><a class="header-anchor" href="#html5-语义化兼容性问题" aria-hidden="true">#</a> html5 语义化兼容性问题</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 现象: IE8 以下版本不支持 html5 语义化标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>我是header标签， 我应该独占一整行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方式:</p><ol><li>在浏览器解析标签之前, 动态创建一下 header 标签, 浏览器就认识了</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>默认行内, 需要转成块级</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">header</span> <span class="token punctuation">{</span>
  <span class="token comment">/* header 标签应该独占一整行 */</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是 html5 新增了很多语义化标签, 一个个创建太麻烦了, html5shiv 插件很好的解决这个问题</p><h4 id="html5shiv-解决兼容性问题" tabindex="-1"><a class="header-anchor" href="#html5shiv-解决兼容性问题" aria-hidden="true">#</a> html5shiv 解决兼容性问题</h4><p>在 head 中 引入 html5shiv 插件包即可解决 IE 8 不识别 html5 语义化标签的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;html5shiv.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在支持 html5 语义化标签的浏览器中, 这个 js 的执行就没有必要, 消耗了性能</p><p>所以我们可以通过 CSS IE 条件注释 做兼容性处理</p><h4 id="css-条件注释-了解" tabindex="-1"><a class="header-anchor" href="#css-条件注释-了解" aria-hidden="true">#</a> CSS 条件注释(了解)</h4><p>CSS IE 条件注释 专门用于兼容 IE 低版本</p><p>所以只有 IE9 及 IE9 以下版本 才认识，其他版本的浏览器或者 IE10 以上 的版本会当成注释, 不会解析</p><p>它里面有判断 IE 版本的方式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>lte：就是Less than or equal to的简写，也就是小于或等于的意思。
lt ：就是Less than的简写，也就是小于的意思。
gte：就是Greater than or equal to的简写，也就是大于或等于的意思。
gt ：就是Greater than的简写，也就是大于的意思。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法实例:</p><p>在小于等于 IE 8 的浏览器中才会执行, 在 IE9 中, 就是普通的注释, 不会解析执行</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--[if lte IE 8]&gt;
  &lt;script&gt;
    alert(&#39;呵呵, 小于等于IE8都会执行这段话&#39;)
  &lt;/script&gt;
  &lt;script src=&quot;html5shiv.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大于 IE 8 的浏览器才执行, 只有 IE 9 认识, 其他浏览器, IE 10 及以上, 都将条件注释当成注释</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--[if gt IE 8]&gt;
  &lt;script&gt;
    alert(&#39;只有IE9才执行这句话&#39;)
  &lt;/script&gt;
&lt;![endif]--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="html5-新增类名操作-熟记" tabindex="-1"><a class="header-anchor" href="#html5-新增类名操作-熟记" aria-hidden="true">#</a> html5 新增类名操作(熟记)</h3><p>四个操作样式类的方法, 很简单, 需要熟记</p><ul><li><ol><li>添加类: dom.classList.add</li></ol></li><li><ol start="2"><li>移除类: dom.classList.remove</li></ol></li><li><ol start="3"><li>判断类: dom.classList.contains</li></ol></li><li><ol start="4"><li>切换类: dom.classList.toggle</li></ol></li></ul><h3 id="html5-自定义属性操作" tabindex="-1"><a class="header-anchor" href="#html5-自定义属性操作" aria-hidden="true">#</a> html5 自定义属性操作</h3><p>将来在工作中, 有一种很常见的做法, 就是将数据绑定在标签自定义属性中, 我们之前都需要通过 getAttribute 或者 setAttribute 一个一个获取, 当数据很多时, 就很麻烦</p><p>html5 提供了一种更简单存取数据的方式 dataset</p><p>用法:</p><ul><li><p>1.存的时候, 在属性名前面加上 data-,</p><div class="pp" data-uage="18" data-uname="鹏鹏" data-sex="男"></div></li><li><p>2.取的时候, 通过 dataset.属性名取,<br> 例如: box.dataset.uage 或者 box.dataset[&quot;uage&quot;]</p></li><li><p>3.修改添加, 直接通过对象属性操作方式操作即可<br> 例如: box.dataset.uage=12</p></li></ul><h3 id="网络状态" tabindex="-1"><a class="header-anchor" href="#网络状态" aria-hidden="true">#</a> 网络状态</h3><blockquote><p>在移动端，我们经常需要检测设置是在线还是离线，HTML5 为此定义了一个 navigator.onLine 属性，这个属性用于检测设备是否联网。</p></blockquote><h4 id="网络状态-1" tabindex="-1"><a class="header-anchor" href="#网络状态-1" aria-hidden="true">#</a> 网络状态</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// navigator.onLine返回用户当前的网络状况，是一个布尔值</span>
<span class="token comment">// 1. 如果浏览器连不上网(包括局域网)，就是离线状态，也就是脱机状态，会返回false</span>
<span class="token comment">// 2. 否则就是在线状态，返回true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：返回 true 不一定就是说一定能访问互联网，因为有可能连接的是局域网。但是返回 false 则表示一定没连上网。</strong></p><h4 id="监听网络变化" tabindex="-1"><a class="header-anchor" href="#监听网络变化" aria-hidden="true">#</a> 监听网络变化</h4><blockquote><p>为了更好的确定网络是否连接，HTML5 还定义了两个事件，用于监听网络状态的变化。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//网络连接时会被调用</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;online&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;online&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//网络断开时会被调用</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;offline&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;offline&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="地理位置" tabindex="-1"><a class="header-anchor" href="#地理位置" aria-hidden="true">#</a> 地理位置</h3><blockquote><p>在 HTML 规范中，增加了获取用户地理信息的 API，这样使得我们可以基于用户位置开发互联网应用，即基于位置服务 LBS(Location Base Service)</p></blockquote><h4 id="隐私" tabindex="-1"><a class="header-anchor" href="#隐私" aria-hidden="true">#</a> 隐私</h4><p>HTML5 规范提供了一套保护用户隐私的机制。必须先得到用户明确许可，才能获取用户的位置信息。</p><p><strong>在获取地理位置之前，会询问用户，只有在获得许可之后，才能获取到用户的位置信息。</strong></p><h4 id="相关的方法" tabindex="-1"><a class="header-anchor" href="#相关的方法" aria-hidden="true">#</a> 相关的方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//successCallback:获取成功后会调用,并返回一个position对象，里面包含了地理位置信息</span>
<span class="token comment">//获取失败了会调用，并返回error对象，里面包含了错误信息。</span>
<span class="token comment">//获取当前的地理位置信息</span>
navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span>
<span class="token comment">//重复的获取当前的地理位置信息</span>
navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">watchPosition</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定位成功会调用该方法</span>
    <span class="token comment">// position.coords.latitude 纬度</span>
    <span class="token comment">// position.coords.longitude 经度</span>
    <span class="token comment">// position.coords.accuracy 精度</span>
    <span class="token comment">// position.coords.altitude 海拔高度</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定位失败会调用该方法</span>
    <span class="token comment">// error 是错误信息</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PC 端: <strong>chrome,火狐定位请求的页面要求要是 https 协议的, 所以 PC 端测试在 IE 下测试</strong></p><p>移动端: <strong>在 iOS 10 中，苹果对 webkit 定位权限进行了修改，定位请求的页面必须是 https 协议的。</strong></p><h4 id="百度地图" tabindex="-1"><a class="header-anchor" href="#百度地图" aria-hidden="true">#</a> 百度地图</h4><blockquote><p>仅仅获取到经纬度对于用户来说意义并不大，因为用户也不知道经度和纬度表示的是地球上的哪一个地方，因为我们可以结合百度地图，准确的将用户的位置显示出来。</p></blockquote>`,52),m={href:"http://lbsyun.baidu.com/",target:"_blank",rel:"noopener noreferrer"},v=t(`<ol><li>在开发中，找到 javascript API</li><li>直接查看示例 demo</li><li>复制相应的代码，替换掉秘钥就行，秘钥只需创建一个新的应用就可以了。</li></ol><h3 id="web-存储" tabindex="-1"><a class="header-anchor" href="#web-存储" aria-hidden="true">#</a> web 存储</h3><blockquote><p>在代码执行的时候，数据都是存储在内存中的，当页面关闭或者浏览器关闭的时候，内存就被释放掉了。数据只有存储在硬盘上，才不会被释放。</p></blockquote><p>web 存储初体验</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//存储在内存中，会被释放</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>

<span class="token comment">//存储在硬盘上，不会被释放</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cookie-了解" tabindex="-1"><a class="header-anchor" href="#cookie-了解" aria-hidden="true">#</a> cookie(了解)</h4><blockquote><p>传统方式，我们以 document.cookie 进行存储，但是存储起来特别麻烦，并且，存储大小只有 4k，常用来做自动登录，即存储用户的账号和密码信息。每次请求都会带上 cookie</p></blockquote><p>cookie 是以字符串形式存在的，这个字符串有固定的格式：key=value;key1=value1;</p><p>在获取 cookie 内容时，一般需要通过正则或者字符串的方法进行处理，转换成对象，最终得到数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;name=zhangsan&#39;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;age=18&#39;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;sex=23&#39;</span>

<span class="token comment">//读取cookie</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用原生 js 操作 cookie 太过麻烦，尤其是 cookie 的获取和删除操作，使用 jquery.cookie 插件，能够简化我们的操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//设置cookie</span>
$<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//获取cookie</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//删除cookie</span>
$<span class="token punctuation">.</span><span class="token function">removeCookie</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 cookie：操作太麻烦，最多只能存储 4k ,每次请求都会带上 cookie</p><h4 id="sessionstorage-与-localstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage-与-localstorage" aria-hidden="true">#</a> sessionStorage 与 localStorage</h4><blockquote><p>HTML5 规范提出了解决方案，使用 sessionStorage 和 localStorage 存储数据。设置、读取、删除操作很方便</p></blockquote><p>window.sessionStorage 的特点</p><ul><li>1.声明周期为关闭浏览器窗口</li><li>2.不能在多个窗口下共享数据。</li><li>3.大小为 5M</li></ul><p>window.localStorage 的特点</p><ul><li>1.永久生效，除非手动删除</li><li>2.可以多个窗口共享</li><li>3.大小为 5M</li></ul><p>window.sessionStorage 与 window.localStorage 的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">//设置存储内容</span>
<span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//读取存储内容</span>
<span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//删除键值为key的存储内容</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//清空所有存储内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>面试题：请描述一下 cookies，sessionStorage 和 localStorage 的区别？</strong></p><h3 id="自定义播放器" tabindex="-1"><a class="header-anchor" href="#自定义播放器" aria-hidden="true">#</a> 自定义播放器</h3><p>全屏切换 API：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>video<span class="token punctuation">.</span><span class="token function">requestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法：load()、play()、pause()<br> 属性：</p><p>currentTime:当前时间<br> duration：总长时间<br> timeupdate:播放进度更改时触发<br> volume：控制音量</p>`,27),h=n("br",null,null,-1),b={href:"http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.awesomes.cn/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>video.js</p><h3 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h3><blockquote><p>通过 FileReader 对象我们可以读取本地存储的文件，可以使用 File 对象来指定所要读取的文件或数据。其中 File 对象可以是来自用户在一个 input 元素上选择文件后返回的 FileList 对象，也可以来自由拖放操作生成的 DataTransfer</p></blockquote><h4 id="files" tabindex="-1"><a class="header-anchor" href="#files" aria-hidden="true">#</a> files</h4><p>对于 file 类型的 input 框，在这个 DOM 对象中，存在一个 files 属性，这个属性是 FileList 对象，是一个伪数组，里面存储着上传的所有文件，当 input 框指定了 multiple 属性之后，就可以上传多个文件了。</p><p>也就是说，通过 files 这个属性，我们就可以获取到所有上传的文件。</p><h4 id="file-对象" tabindex="-1"><a class="header-anchor" href="#file-对象" aria-hidden="true">#</a> file 对象</h4><p>File 对象中包含了文件的最后修改时间、文件名、文件类型等信息。</p><h4 id="filereader-对象" tabindex="-1"><a class="header-anchor" href="#filereader-对象" aria-hidden="true">#</a> FileReader 对象</h4><p>FileReader 是一个 HTML5 新增的对象，用于读取文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建一个fileReader对象</span>
<span class="token keyword">var</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">;</span>
<span class="token comment">//读取文件的两个方法</span>
<span class="token function">readAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 以文本的方式读取文件
<span class="token function">readAsDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 以DataURL形式读取文件
<span class="token comment">//文件读取完成事件：</span>
fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//当文件读取完成，可以通过result属性获取结果</span>
fr<span class="token punctuation">.</span>result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader#toc",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>

file<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

  <span class="token comment">//files:里面存储了所有上传的文件</span>
  <span class="token comment">//这个data就是我们上传的那个文件</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> file<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

  <span class="token comment">//1. 创建一个文件读取器</span>
  <span class="token keyword">var</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">//2. 让文件读取器读取整个文件</span>
  fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

  <span class="token comment">//3. 等待文件读取完</span>
  <span class="token comment">//onload：文件读取完成后，就会触发</span>
  fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> fr<span class="token punctuation">.</span>result
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    box<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拖拽" tabindex="-1"><a class="header-anchor" href="#拖拽" aria-hidden="true">#</a> 拖拽</h3><p>在 HTML5 的规范中，我们可以通过为元素增加 draggable=&quot;true&quot;来设置此元素是否可以进行拖拽操作，其中图片、链接默认是开启的。</p><h4 id="拖拽元素" tabindex="-1"><a class="header-anchor" href="#拖拽元素" aria-hidden="true">#</a> 拖拽元素</h4><p>页面中设置了 draggable=&quot;true&quot;属性的元素，其中<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code>标签默认是可以被拖拽的</p><h4 id="目标元素-事件监听" tabindex="-1"><a class="header-anchor" href="#目标元素-事件监听" aria-hidden="true">#</a> 目标元素, 事件监听</h4><p>页面中任何一个元素都可以成为目标元素</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ondragover	应用于目标元素，当停留在目标元素上时调用
ondrop		应用于目标元素，当在目标元素上松开鼠标时调用(浏览器默认不让拖拽，需要组织dragover的默认行为。)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-flexible-实现手淘-h5-页面的终端适配" tabindex="-1"><a class="header-anchor" href="#使用-flexible-实现手淘-h5-页面的终端适配" aria-hidden="true">#</a> 使用 Flexible 实现手淘 H5 页面的终端适配</h3><h4 id="大概说明" tabindex="-1"><a class="header-anchor" href="#大概说明" aria-hidden="true">#</a> 大概说明</h4><p>做移动端网页和 pc 端很大不同的便是现在移动端窗口分辨率繁多。</p><p>很多时候 UI 给的设计图只有一份，还是按照 iphone6 设计的，这就让前端适配其他例如 6plus 或安卓等其他移动端头疼。</p><p>还好，阿里巴巴 2015 年底公开了其成熟的适配方案，lib-flexible，至于其可靠性可参考每年天猫活动的移动端页面。</p><p>这个方案的用法大概是这样的，HTML 头部引入 lib-flexible 的样式和 js 库，容器或组件宽高主要使用单位 rem ，字体大小则不变仍然使用单位 px。</p><h5 id="还有一个约束是-因为只面向移动端-因此我们限制最外层包裹的-div-最大宽度为-640px" tabindex="-1"><a class="header-anchor" href="#还有一个约束是-因为只面向移动端-因此我们限制最外层包裹的-div-最大宽度为-640px" aria-hidden="true">#</a> 还有一个约束是，因为只面向移动端，因此我们限制最外层包裹的 div 最大宽度为 640px</h5><h5 id="设备像素比-device-pixel-ratio" tabindex="-1"><a class="header-anchor" href="#设备像素比-device-pixel-ratio" aria-hidden="true">#</a> 设备像素比(device pixel ratio)</h5><p>设备像素比简称为 dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：</p><ul><li>物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。</li><li>设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说 px)，然后由相关系统转换为物理像素。</li><li>在 IOS 设备上叫 PT，Android 设备上叫 DP，在 css 中，叫 PX。</li><li>设备像素比 ＝ 物理像素 / 设备独立像素</li></ul><h4 id="lib-flexible-使用步骤" tabindex="-1"><a class="header-anchor" href="#lib-flexible-使用步骤" aria-hidden="true">#</a> lib-flexible 使用步骤</h4>`,20),w={href:"https://github.com/amfe/article/issues/17",target:"_blank",rel:"noopener noreferrer"},_=t(`<h5 id="_1-引入-lib-flexible" tabindex="-1"><a class="header-anchor" href="#_1-引入-lib-flexible" aria-hidden="true">#</a> 1.引入 lib-flexible</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>lib-flexible demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css/flexible.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/flexible.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-计算-rem-值" tabindex="-1"><a class="header-anchor" href="#_2-计算-rem-值" aria-hidden="true">#</a> 2 计算 rem 值</h5>`,3),q={href:"http://www.cnblogs.com/azhai-biubiubiu/p/6003597.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>rem 来做宽高定型有个最大的问题是，font-size 如何计算的问题，如何算得的 font-size 可以在不同分辨率下显示效果一致呢？</p><p>不用担心，lib-flexible 已经帮你算好了，在你调整窗口大小的时候自动计算调整 rem 的基准，你只要做的是，按照设计图算出能适配不同分辨率的移动端的 rem 值。</p><h6 id="计算-rem-值-计算公式很简单" tabindex="-1"><a class="header-anchor" href="#计算-rem-值-计算公式很简单" aria-hidden="true">#</a> 计算 rem 值，计算公式很简单：</h6><p>需转换的 px 值 / 设计稿宽度 px 值 * 10</p><h5 id="_3-按照-ui-给的设计稿敲出代码" tabindex="-1"><a class="header-anchor" href="#_3-按照-ui-给的设计稿敲出代码" aria-hidden="true">#</a> 3 按照 UI 给的设计稿敲出代码</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css/flexible.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/flexible.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">html,
      body</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">.container</span> <span class="token punctuation">{</span>
        <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
        <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">max-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">.block</span> <span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span> 1.5625rem<span class="token punctuation">;</span>

        <span class="token property">width</span><span class="token punctuation">:</span> 3.75rem<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 1.875rem<span class="token punctuation">;</span>

        <span class="token property">background-color</span><span class="token punctuation">:</span> #0075a9<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>block<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-不同分辨率移动端下浏览效果" tabindex="-1"><a class="header-anchor" href="#_4-不同分辨率移动端下浏览效果" aria-hidden="true">#</a> 4 不同分辨率移动端下浏览效果</h5><h3 id="浏览器的重绘与重排" tabindex="-1"><a class="header-anchor" href="#浏览器的重绘与重排" aria-hidden="true">#</a> 浏览器的重绘与重排</h3><h4 id="_1、重绘-repaint" tabindex="-1"><a class="header-anchor" href="#_1、重绘-repaint" aria-hidden="true">#</a> 1、重绘(Repaint)</h4><ul><li>重绘是一个元素外观的改变所触发的浏览器行为，例如改变 outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，所以并不一定伴随重排。</li></ul><h4 id="_2、重排-reflow" tabindex="-1"><a class="header-anchor" href="#_2、重排-reflow" aria-hidden="true">#</a> 2、重排(Reflow)</h4><ul><li>渲染对象在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排</li><li>&quot;重绘&quot;不一定需要&quot;重排&quot;，比如改变某个网页元素的颜色，就只会触发&quot;重绘&quot;，不会触发&quot;重排&quot;，因为布局没有改变。但是，&quot;重排&quot;必然导致&quot;重绘&quot;，比如改变一个网页元素的位置，就会同时触发&quot;重排&quot;和&quot;重绘&quot;，因为布局改变了。</li></ul><h4 id="_3、常见的触发重排的操作" tabindex="-1"><a class="header-anchor" href="#_3、常见的触发重排的操作" aria-hidden="true">#</a> 3、常见的触发重排的操作</h4><ul><li>重排(Reflow) 的成本比 重绘(Repaint)的成本高得多的多。DOM Tree 里的每个结点都会有重排(Reflow) 方法，一个结点的 重排(Reflow) 很有可能导致子结点，甚至父点以及同级结点的重排(Reflow) 。在一些高性能的电脑上也许还没什么，但是如果 重排(Reflow) 发生在手机上，那么这个过程是非常痛苦和耗电的。</li></ul><h5 id="触发重排的操作" tabindex="-1"><a class="header-anchor" href="#触发重排的操作" aria-hidden="true">#</a> 触发重排的操作</h5><ul><li>当你增加、删除、修改 DOM 结点时，会导致重排(Reflow), 重绘(Repaint)。</li><li>当你移动 DOM 的位置</li><li>当你修改 CSS 样式的时候。</li><li>当你 Resize 窗口的时候（移动端没有这个问题）</li><li>当你修改网页的默认字体时。</li><li>获取某些属性时<br> 注：display:none 重排(Reflow)，而 visibility:hidden 只会触发重绘(Repaint)，因为没有发现位置变化。</li></ul><h4 id="_4-注意" tabindex="-1"><a class="header-anchor" href="#_4-注意" aria-hidden="true">#</a> 4.注意:</h4><p>向浏览器请求一些 style 信息的时候，就会让浏览器 flush 队列，比如：</p><ul><li>（1）offsetTop, offsetLeft, offsetWidth, offsetHeight</li><li>（2）scrollTop/Left/Width/Height</li><li>（3）clientTop/Left/Width/Height</li><li>（4）width,height</li></ul><p>当你请求上面的一些属性的时候，浏览器为了给你最精确的值，需要 flush 队列，<br> 因为队列中可能会有影响到这些值的操作。即使你获取元素的布局和样式信息跟最近的布局信息差不多，<br> 浏览器都会强行刷新渲染队列。</p><h4 id="_5-优化" tabindex="-1"><a class="header-anchor" href="#_5-优化" aria-hidden="true">#</a> 5.优化</h4><p>（1）将多次改变样式属性的操作合并成一次操作<br> （2）将需要多次重排的元素，position 属性设为 absolute 或 fixed，<br> 这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。<br> （3）由于 display 属性为 none 的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。<br> 如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发 2 次重排。</p><h3 id="解决浏览器兼容性问题-还是从三个方面入手-html-部分、css-部分、js-部分。" tabindex="-1"><a class="header-anchor" href="#解决浏览器兼容性问题-还是从三个方面入手-html-部分、css-部分、js-部分。" aria-hidden="true">#</a> 解决浏览器兼容性问题，还是从三个方面入手：html 部分、css 部分、js 部分。</h3><h4 id="_1、html-部分" tabindex="-1"><a class="header-anchor" href="#_1、html-部分" aria-hidden="true">#</a> 1、html 部分</h4><ul><li>a、最突出也是最容易想到的就是高版本的浏览器用了低版本的浏览器无法识别的元素，从而导致不能解析。这点主要体现在 html5 的新标签上</li><li><pre><code> 解决办法是：htmlshim框架可以让低于IE9的浏览器支持html5
</code></pre></li><li>b、img 的 alt 属性，在图片不存在的情况下，各浏览器的解析不一致<br> 在 chrome 下显示的是一张破损的图片，在 ff 下显示的是 alt 的文字，而在 IE 中显示的是破损的图片加文字</li><li>c、ul 标签内外边距问题<br> ul 标签在 IE6\\IE7 中，有个默认的外边距，但是在 IE8 以上及其他浏览器中有个默认的内边距</li></ul><h4 id="_2、css-部分" tabindex="-1"><a class="header-anchor" href="#_2、css-部分" aria-hidden="true">#</a> 2、css 部分：</h4><ul><li><p>a、css 的 hack 问题：主要针对 IE 的不同版本，不同的浏览器的写法不同</p><p>IE 的条件注释 hack：</p><!--[if IE 6]&gt;此处内容只有IE6.0可见&lt;![endif]--><!--[if IE 7]&gt;此处内容只有IE7.0可见&lt;![endif]--></li><li><p>b、IE6 双边距问题：IE6 在浮动后，又有横向的 margin，此时，该元素的外边距是其值的 2 倍</p><p>解决办法：display:block;</p></li><li><p>c、IE6 下图片的下方有空隙</p><p>解决方法：给 img 设置 display:block;</p></li><li><p>d、IE6 下两个 float 之间会有个 3px 的 bug</p><p>解决办法：给右边的元素也设置 float:left;</p></li><li><p>e、IE6 下没有 min-width 的概念，其默认的 width 就是 min-width</p></li><li><p>f、IE6 下在使用 margin:0 auto;无法使其居中</p><p>解决办法：为其父容器设置 text-align:center;</p></li><li><p>g、 被点击过后的超链接不再具有 hover 和 active 属性</p><p>解决办法:按 lvha 的顺序书写 css 样式</p></li><li><p>h、在使用绝对定位或者相对定位后，IE 中设置 z-index 失效，原因是因为其元素依赖于父元素的 z-index，但是父元素默认为 0， 子高父低，所以不会改变显示的顺序</p></li><li><p>i、IE6 下无法设置 1px 的行高，原因是由其默认行高引起的</p></li><li><p>解决办法：为期设置 overflow:hidden;或者 line-height:1px;</p></li></ul><h4 id="_3、js-部分" tabindex="-1"><a class="header-anchor" href="#_3、js-部分" aria-hidden="true">#</a> 3、js 部分</h4><h5 id="_1-window-event" tabindex="-1"><a class="header-anchor" href="#_1-window-event" aria-hidden="true">#</a> 1.window.event</h5><ul><li><p>ie：有 window.event 对象</p></li><li><p>ff：没有 window.event 对象，可以通过函数的参数传递 event 对象。如 onclick=clickHandler(event)</p></li><li><p>解决办法：</p></li><li><p>var event = event || window.event;</p></li></ul><h5 id="_2-鼠标当前坐标" tabindex="-1"><a class="header-anchor" href="#_2-鼠标当前坐标" aria-hidden="true">#</a> 2.鼠标当前坐标</h5><ul><li><p>ie：event.x 和 event.y</p></li><li><p>ff：event.pageX 和 event.pageY</p></li></ul><p>-解决办法：采用通用属性：event.clientX 和 event.clientY 属性;</p><h5 id="_3-鼠标坐标加上滚动条滚过的距离" tabindex="-1"><a class="header-anchor" href="#_3-鼠标坐标加上滚动条滚过的距离" aria-hidden="true">#</a> 3. 鼠标坐标加上滚动条滚过的距离</h5><ul><li>ie：event.offsetX 和 event.offsetY</li><li>ff：event.layerX 和 event.layerY</li><li>解决办法：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">mouseDownHandler</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> event <span class="token operator">?</span> event <span class="token operator">:</span> window<span class="token punctuation">.</span>event
    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">||</span> e<span class="token punctuation">.</span>layerX
    <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">||</span> e<span class="token punctuation">.</span>layerY
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-event-srcelement" tabindex="-1"><a class="header-anchor" href="#_4-event-srcelement" aria-hidden="true">#</a> 4. event.srcElement</h5><ul><li><p>ie：event 对象有 srcElement 属性，但是没有 target 属性；</p></li><li><p>ff：event 对象有 target 属性，但没有 srcElement 属性</p></li><li><p>解决办法：</p></li></ul><p>使用 obj = event.srcElement ? event.srcElement : event.target;</p><p>来代替 ie 下的 event.srcElement 或者 ff 下的 event.target（注意 event 的兼容性）;</p><h5 id="_5-event-toelement" tabindex="-1"><a class="header-anchor" href="#_5-event-toelement" aria-hidden="true">#</a> 5.event.toElement</h5><ul><li>ie：event 对象有 toElement 属性，但没有 relatedTarget 属性</li><li>ff：event 对象没有有 toElement 属性，但有 relatedTarget 属性</li><li>解决办法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>relatedTarget <span class="token operator">||</span> e<span class="token punctuation">.</span>toElement
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-标签的-x-和-y-的坐标位置" tabindex="-1"><a class="header-anchor" href="#_6-标签的-x-和-y-的坐标位置" aria-hidden="true">#</a> 6. 标签的 x 和 y 的坐标位置，</h5><p>style.posLeft 和 style.posTop</p><ul><li>ie：有</li><li>ff：没有</li><li>解决办法：<br> 用通用属性 obj.offsetLeft 和 obj.offsetTop</li></ul><h5 id="_7-窗体的高度和宽度" tabindex="-1"><a class="header-anchor" href="#_7-窗体的高度和宽度" aria-hidden="true">#</a> 7. 窗体的高度和宽度</h5><ul><li><p>ie：document.body.offsetWidth 和 document.body.offsetHeight。注意，此时页面一定要有 body 标签。</p></li><li><p>ff：<br> window.innerWidth 和 window.innerHeight，以及 document.documentElement.clientWidth 和 document.documentElement.clientHeight。</p></li><li><p>解决办法：</p></li></ul><p>通用属性</p><p>document.body.clientWidth 和 document.body.clientHeight；</p><h5 id="_8-添加事件" tabindex="-1"><a class="header-anchor" href="#_8-添加事件" aria-hidden="true">#</a> 8. 添加事件</h5><ul><li><p>ie：element.attachEvent(&#39;onclick&#39;,function)</p></li><li><p>ff：element.addEventListener(&#39;click&#39;,function,true)</p></li><li><p>解决办法：<br> element.onclick = function.</p></li></ul><p>虽然都可以使用 click 事件。但 onclick 和上面两种方法效果是不一样的。onclick 只有执行一个过程，而 attachEvent 和 addEventListener 执行的是一个过程列表，也就是多个过程。 如：element.attachEvent(&#39;onclick&#39;,func1); element.attachEvent(&quot;onclick&quot;, func2)这样 func1 和 func2 都会被执行。</p><h5 id="_9-标签的自定义属性" tabindex="-1"><a class="header-anchor" href="#_9-标签的自定义属性" aria-hidden="true">#</a> 9. 标签的自定义属性</h5><ul><li>ie：如果给标签 div1 定义了一个属性 value，可以 div1.value 和 div1[&quot;value&quot;]取得该值</li><li>ff：不能用 div1.value 和 div1[&quot;value&quot;]</li><li>解决办法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div1<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_10-document-form-item" tabindex="-1"><a class="header-anchor" href="#_10-document-form-item" aria-hidden="true">#</a> 10. document.form.item</h5><ul><li>ie：现有问题，document.formName.item(&quot;itemName&quot;) 这样的语句，不能在 ff 下运行</li><li>ff：不支持</li><li>解决办法： document.formName.elements[&quot;elementName&quot;]</li></ul><h5 id="_10-集合-数组类对象问题" tabindex="-1"><a class="header-anchor" href="#_10-集合-数组类对象问题" aria-hidden="true">#</a> 10. 集合/数组类对象问题</h5><ul><li>ie：有许多集合类对象取用时用()</li><li>ff：不能这样取用</li><li>解决办法：<br> 改用[]作为下标运算。</li></ul><p>如：</p><p>document.forms(&quot;formName&quot;)</p><p>改为 document.forms[&quot;formName&quot;]。</p><p>document.getElementsByName(&quot;inputName&quot;)(1)</p><p>改为 document.getElementsByName(&quot;inputName&quot;)[1]</p><h5 id="_11-html-对象的-id-作为对象名的问题" tabindex="-1"><a class="header-anchor" href="#_11-html-对象的-id-作为对象名的问题" aria-hidden="true">#</a> 11. html 对象的 id 作为对象名的问题</h5><ul><li>ie：html 对象的 id 可以作为 document 的下属变量名直接使用</li><li>ff：需要用 getElementById()方法</li><li>解决办法：</li><li>用 getElementById(&#39;idName&#39;)代替 idName 作为对象变量使用</li></ul><h5 id="_12-用-idname-字符串取得对象的问题" tabindex="-1"><a class="header-anchor" href="#_12-用-idname-字符串取得对象的问题" aria-hidden="true">#</a> 12. 用 idName 字符串取得对象的问题</h5><ul><li>ie：利用 eval(idName)可以取得 id 为 idName 的 html 对象。</li><li>ff：不支持</li><li>解决办法：getElementById(idName) 代替 eval(idName)</li></ul><h5 id="_13-变量名与某-html-对象-id-相同的问题" tabindex="-1"><a class="header-anchor" href="#_13-变量名与某-html-对象-id-相同的问题" aria-hidden="true">#</a> 13. 变量名与某 html 对象 id 相同的问题</h5><ul><li>ie：因为 html 对象 id 在 ie 中直接调用，所以变量名不能和 id 相同</li><li>ff：可以使用变量名和 id 相同</li><li>解决办法，</li><li>声明变量时一律加上 var ，以避免歧义(最好 id 和变量名不要相同)。</li></ul><h5 id="_14-document-getelementsbyname-和-document-all-name" tabindex="-1"><a class="header-anchor" href="#_14-document-getelementsbyname-和-document-all-name" aria-hidden="true">#</a> 14. document.getElementsByName() 和 document.all[name]</h5><ul><li>ie：getElementsByName()、document.all[name] 均不能用来取得 div 元素</li><li>ff：可以兼容 document.all， 但会生成一条警告。</li><li>解决办法： <ul><li>可以用 getElementById() 或者 getElementByTagName()来代替</li></ul></li></ul><h5 id="_15-input-type-属性问题" tabindex="-1"><a class="header-anchor" href="#_15-input-type-属性问题" aria-hidden="true">#</a> 15. input.type 属性问题</h5><ul><li>ie：input.type 属性为只读</li><li>ff：input.type 属性为读写</li></ul><h5 id="_16-window-location-href" tabindex="-1"><a class="header-anchor" href="#_16-window-location-href" aria-hidden="true">#</a> 16. window.location.href</h5><ul><li>ie：（ff2.0 以下），可以使用 window.location 或 window.location.href ; ff 1.5 下只能使用 window.location</li><li>解决办法： <ul><li>使用 window.location 来代替 window.location.href</li></ul></li></ul><h5 id="_17-模态和非模态窗口问题" tabindex="-1"><a class="header-anchor" href="#_17-模态和非模态窗口问题" aria-hidden="true">#</a> 17. 模态和非模态窗口问题</h5><ul><li>ie：可以通过 showModalDialog 和 showModelessDialog 打开模态和非模态窗口</li><li>FF：不支持</li><li>解决办法： <ul><li>直接使用 window.open(pageURL, name, parameters)</li><li>方式打开新窗口，如果需要将子窗口中的参数传递回父窗口，可以在子窗口中使用 window.opener 来访问父窗口。</li><li>如：var parWin = window.opener; parWin.document.getElementById(&#39;title&#39;).value = &#39;My Title&#39;;</li></ul></li></ul><h5 id="_18-body-对象" tabindex="-1"><a class="header-anchor" href="#_18-body-对象" aria-hidden="true">#</a> 18. body 对象</h5><ul><li>IE：body 必须在 body 标签被浏览器完全读入后才存在</li><li>FF：body 在 body 标签没有被浏览器完全读入之前就存在</li><li>解决方法:一切在 body 上插入节点的动作，全部在 onload 后进行</li></ul><h5 id="_19-事件委托方法" tabindex="-1"><a class="header-anchor" href="#_19-事件委托方法" aria-hidden="true">#</a> 19. 事件委托方法</h5><ul><li>IE：document.body.onload = init;</li><li>FF：document.body.onload = init();</li><li>解决办法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//统一使用</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;init()&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//或者</span>
docuement<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//这里是代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_20-父元素的区别" tabindex="-1"><a class="header-anchor" href="#_20-父元素的区别" aria-hidden="true">#</a> 20. 父元素的区别</h5><ul><li>IE：obj.parentElement;</li><li>FF ：obj.parentNode</li><li>解决办法：因为 FF 与 IE 都支持 dom，所以可以都使用 obj.parentNode</li></ul><h5 id="_21-innertext" tabindex="-1"><a class="header-anchor" href="#_21-innertext" aria-hidden="true">#</a> 21.innerText</h5><ul><li>在 IE 中能正常工作，</li><li>但是 innerText 在 FF 中却不行.</li><li>解决方法:需用 textContent</li></ul><h5 id="_22-f" tabindex="-1"><a class="header-anchor" href="#_22-f" aria-hidden="true">#</a> 22. F</h5><p>F 中设置 HTML 标签的 style 时，所有位置性和字体尺寸的值必须后跟 px。这个 IE 也是支持的</p><h5 id="_23-父节点、子节点和删除节点" tabindex="-1"><a class="header-anchor" href="#_23-父节点、子节点和删除节点" aria-hidden="true">#</a> 23. 父节点、子节点和删除节点</h5><ul><li>IE：parentElement、parement.children，element.romoveNode(true)。</li><li>FF：parentNode、parentNode.childNodes，node.parentNode.removeChild(node)。</li></ul><h5 id="_24-关于-frame" tabindex="-1"><a class="header-anchor" href="#_24-关于-frame" aria-hidden="true">#</a> 24.关于 frame</h5><ul><li>IE 中可以用 window.testFrame 取得该 frame，</li><li>FF 中不行</li><li>解决方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;testFrame&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;xx.html&#39;</span>
window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>frameName<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">&#39;xx.html&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:HTML5 不支持 <code>&lt;frame&gt;</code> 标签。</p><h5 id="_25-取得元素的属性" tabindex="-1"><a class="header-anchor" href="#_25-取得元素的属性" aria-hidden="true">#</a> 25.取得元素的属性</h5><p>在 FF 中，自己定义的属性必须 getAttribute() 取得</p><h5 id="_26-ff-中没有-parentelement-parement-children-而用-parentnode-parentnode-childnodes" tabindex="-1"><a class="header-anchor" href="#_26-ff-中没有-parentelement-parement-children-而用-parentnode-parentnode-childnodes" aria-hidden="true">#</a> 26.FF 中没有 parentElement，parement.children 而用 parentNode，parentNode.childNodes</h5><ul><li><p>问题：childNodes 的下标的含义在 IE 和 FF 中不同，FF 的 childNodes 中会插入空白文本节点</p></li><li><p>解决方法：可以通过 node.getElementsByTagName() 来回避这个问题<br> 问题：当 html 中节点缺失时，IE 和 FF 对 parentNode 的解释不同，例如：</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>FF 中 input.parentNode 的值为 form，</li><li>而 IE 中 input.parentNode 的值为空节点</li><li>问题：FF 中节点自己没有 removeNode 方法</li><li>解决方法：必须使用如下方法 node.parentNode.removeChild(node)</li></ul><h5 id="_27-const-问题" tabindex="-1"><a class="header-anchor" href="#_27-const-问题" aria-hidden="true">#</a> 27.const 问题</h5><ul><li>问题:<br> 在 IE 中不能使用 const 关键字</li><li>解决方法:以 var 代替</li></ul><h5 id="_28-nodename-与-tagname-问题" tabindex="-1"><a class="header-anchor" href="#_28-nodename-与-tagname-问题" aria-hidden="true">#</a> 28.nodeName 与 tagName 问题</h5><ul><li>问题:在 FF 中，所有节点均有 nodeName 值，但 textNode 没有 tagName 值，</li><li>在 IE 中，nodeName 的使用有问题</li><li>解决方法:使用 tagName，但应检测其是否为空</li></ul><h5 id="_28-获取元素计算后的样式" tabindex="-1"><a class="header-anchor" href="#_28-获取元素计算后的样式" aria-hidden="true">#</a> 28.获取元素计算后的样式</h5><ul><li>参数 1:元素，获取谁的样式</li><li>参数 2:伪元素，固定为 null <ul><li>window.getComputedStyle(box,null);IE11 以下不支持</li><li>box.currentStyle;IE8 以上支持</li><li>解决方法</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//第一种</span>
<span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> attr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> ull <span class="token comment">//定义一个空对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;getComputedStyle&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> element<span class="token punctuation">.</span>currentStyle
    <span class="token keyword">return</span> result<span class="token punctuation">[</span>attr<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#39;width&#39;</span><span class="token punctuation">)</span> <span class="token comment">//调用</span>
<span class="token comment">//第二种</span>
<span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;getComputedStyle&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span>currentStyle
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token comment">//调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_29-元素属性" tabindex="-1"><a class="header-anchor" href="#_29-元素属性" aria-hidden="true">#</a> 29.元素属性</h5><ul><li>IE 下 input.type 属性为只读，</li><li>但是 FF 下可以修改</li><li>解决办法：不能修改 input.type 的属性，如果必须要修改，可以先隐藏原来的 input，然后再同样的位置再插入一个新的 input 元素。</li></ul><h5 id="_30、标准的事件绑定方法" tabindex="-1"><a class="header-anchor" href="#_30、标准的事件绑定方法" aria-hidden="true">#</a> 30、标准的事件绑定方法</h5><ul><li>函数为 addEventListener，但 IE 下是 attachEvent；</li></ul><h5 id="_31、事件的捕获方式不一致" tabindex="-1"><a class="header-anchor" href="#_31、事件的捕获方式不一致" aria-hidden="true">#</a> 31、事件的捕获方式不一致，</h5><ul><li>标准浏览器是由外至内，而 IE 是由内到外，但是最后的结果是将 IE 的标准定为标准</li></ul><h5 id="_32、我们常说的事件处理时的-event-属性" tabindex="-1"><a class="header-anchor" href="#_32、我们常说的事件处理时的-event-属性" aria-hidden="true">#</a> 32、我们常说的事件处理时的 event 属性，</h5><ul><li>在标准浏览器其是传入的，IE 下由 window.event 获取的。并且获取目标元素的方法也不同，标准浏览器是 event.target，而 IE 下是 event.srcElement</li></ul><h5 id="_33、日期处理" tabindex="-1"><a class="header-anchor" href="#_33、日期处理" aria-hidden="true">#</a> 33、日期处理</h5><ul><li>在低版本的 IE 中获取的日期处理函数的值不是与 1900 的差值，但是在高版本的 IE 中和标准浏览器保持了一致，获取的值也是与 1900 的差值。<br> 比如：var year= new Date().getYear();</li></ul><h5 id="_34、ajax-的实现方式不同" tabindex="-1"><a class="header-anchor" href="#_34、ajax-的实现方式不同" aria-hidden="true">#</a> 34、ajax 的实现方式不同，</h5><ul><li>这个我所理解的是获取 XMLHttpRequest 的不同，IE 下是 activeXObject</li></ul><h5 id="_35、ie-中不能操作-tr-的-innerhtml" tabindex="-1"><a class="header-anchor" href="#_35、ie-中不能操作-tr-的-innerhtml" aria-hidden="true">#</a> 35、IE 中不能操作 tr 的 innerHtml</h5><h5 id="_36、获得-dom-节点的父节点、子节点的方式不同" tabindex="-1"><a class="header-anchor" href="#_36、获得-dom-节点的父节点、子节点的方式不同" aria-hidden="true">#</a> 36、获得 DOM 节点的父节点、子节点的方式不同</h5><ul><li>其他浏览器：parentNode parentNode.childNodes</li><li>IE：parentElement parentElement.children</li></ul>`,124);function j(I,F){const s=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[a("https://isux.tencent.com/css3/index.html"),e(s)])]),n("p",null,[n("a",d,[a("https://daneden.github.io/animate.css/"),e(s)])]),k,n("p",null,[a("百度地图官网："),n("a",m,[a("http://lbsyun.baidu.com/"),e(s)])]),v,n("p",null,[a("参考文档"),h,n("a",b,[a("http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp"),e(s)])]),n("p",null,[a("推荐网站："),n("a",g,[a("https://www.awesomes.cn/"),e(s)])]),f,n("p",null,[a("参考资料："),n("a",x,[a("https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader#toc"),e(s)])]),y,n("p",null,[n("a",w,[a("需要深入解释的知识："),e(s)])]),_,n("p",null,[n("a",q,[a("详细了解 rem 值计算可参考"),e(s)])]),E])}const L=i(c,[["render",j],["__file","H5CSS3.html.vue"]]);export{L as default};
